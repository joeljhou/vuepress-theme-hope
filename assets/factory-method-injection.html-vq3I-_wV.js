import{_ as t,r as o,o as p,c,a,b as n,d as e,e as i}from"./app-DhAs2yMg.js";const r={},l=a("h1",{id:"方法注入",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#方法注入"},[a("span",null,"方法注入")])],-1),u={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton",target:"_blank",rel:"noopener noreferrer"},d=a("strong",null,"原型",-1),m={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-aware",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.spring.io/spring-framework/reference/core/beans/basics.html#beans-factory-client",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,'getBean("B")',-1),g=i(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">fiona<span class="token punctuation">.</span>apple</span><span class="token punctuation">;</span>

<span class="token comment">// Spring-API imports</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextAware</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 使用一个具有状态的Command-style类来执行一些处理的类。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Map</span> commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获取适当Command的新实例</span>
		<span class="token class-name">Command</span> command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 在（希望是全新的）Command实例上设置状态</span>
		command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">protected</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 注意Spring API的依赖！</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Command</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>
			<span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法并不理想，因为业务代码意识到并与Spring框架耦合。方法注入（Method Injection）是Spring IoC容器的一种高级特性，可以干净地处理这种用例。</p>`,2),h={href:"https://spring.io/blog/2004/08/06/method-injection/",target:"_blank",rel:"noopener noreferrer"};function b(B,f){const s=o("ExternalLinkIcon");return p(),c("div",null,[l,a("p",null,[n("在大多数应用场景中，容器中的大多数Bean都是"),a("a",u,[n("单例"),e(s)]),n(" 的。 当一个单例Bean需要与另一个单例Bean或非单例Bean协作时，通常通过将一个Bean定义为另一个Bean的属性来处理这种依赖关系。 当Bean的生命周期不同时，问题就出现了。 假设单例Bean A 需要在每次调用其方法时使用非单例"),d,n("（prototype）Bean B。 容器只创建一次单例Bean A，因此只有一次设置属性的机会。容器不能在每次需要Bean B的时候为Bean A提供一个新的实例。")]),a("p",null,[n("一种解决方案是放弃一些控制反转（inversion of control）。 你可以通过实现"),a("a",m,[n("ApplicationContextAware"),e(s)]),n(" 接口使BeanA意识到容器，并通过"),a("a",k,[n("对容器进行"),v,n("调用"),e(s)]),n(" ，每次Bean A需要时请求（new一个新的）Bean B实例。 以下示例展示了这种方法：")]),g,a("blockquote",null,[a("p",null,[n("你可以在"),a("a",h,[n("这篇博客文章"),e(s)]),n("中阅读更多关于方法注入的动机。")])])])}const w=t(r,[["render",b],["__file","factory-method-injection.html.vue"]]),_=JSON.parse('{"path":"/spring-framework/core/dependencies/factory-method-injection.html","title":"方法注入","lang":"zh-CN","frontmatter":{"title":"方法注入","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-03-26T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"方法注入 在大多数应用场景中，容器中的大多数Bean都是单例 的。 当一个单例Bean需要与另一个单例Bean或非单例Bean协作时，通常通过将一个Bean定义为另一个Bean的属性来处理这种依赖关系。 当Bean的生命周期不同时，问题就出现了。 假设单例Bean A 需要在每次调用其方法时使用非单例原型（prototype）Bean B。 容器只创建...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/dependencies/factory-method-injection.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"方法注入"}],["meta",{"property":"og:description","content":"方法注入 在大多数应用场景中，容器中的大多数Bean都是单例 的。 当一个单例Bean需要与另一个单例Bean或非单例Bean协作时，通常通过将一个Bean定义为另一个Bean的属性来处理这种依赖关系。 当Bean的生命周期不同时，问题就出现了。 假设单例Bean A 需要在每次调用其方法时使用非单例原型（prototype）Bean B。 容器只创建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-03T07:13:08.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-03T07:13:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法注入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-03T07:13:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[],"git":{"createdTime":1711526465000,"updatedTime":1712128388000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":3}]},"readingTime":{"minutes":1.59,"words":476},"filePathRelative":"spring-framework/core/dependencies/factory-method-injection.md","localizedDate":"2024年3月26日","excerpt":"\\n<p>在大多数应用场景中，容器中的大多数Bean都是<a href=\\"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">单例</a>\\n的。\\n当一个单例Bean需要与另一个单例Bean或非单例Bean协作时，通常通过将一个Bean定义为另一个Bean的属性来处理这种依赖关系。\\n当Bean的生命周期不同时，问题就出现了。 假设单例Bean A 需要在每次调用其方法时使用非单例<strong>原型</strong>（prototype）Bean B。\\n容器只创建一次单例Bean A，因此只有一次设置属性的机会。容器不能在每次需要Bean B的时候为Bean A提供一个新的实例。</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{w as comp,_ as data};
