import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as o,a,b as s,d as e,w as d,r as l,o as c}from"./app-BhMEyd8t.js";const u={},k={class:"hint-container tip"},m={href:"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/postconstruct-and-predestroy-annotations.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-extension.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-lifecycle-callbacks",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-lifecycle-callbacks",target:"_blank",rel:"noopener noreferrer"},f={class:"hint-container tip"},w={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle-default-init-destroy-methods",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle-initializingbean",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle-disposablebean",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container note"},S={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle-default-init-destroy-methods",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.spring.io/spring-framework/reference/core/beans/beanfactory.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://docs.spring.io/spring-framework/reference/core/aop/using-aspectj.html#aop-aj-ltw",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://docs.spring.io/spring-framework/reference/integration/jmx/notifications.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.spring.io/spring-framework/reference/web/webflux-webclient/client-builder.html#webflux-client-builder-reactor-resources",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.spring.io/spring-framework/reference/web/webmvc.html#mvc",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.spring.io/spring-framework/reference/web/webmvc.html#mvc",target:"_blank",rel:"noopener noreferrer"};function M(R,n){const t=l("ExternalLinkIcon"),p=l("RouteLink");return c(),r("div",null,[n[152]||(n[152]=o('<h1 id="bean生命周期-lifecycle" tabindex="-1"><a class="header-anchor" href="#bean生命周期-lifecycle"><span>Bean生命周期（Lifecycle）</span></a></h1><p>Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类：</p><ul><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83">生命周期回调</a></li><li><a href="#applicationcontextaware%E5%92%8Cbeannameaware">ApplicationContextAware 和 BeanNameAware</a></li><li><a href="#%E5%85%B6%E4%BB%96aware%E6%8E%A5%E5%8F%A3">其他Aware接口</a></li></ul><h2 id="生命周期回调" tabindex="-1"><a class="header-anchor" href="#生命周期回调"><span>生命周期回调</span></a></h2><p>为了与容器管理Bean的生命周期进行交互，你可以实现Spring的<code>InitializingBean</code>和<code>DisposableBean</code>接口。 容器调用前者的<code>afterPropertiesSet()</code>方法以及后者的<code>destroy()</code>方法，让Bean在初始化和销毁时执行特定的操作。</p>',5)),a("div",k,[n[7]||(n[7]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[1]||(n[1]=s("在现代的Spring应用程序中，通常认为JSR-250的")),n[2]||(n[2]=a("code",null,"@PostConstruct",-1)),n[3]||(n[3]=s("和")),n[4]||(n[4]=a("code",null,"@PreDestroy",-1)),n[5]||(n[5]=s("注解是用于接收生命周期回调最佳实践。 使用这些注解意味着你的Bean不会与Spring特定的接口耦合。参阅 ")),a("a",m,[n[0]||(n[0]=s("使用@PostConstruct和@PreDestroy")),e(t)]),n[6]||(n[6]=s("。"))]),n[8]||(n[8]=a("p",null,[s("如果你不想使用JSR-250注解，但仍然希望消除耦合，可以考虑使用"),a("code",null,"init-method"),s("和"),a("code",null,"destroy-method"),s("的Bean定义元数据。")],-1))]),a("p",null,[n[10]||(n[10]=s("Spring框架在内部使用")),n[11]||(n[11]=a("code",null,"BeanPostProcessor",-1)),n[12]||(n[12]=s("实现来处理它找到的任何回调接口，并调用适当的方法。 如果你需要自定义功能或其他Spring默认不提供的生命周期行为，你可以自己实现一个")),n[13]||(n[13]=a("code",null,"BeanPostProcessor",-1)),n[14]||(n[14]=s("。 参阅 ")),a("a",v,[n[9]||(n[9]=s("容器扩展点")),e(t)]),n[15]||(n[15]=s("。"))]),n[153]||(n[153]=o(`<p>除了初始化和销毁回调之外，Spring管理的对象还可以实现<code>Lifecycle</code>接口，以便这些对象可以参与由容器自身生命周期驱动的启动和关闭过程。</p><p>生命周期回调接口在本节中有详细描述。</p><h3 id="初始化回调" tabindex="-1"><a class="header-anchor" href="#初始化回调"><span>初始化回调</span></a></h3><p>实现<code>org.springframework.beans.factory.InitializingBean</code>接口允许Bean在容器设置了所有必要属性之后执行初始化工作。 <code>InitializingBean</code>接口指定了一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5)),a("p",null,[n[17]||(n[17]=s("我们建议不要使用")),n[18]||(n[18]=a("code",null,"InitializingBean",-1)),n[19]||(n[19]=s("接口，因为它会将代码不必要地耦合到Spring。 相反，我们建议使用")),n[20]||(n[20]=a("code",null,"@PostConstruct",-1)),n[21]||(n[21]=s("注解或指定一个POJO初始化方法。 在基于XML的配置中，你可以使用")),n[22]||(n[22]=a("code",null,"init-method",-1)),n[23]||(n[23]=s("属性来指定具有")),n[24]||(n[24]=a("code",null,"void",-1)),n[25]||(n[25]=s("无参数签名的方法的名称。 对于Java配置，你可以使用")),n[26]||(n[26]=a("code",null,"@Bean",-1)),n[27]||(n[27]=s("的")),n[28]||(n[28]=a("code",null,"initMethod",-1)),n[29]||(n[29]=s("属性。 参阅 ")),a("a",g,[n[16]||(n[16]=s("接收生命周期回调")),e(t)]),n[30]||(n[30]=s("。 考虑以下示例："))]),n[154]||(n[154]=o(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 做一些初始化工作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上一个示例与以下示例几乎具有相同的效果：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.AnotherExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 做一些初始化工作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，前面两个示例中的第一个并未将代码与Spring耦合。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>请注意，<code>@PostConstruct</code>和初始化方法一般在容器的单例创建锁内执行。只有在从<code>@PostConstruct</code>方法返回后， Bean实例才被视为完全初始化并准备好发布给其他对象。 这些单独的初始化方法仅用于验证配置状态并可能根据给定的配置准备一些数据结构，但不涉及外部Bean访问相关的进一步活动。 否则，存在初始化死锁的风险。</p><p>对于需要触发昂贵的初始化后活动的场景，例如异步数据库准备步骤，你的Bean应该实现 <code>SmartInitializingSingleton.afterSingletonsInstantiated()</code>方法，或依赖于上下文刷新事件：实现 <code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code>或声明其注解等效的 <code>@EventListener(ContextRefreshedEvent.class)</code>。 这些变体在所有常规单例初始化之后，因此不会在任何单例创建锁内。</p><p>或者，你可以实现<code>(Smart)Lifecycle</code>接口并与容器的整体生命周期管理集成，包括自动启动机制、预销毁停止步骤和潜在的停止/重新启动回调（参见下文）。</p></div><h3 id="销毁回调" tabindex="-1"><a class="header-anchor" href="#销毁回调"><span>销毁回调</span></a></h3><p>实现<code>org.springframework.beans.factory.DisposableBean</code>接口允许Bean在包含它的容器销毁时获得回调。 <code>DisposableBean</code>接口指定了一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10)),a("p",null,[n[32]||(n[32]=s("我们建议不要使用")),n[33]||(n[33]=a("code",null,"DisposableBean",-1)),n[34]||(n[34]=s("回调接口，因为它会将代码不必要地耦合到Spring。 相反，我们建议使用")),n[35]||(n[35]=a("code",null,"@PreDestroy",-1)),n[36]||(n[36]=s("注解或指定一个由Bean定义支持的通用方法。 在基于XML的配置中，你可以在")),n[37]||(n[37]=a("code",null,"<bean/>",-1)),n[38]||(n[38]=s("元素中使用")),n[39]||(n[39]=a("code",null,"destroy-method",-1)),n[40]||(n[40]=s("属性。 在Java配置中，你可以使用")),n[41]||(n[41]=a("code",null,"@Bean",-1)),n[42]||(n[42]=s("的")),n[43]||(n[43]=a("code",null,"destroyMethod",-1)),n[44]||(n[44]=s("属性。 参阅 ")),a("a",b,[n[31]||(n[31]=s("接收生命周期回调")),e(t)]),n[45]||(n[45]=s("。 考虑以下示例："))]),n[155]||(n[155]=o(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cleanup<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做一些销毁工作(比如释放池连接)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上一个示例与以下示例几乎具有相同的效果：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.AnotherExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做一些销毁工作(比如释放池连接)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，前面两个示例中的第一个并未将代码与Spring耦合。</p><p>请注意，Spring还支持推断销毁方法，可以检测到公开的<code>close</code>或<code>shutdown</code>方法。 这是Java配置类中<code>@Bean</code>方法的默认行为，并且自动匹配<code>java.lang.AutoCloseable</code>或<code>java.io.Closeable</code>实现，也不会将销毁逻辑与Spring耦合。</p>`,7)),a("div",f,[n[61]||(n[61]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[n[47]||(n[47]=s("在XML配置中，你可以将")),n[48]||(n[48]=a("code",null,"<bean>",-1)),n[49]||(n[49]=s("元素的")),n[50]||(n[50]=a("code",null,"destroy-method",-1)),n[51]||(n[51]=s("属性设置为一个特殊的(inferred)值。 该值指示Spring自动检测特定Bean类上的public ")),n[52]||(n[52]=a("code",null,"close",-1)),n[53]||(n[53]=s("或")),n[54]||(n[54]=a("code",null,"shutdown",-1)),n[55]||(n[55]=s("方法。 另外，你也可以将这个特殊（inferred）值赋给")),n[56]||(n[56]=a("code",null,"<beans>",-1)),n[57]||(n[57]=s("元素的")),n[58]||(n[58]=a("code",null,"default-destroy-method",-1)),n[59]||(n[59]=s("属性，以将此行为应用于一组Bean定义。 （参阅 ")),a("a",w,[n[46]||(n[46]=s("默认初始化和销毁方法")),e(t)]),n[60]||(n[60]=s("）。"))])]),n[156]||(n[156]=o('<div class="hint-container note"><p class="hint-container-title">注</p><p>要实现扩展的关闭阶段，你可以实现<code>Lifecycle</code>接口，这样可以在调用任何单例Bean的销毁方法之前接收到早期停止信号。 此外，你还可以实现<code>SmartLifecycle</code>接口，用于时间限制的停止步骤，容器将等待所有这类停止处理完成后再继续执行销毁方法。</p></div><h3 id="默认的初始化和销毁方法" tabindex="-1"><a class="header-anchor" href="#默认的初始化和销毁方法"><span>默认的初始化和销毁方法</span></a></h3><p>当你编写初始化和销毁方法时，如果不使用Spring特定<code>InitializingBean</code>和<code>DisposableBean</code>回调接口， 通常会使用<code>init()</code>、<code>initialize()</code>、<code>dispose()</code>等名称的方法。 理想情况下，这些生命周期回调方法的命名应在项目中标准化，以便所有开发人员使用相同的方法名称并确保一致性。</p>',3)),a("p",null,[n[63]||(n[63]=s('在Spring中，你可以配置容器来自动"寻找"每个Bean上具有特定名称的初始化和销毁回调方法。 这意味着作为应用开发者，你可以编写应用类并使用名为')),n[64]||(n[64]=a("code",null,"init()",-1)),n[65]||(n[65]=s("的初始化回调，而无需在每个Bean定义中配置")),n[66]||(n[66]=a("code",null,'init-method="init"',-1)),n[67]||(n[67]=s("属性。 Spring IoC容器会在创建Bean时调用该方法 （并且符合")),a("a",y,[n[62]||(n[62]=s("之前描述")),e(t)]),n[68]||(n[68]=s(" 的标准生命周期回调约定）。这个特性还可以强制执行初始化和销毁方法回调的一致命名约定。"))]),n[157]||(n[157]=o(`<p>假设你的初始化回调方法命名为<code>init()</code>，销毁回调方法命名为<code>destroy()</code>。那么你的类将类似于以下示例中的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBlogService</span> <span class="token keyword">implements</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlogDao</span><span class="token punctuation">(</span><span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">=</span> blogDao<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 这个方法被标记为初始化回调方法</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;必须设置 [blogDao] 属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你可以在一个类似于以下示例的Bean中使用该类：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultBlogService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在顶层<code>&lt;beans/&gt;</code>元素中添加<code>default-init-method</code>属性会导致Spring IoC容器识别Bean类中名为<code>init</code>的方法作为初始化方法的回调。 当创建和组装Bean时，如果Bean类具有这样的方法，它会在适当的时候被调用。</p><p>你可以类似地（在XML中）通过在顶层<code>&lt;beans/&gt;</code>元素上使用<code>default-destroy-method</code>属性来配置销毁方法的回调。</p><p>如果现有的Bean类已经有了与约定不符的回调方法的名称，你可以通过在<code>&lt;bean/&gt;</code>本身上使用<code>init-method</code>和<code>destroy-method</code> 属性（在XML中）来覆盖默认值，指定方法的名称。</p><p>Spring容器保证在为Bean提供所有依赖项之后立即调用配置的初始化回调。 因此，初始化回调在原始Bean引用上被调用，这意味着AOP拦截器等还没有被应用到Bean上。 首先完全创建目标Bean，然后再应用AOP代理（例如）及其拦截器链。 如果目标Bean和代理是分开定义的，你的代码甚至可以与原始目标Bean交互，绕过代理。 因此，将拦截器应用于<code>init</code>方法是不一致的，因为这样做会将目标Bean的生命周期与它的代理或拦截器耦合在一起，当你的代码直接与原始目标Bean交互时，会留下奇怪的语义。</p><h3 id="组合式生命周期机制" tabindex="-1"><a class="header-anchor" href="#组合式生命周期机制"><span>组合式生命周期机制</span></a></h3><p>截至Spring 2.5，你有三种选项来控制bean的生命周期行为：</p>`,10)),a("ul",null,[a("li",null,[a("a",x,[n[69]||(n[69]=s("InitializingBean")),e(t)]),n[71]||(n[71]=s(" 和")),a("a",B,[n[70]||(n[70]=s("DisposableBean")),e(t)]),n[72]||(n[72]=s(" 回调接口"))]),n[73]||(n[73]=a("li",null,[s("自定义"),a("code",null,"init()"),s("和"),a("code",null,"destroy()"),s("方法")],-1)),n[74]||(n[74]=a("li",null,[a("code",null,"@PostConstruct"),s("和"),a("code",null,"@PreDestroy"),s("注解 "),a("ol",null,[a("li",null,"你可以组合这些机制来控制Bean的生命周期行为")])],-1))]),a("div",A,[n[80]||(n[80]=a("p",{class:"hint-container-title"},"注",-1)),a("p",null,[n[76]||(n[76]=s("如果为一个Bean配置了多种生命周期机制，并且每种机制都配置了不同的方法名称，则每个配置的方法按照本说明后面列出的顺序运行。 然而，如果为这些生命周期机制中的一个或多个配置了相同的方法名称，例如使用")),n[77]||(n[77]=a("code",null,"init()",-1)),n[78]||(n[78]=s(" 作为初始化方法的名称，则该方法只会被执行一次，详细说明参考 ")),a("a",S,[n[75]||(n[75]=s("上一节")),e(t)]),n[79]||(n[79]=s("。"))])]),n[158]||(n[158]=o(`<p>为同一个Bean配置了多个生命周期机制，并且使用了不同的初始化方法时，调用顺序如下：</p><ol><li>使用<code>@PostConstruct</code>注解的方法</li><li>实现<code>InitializingBean</code>接口定义的<code>afterPropertiesSet()</code>方法</li><li>自定义配置的<code>init()</code>方法</li></ol><p>销毁方法的调用顺序也类似：</p><ol><li>使用<code>@PreDestroy</code>注解的方法</li><li>实现<code>DisposableBean</code>接口定义的<code>destroy()</code>方法</li><li>自定义配置的<code>destroy()</code>方法</li></ol><h3 id="启动和关闭的回调" tabindex="-1"><a class="header-anchor" href="#启动和关闭的回调"><span>启动和关闭的回调</span></a></h3><p><code>Lifecycle</code>接口定义了任何具有自身生命周期要求的对象的基本方法（例如启动和停止某些后台进程）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>

    <span class="token comment">// 启动方法</span>
	<span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 停止方法</span>
	<span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 是否正在运行</span>
	<span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何由Spring管理的对象都可以实现<code>Lifecycle</code>接口。 然后，当<code>ApplicationContext</code>本身接收到启动和停止信号时（例如，在运行时进行停止/重启场景），它会将这些调用级联到该上下文中定义的所有<code>Lifecycle</code>实现中。 它通过委托给一个<code>LifecycleProcessor</code>来实现这一点，如下所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LifecycleProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>

    <span class="token comment">// 刷新时触发的方法</span>
	<span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 关闭时触发的方法</span>
	<span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>LifecycleProcessor</code>本身就实现了<code>Lifecycle</code>接口。它还添加了另外两个方法，用于在上下文（context）被刷新和关闭时做出反应。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>请注意，常规的<code>org.springframework.context.Lifecycle</code>接口是一个明确的<code>start</code>和<code>stop</code>通知的简单约定，并不意味着在上下文刷新时自动启动。 为了对特定Bean的自动启动进行细粒度控制（包括启动和停止阶段），建议实现扩展的<code>org.springframework.context.SmartLifecycle</code>接口。</p><p>此外，请注意，<code>stop</code>通知不能保证在销毁之前执行。 在正常关闭时，所有<code>Lifecycle</code> Bean首先接收到<code>stop</code>通知，然后才会被传播到一般的销毁回调。 然而，在上下文生命周期中的热刷新或<code>stop</code>刷新时，只会调用销毁方法。</p></div><p>启动和关闭调用的顺序可能非常重要。如果任何两个对象之间存在“依赖(depends-on)”关系，则依赖方会在其依赖项之后启动，并在其依赖项之前停止。 然而，有时候直接的依赖关系是未知的。你可能只知道某种类型的对象应该在另一种类型的对象之前启动。 在这种情况下，<code>SmartLifecycle</code>接口定义了另一种选择，即其父接口<code>Phased</code>上定义的<code>getPhase()</code>方法。以下代码展示了<code>Phased</code>接口的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phased</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 返回一个整数值，表示该对象的启动和停止顺序</span>
    <span class="token keyword">int</span> <span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面列出了<code>SmartLifecycle</code>接口的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SmartLifecycle</span> <span class="token keyword">extends</span> <span class="token class-name">Lifecycle</span><span class="token punctuation">,</span> <span class="token class-name">Phased</span> <span class="token punctuation">{</span>

    <span class="token comment">// 返回一个boolean值，表示该对象是否应该自动启动</span>
	<span class="token keyword">boolean</span> <span class="token function">isAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 通知该对象已请求停止</span>
	<span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动时，<code>phase</code>最低的对象首先启动。停止时，按相反的顺序执行。 因此，实现<code>SmartLifecycle</code>接口并且<code>getPhase()</code>方法返回Integer.MIN_VALUE的对象会是最先启动和最后停止的对象之一。 在另一端，如果阶段值为Integer.MAX_VALUE，则表示该对象应该最后启动并且最先停止（通常是因为它依赖于其他正在运行的进程）。 在考虑<code>phase</code>值时，还要知道任何没有实现<code>SmartLifecycle</code>接口的“正常”<code>Lifecycle</code>对象的默认<code>phase</code>是0。 因此，任何负的<code>phase</code>值表示对象应该在这些标准组件之前启动（并在它们之后停止）。反之，任何正的<code>phase</code>值也是如此。</p><p><code>SmartLifecycle</code>定义的<code>stop</code>方法接受一个回调。 任何实现都必须在该实现的关闭过程完成后调用该回调的<code>run()</code>方法。 这使得在必要时可以实现异步关机，因为<code>LifecycleProcessor</code>接口的默认实现<code>DefaultLifecycleProcessor</code>会等待每个阶段内的对象组调用该回调，直到其超时值。 每个阶段的默认超时时间是30秒。你可以通过在上下文中定义一个名为<code>lifecycleProcessor</code>的Bean来覆盖默认的生命周期处理器实例。 如果你只想修改超时时间，定义以下内容就足够了：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lifecycleProcessor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.context.support.DefaultLifecycleProcessor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 超时值，单位为毫秒 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeoutPerShutdownPhase<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，<code>LifecycleProcessor</code>接口还定义了用于刷新和关闭上下文（context ）的回调方法。 后者驱动关闭过程，就像显式调用了<code>stop()</code>方法一样，但它发生在上下文关闭时。 另一方面，“<code>refresh</code>”回调实现了<code>SmartLifecycle</code> Bean的另一个特性。 当上下文被刷新（在所有对象都被实例化和初始化之后）时，该回调被调用。 此时，默认的生命周期处理器会检查每个<code>SmartLifecycle</code>对象的<code>isAutoStartup()</code>方法返回的布尔值。 如果为true，该对象将在此时启动，而不是等待上下文或自身<code>start()</code>方法的显式调用（与上下文刷新不同，上下文的启动不会自动发生在标准的上下文实现中）。 如前所述，<code>phase</code>值和任何&quot;依赖&quot;关系决定了启动的顺序。</p><h3 id="在非web应用中优雅地关闭spring-ioc容器" tabindex="-1"><a class="header-anchor" href="#在非web应用中优雅地关闭spring-ioc容器"><span>在非Web应用中优雅地关闭Spring IoC容器</span></a></h3><div class="hint-container note"><p class="hint-container-title">注</p><p>本节仅适用于非Web应用。Spring的基于Web的<code>ApplicationContext</code>实现已经有代码可以在相关Web应用关闭时优雅地关闭Spring IoC容器。</p></div><p>如果你在非Web应用程序环境中（例如，在客户端桌面环境中）使用Spring的IoC容器，请向JVM注册一个关闭钩子（shutdown hook）。 这样做可以确保优雅地关闭，并调用你的单例Bean上的相关销毁<code>destroy</code>方法，以释放所有资源。你仍然必须正确配置和实现这些销毁<code>destroy</code>回调。</p><p>要注册一个关闭钩子（shutdown hook），调用<code>ConfigurableApplicationContext</code>接口上声明的<code>registerShutdownHook</code>()方法，如下例所示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Boot</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token comment">// 加载Spring配置文件并创建应用上下文</span>
		<span class="token class-name">ConfigurableApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;beans.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 为上述上下文添加一个关闭钩子...</span>
		ctx<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 应用程序在此处运行...</span>

		<span class="token comment">// main方法退出前，钩子在应用关闭之前被调用...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程安全性和可见性" tabindex="-1"><a class="header-anchor" href="#线程安全性和可见性"><span>线程安全性和可见性</span></a></h3><p>Spring核心容器以线程安全的方式发布创建的单例实例，通过一个单例锁来保护访问，并确保在其他线程中的可见性。</p><p>因此，由应用程序提供的Bean类不必担心其初始化状态的可见性。 只要常规配置字段仅在初始化阶段被修改，它们就不需要被标记为<code>volatile</code>，从而提供了类似于<code>final</code>的可见性保证， 即使是对于在初始阶段可变的基于setter的配置状态也是如此。 如果这些字段在Bean创建阶段之后及其随后的初始发布之后被更改，则需要将它们声明为<code>volatile</code>或在访问时受到公共锁的保护。</p><p>请注意，在从容器方面进行安全初始发布后，对单例Bean实例中的这种配置状态进行并发访问 （例如控制器实例或存储库实例） 是完全线程安全的。这还包括通用的单例<code>FactoryBean</code>实例，这些实例也在通用单例锁中进行处理。</p><p>对于销毁回调，配置状态仍然是线程安全的，但在初始化和销毁之间累积的任何运行时状态应该保存在线程安全的结构中 （或者对于简单情况，保存在<code>volatile</code>字段中），根据常见的Java指导方针。</p><p>如上所示，更深入的生命周期集成涉及到运行时可变状态，例如一个可运行字段，这个字段将需要声明为<code>volatile</code>。 虽然常见的生命周期回调遵循一定的顺序，例如，启动回调只会在完全初始化之后发生，而停止回调只会在初始启动之后发生， 但与常见的停止前销毁安排有一个特殊情况：强烈建议在任何这样的Bean中内部状态也允许在没有先前停止的情况下立即进行销毁回调， 因为这可能会在取消引导时或在由另一个bean引起的停止超时的情况下发生非常规关闭时发生。</p><h2 id="applicationcontextaware" tabindex="-1"><a class="header-anchor" href="#applicationcontextaware"><span>ApplicationContextAware</span></a></h2><p>当一个类实现了<code>org.springframework.context.ApplicationContextAware</code>接口时， 该类的实例会得到对应的<code>ApplicationContext</code>实例的引用。</p><p>以下是<code>ApplicationContextAware</code>接口的定义示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

	<span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34)),a("p",null,[n[82]||(n[82]=s("这意味着，当一个Bean实现了")),n[83]||(n[83]=a("code",null,"ApplicationContextAware",-1)),n[84]||(n[84]=s("接口或 引用了该接口的已知子类（如")),n[85]||(n[85]=a("code",null,"ConfigurableApplicationContext",-1)),n[86]||(n[86]=s("）， 它就可以通过")),n[87]||(n[87]=a("code",null,"ApplicationContext",-1)),n[88]||(n[88]=s("接口来访问Spring容器的各种功能， 比如访问其他Bean、获取文件资源、发布事件，以及访问")),n[89]||(n[89]=a("code",null,"MessageSource",-1)),n[90]||(n[90]=s("的功能。 这些额外功能在")),a("a",C,[n[81]||(n[81]=s("ApplicationContext的附加功能")),e(t)]),n[91]||(n[91]=s(" 中描述。 不过，通常情况下不推荐过度使用这种方式，因为它会将代码与Spring框架耦合在一起，不符合控制反转的原则。"))]),a("p",null,[n[93]||(n[93]=s("另一种获得对")),n[94]||(n[94]=a("code",null,"ApplicationContext",-1)),n[95]||(n[95]=s("引用的方式是通过自动装配（Autowiring）。 你可以使用")),n[96]||(n[96]=a("code",null,"@Autowired",-1)),n[97]||(n[97]=s("注解来自动装配 ApplicationContext，这样就可以在需要时轻松访问Spring容器的功能。 详细信息可以查阅使用")),a("a",j,[n[92]||(n[92]=s("使用@Autowired")),e(t)]),n[98]||(n[98]=s("。"))]),n[159]||(n[159]=o(`<h2 id="beannameaware" tabindex="-1"><a class="header-anchor" href="#beannameaware"><span>BeanNameAware</span></a></h2><p>当一个类实现了<code>org.springframework.beans.factory.BeanNameAware</code>接口时， 这个类的实例会得到对应的Bean名称的引用。</p><p>以下是<code>BeanNameAware</code>接口的定义示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">{</span>

	<span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调方法会在Bean的属性填充后 &amp; 初始化回调之前（如<code>InitializingBean.afterPropertiesSet</code>() 或 自定义<code>init</code>方法）被调用。 通过实现<code>BeanNameAware</code>接口，Bean可以在需要时获取自己在Spring容器中的名称，这在某些场景下可能会很有用。</p><h2 id="其他aware接口" tabindex="-1"><a class="header-anchor" href="#其他aware接口"><span>其他Aware接口</span></a></h2><p>除了之前讨论的<code>ApplicationContextAware</code>和<code>BeanNameAware</code>，Spring还提供了一系列广泛的<code>Aware</code>回调接口， 让Bean向容器表明它们需要某种基础设施的依赖性。通常，接口名称反映了依赖的类型。以下表格总结了最重要的<code>Aware</code>接口：</p>`,7)),a("table",null,[n[151]||(n[151]=a("thead",null,[a("tr",null,[a("th",null,"Aware 接口"),a("th",null,"注入的依赖"),a("th",null,"解释")])],-1)),a("tbody",null,[n[149]||(n[149]=a("tr",null,[a("td",null,[a("code",null,"ApplicationContextAware")]),a("td",null,[a("code",null,"ApplicationContext")]),a("td",null,[s("获取对Spring容器的引用，参阅 "),a("a",{href:"#applicationcontextaware"},"ApplicationContext")])],-1)),a("tr",null,[n[103]||(n[103]=a("td",null,[a("code",null,"ApplicationEventPublisherAware")],-1)),n[104]||(n[104]=a("td",null,[a("code",null,"ApplicationEventPublisher")],-1)),a("td",null,[n[100]||(n[100]=s("获取对")),n[101]||(n[101]=a("code",null,"ApplicationEventPublisher",-1)),n[102]||(n[102]=s("的引用，用于发布事件，参阅")),a("a",q,[n[99]||(n[99]=s("ApplicationContext的附加功能")),e(t)])])]),a("tr",null,[n[107]||(n[107]=a("td",null,[a("code",null,"BeanClassLoaderAware")],-1)),n[108]||(n[108]=a("td",null,[a("code",null,"ClassLoader")],-1)),a("td",null,[n[106]||(n[106]=s("获取加载Bean类的类加载器，参阅")),e(p,{to:"/spring-framework/core/beans-definition.html#%E5%AE%9E%E4%BE%8B%E5%8C%96bean"},{default:d(()=>n[105]||(n[105]=[s("实例化Bean")])),_:1})])]),a("tr",null,[n[111]||(n[111]=a("td",null,[a("code",null,"BeanFactoryAware")],-1)),n[112]||(n[112]=a("td",null,[a("code",null,"BeanFactory")],-1)),a("td",null,[n[110]||(n[110]=s("获取对BeanFactory的引用，参阅")),a("a",L,[n[109]||(n[109]=s("BeanFactory API")),e(t)])])]),n[150]||(n[150]=a("tr",null,[a("td",null,[a("code",null,"BeanNameAware")]),a("td",null,[a("code",null,"String")]),a("td",null,[s("获取Bean的名称，参阅 "),a("a",{href:"#beannameaware"},"BeanNameAware")])],-1)),a("tr",null,[n[117]||(n[117]=a("td",null,[a("code",null,"LoadTimeWeaverAware")],-1)),n[118]||(n[118]=a("td",null,[a("code",null,"LoadTimeWeaver")],-1)),a("td",null,[n[114]||(n[114]=s("获取对")),n[115]||(n[115]=a("code",null,"LoadTimeWeaver",-1)),n[116]||(n[116]=s("的引用，用于加载时织入，参阅 ")),a("a",E,[n[113]||(n[113]=s("AspectJ加载时编织")),e(t)])])]),a("tr",null,[n[123]||(n[123]=a("td",null,[a("code",null,"MessageSourceAware")],-1)),n[124]||(n[124]=a("td",null,[a("code",null,"MessageSource")],-1)),a("td",null,[n[120]||(n[120]=s("获取对")),n[121]||(n[121]=a("code",null,"MessageSource",-1)),n[122]||(n[122]=s("的引用，用于访问消息资源，参阅")),a("a",P,[n[119]||(n[119]=s("ApplicationContext的附加功能")),e(t)])])]),a("tr",null,[n[129]||(n[129]=a("td",null,[a("code",null,"NotificationPublisherAware")],-1)),n[130]||(n[130]=a("td",null,[a("code",null,"NotificationPublisher")],-1)),a("td",null,[n[126]||(n[126]=s("获取对")),n[127]||(n[127]=a("code",null,"NotificationPublisher",-1)),n[128]||(n[128]=s("的引用，用于发布通知，参阅")),a("a",D,[n[125]||(n[125]=s("Notifications")),e(t)])])]),a("tr",null,[n[135]||(n[135]=a("td",null,[a("code",null,"ResourceLoaderAware")],-1)),n[136]||(n[136]=a("td",null,[a("code",null,"ResourceLoader")],-1)),a("td",null,[n[132]||(n[132]=s("获取对")),n[133]||(n[133]=a("code",null,"ResourceLoader",-1)),n[134]||(n[134]=s("的引用，用于访问资源，参阅")),a("a",I,[n[131]||(n[131]=s("Resources")),e(t)])])]),a("tr",null,[n[141]||(n[141]=a("td",null,[a("code",null,"ServletConfigAware")],-1)),n[142]||(n[142]=a("td",null,[a("code",null,"ServletConfig")],-1)),a("td",null,[n[138]||(n[138]=s("获取对")),n[139]||(n[139]=a("code",null,"ServletConfig",-1)),n[140]||(n[140]=s("的引用，参阅")),a("a",N,[n[137]||(n[137]=s("Spring MVC")),e(t)])])]),a("tr",null,[n[147]||(n[147]=a("td",null,[a("code",null,"ServletContextAware")],-1)),n[148]||(n[148]=a("td",null,[a("code",null,"ServletContext")],-1)),a("td",null,[n[144]||(n[144]=s("获取对")),n[145]||(n[145]=a("code",null,"ServletContext",-1)),n[146]||(n[146]=s("的引用，参阅")),a("a",z,[n[143]||(n[143]=s("Spring MVC")),e(t)])])])])]),n[160]||(n[160]=a("p",null,"请注意，使用这些接口会将你的代码与Spring API紧密耦合，并且不符合控制反转的风格。因此，我们建议将它们用于需要以编程方式访问容器的基础设施Bean。",-1))])}const J=i(u,[["render",M],["__file","beans-lifecycle.html.vue"]]),V=JSON.parse('{"path":"/md/spring-framework/core/beans-lifecycle.html","title":"Bean生命周期（Lifecycle）","lang":"zh-CN","frontmatter":{"title":"Bean生命周期（Lifecycle）","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-04-08T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"Bean生命周期（Lifecycle） Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类： 生命周期回调 ApplicationContextAware 和 BeanNameAware 其他Aware接口 生命周期回调 为了与容器管理Bean的生命周期进行交互，你可以实现Spring的Initializin...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/spring-framework/core/beans-lifecycle.html"}],["meta",{"property":"og:title","content":"Bean生命周期（Lifecycle）"}],["meta",{"property":"og:description","content":"Bean生命周期（Lifecycle） Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类： 生命周期回调 ApplicationContextAware 和 BeanNameAware 其他Aware接口 生命周期回调 为了与容器管理Bean的生命周期进行交互，你可以实现Spring的Initializin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T17:14:35.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-04-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T17:14:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bean生命周期（Lifecycle）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T17:14:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"生命周期回调","slug":"生命周期回调","link":"#生命周期回调","children":[{"level":3,"title":"初始化回调","slug":"初始化回调","link":"#初始化回调","children":[]},{"level":3,"title":"销毁回调","slug":"销毁回调","link":"#销毁回调","children":[]},{"level":3,"title":"默认的初始化和销毁方法","slug":"默认的初始化和销毁方法","link":"#默认的初始化和销毁方法","children":[]},{"level":3,"title":"组合式生命周期机制","slug":"组合式生命周期机制","link":"#组合式生命周期机制","children":[]},{"level":3,"title":"启动和关闭的回调","slug":"启动和关闭的回调","link":"#启动和关闭的回调","children":[]},{"level":3,"title":"在非Web应用中优雅地关闭Spring IoC容器","slug":"在非web应用中优雅地关闭spring-ioc容器","link":"#在非web应用中优雅地关闭spring-ioc容器","children":[]},{"level":3,"title":"线程安全性和可见性","slug":"线程安全性和可见性","link":"#线程安全性和可见性","children":[]}]},{"level":2,"title":"ApplicationContextAware","slug":"applicationcontextaware","link":"#applicationcontextaware","children":[]},{"level":2,"title":"BeanNameAware","slug":"beannameaware","link":"#beannameaware","children":[]},{"level":2,"title":"其他Aware接口","slug":"其他aware接口","link":"#其他aware接口","children":[]}],"git":{"createdTime":1719508475000,"updatedTime":1719508475000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":17.91,"words":5374},"filePathRelative":"md/spring-framework/core/beans-lifecycle.md","localizedDate":"2024年4月8日","excerpt":"\\n<p>Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类：</p>\\n<ul>\\n<li><a href=\\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83\\">生命周期回调</a></li>\\n<li><a href=\\"#applicationcontextaware%E5%92%8Cbeannameaware\\">ApplicationContextAware 和 BeanNameAware</a></li>\\n<li><a href=\\"#%E5%85%B6%E4%BB%96aware%E6%8E%A5%E5%8F%A3\\">其他Aware接口</a></li>\\n</ul>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{J as comp,V as data};
