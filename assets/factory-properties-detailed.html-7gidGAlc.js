import{_ as p,r as o,o as c,c as l,a as n,b as a,d as t,e}from"./app-B-kWLmi5.js";const u={},i=e('<h1 id="依赖和配置详解" tabindex="-1"><a class="header-anchor" href="#依赖和配置详解"><span>依赖和配置详解</span></a></h1><p>正如前一节所述，您可以将<code>Bean</code>属性和构造函数参数定义为对其它<mark>托管Bean（协作者）的引用</mark>或<mark>内联定义的值</mark>。 Spring基于XML的配置元数据支持<code>&lt;property/&gt;</code>和<code>&lt;constructor-arg/&gt;</code>元素内的子元素类型，以达到这个目的。</p><h2 id="字面值-基本类型、-string-等" tabindex="-1"><a class="header-anchor" href="#字面值-基本类型、-string-等"><span>字面值 (基本类型、 String 等)</span></a></h2>',3),r=n("code",null,"<property/>",-1),d=n("code",null,"value",-1),k={href:"https://docs.spring.io/spring-framework/reference/core/validation/convert.html#core-convert-ConversionService-API",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 调用 setDriverClassName(String) 方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClassName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>misterkaoli<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例使用了<a href="#%E4%BD%BF%E7%94%A8p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84xml%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F">p命名空间</a>，使得 XML 配置更加简洁：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/p<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>misterkaoli<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g={href:"https://www.jetbrains.com/idea/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://spring.io/tools",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>你也可以配置一个<code>java.util.Properties</code>实例，示例如下：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappings<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.context.support.PropertySourcesPlaceholderConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 作为 java.util.Properties 类型 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>
            jdbc.driver.className=com.mysql.jdbc.Driver
            jdbc.url=jdbc:mysql://localhost:3306/mydb
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring容器会利用JavaBeans的<code>PropertyEditor</code>机制，将<code>&lt;value/&gt;</code>元素内的文本转换为<code>java.util.Properties</code>实例。 这是一个很好的快捷方式，Spring团队中在一些场景中更倾向于使用嵌套的<code>&lt;value/&gt;</code>元素而不是<code>value</code>属性的方式。</p><h3 id="idref元素" tabindex="-1"><a class="header-anchor" href="#idref元素"><span>idref元素</span></a></h3><p><code>idref</code>元素仅仅是将容器中另一个<code>Bean</code>的id（一个字符串值，而不是引用） 传递给<code>&lt;constructor-arg/&gt;</code>或<code>&lt;property/&gt;</code>元素的一种防错方式。下面的例子展示了如何使用它。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theClientBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>targetName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 Bean 定义片段（在运行时）与以下代码片段完全等价：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>client<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>targetName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>theTargetBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种形式比第二种形式好，使用<code>idref</code>标签可以在部署时验证引用的<code>Bean</code>是否存在， 避免在第二种情况下，当实例化时才发现拼写错误或不存在的引用（并且可能导致致命的结果）。这提高了配置文件的可靠性和易读性。</p><blockquote><p>4.0 版Bean XSD中，不再支持<code>idref</code>元素上的<code>local</code>属性，因为它与常规的Bean引用没有区别。 在升级到4.0模式时，将你现有的<code>idref</code>局部引用改为<code>idref bean</code>。</p></blockquote>`,10),q=n("code",null,"<idref/>",-1),h=n("code",null,"ProxyFactory",-1),x={href:"https://docs.spring.io/spring-framework/reference/core/aop-api/pfb.html#aop-pfb-1",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"<idref/>",-1),B=e(`<h2 id="对其他bean的引用-协作者" tabindex="-1"><a class="header-anchor" href="#对其他bean的引用-协作者"><span>对其他Bean的引用（协作者）</span></a></h2><p><strong><code>ref</code>元素使用<code>bean</code>属性引用其他Bean</strong></p><p><code>ref</code>元素作为<code>&lt;constructor-arg/&gt;</code>或<code>&lt;property/&gt;</code>定义元素的子元素，可以将一个Bean的属性值设置为容器管理的另一个Bean（协作者）的引用。 这个被引用的Bean是依赖项，它将在属性设置之前被初始化。（如果这个协作者Bean是单例的，可能被容器进行预先初始化） 作用域（scope）和验证取决于你是否通过<code>bean</code>或<code>parent</code>属性指定了其他对象的ID或名称。</p><p>最常见的使用方式是通过<code>&lt;ref/&gt;</code>标签的<code>bean</code>属性来指定目标Bean。 这样做可以创建对同一容器或父容器中任何<code>Bean</code>的引用，无论它们是否定义在同一个XML文件中。 使用<code>bean</code>属性时，你可以指定目标Bean的<code>id</code>或<code>name</code>属性中的一个值。</p><p>以下是一个使用<code>&lt;ref/&gt;</code>元素的例子：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><code>ref</code>元素使用<code>parent</code>属性引用父容器中的Bean</strong></p><p>通过<code>parent</code>属性，可以创建对当前容器的父容器中的Bean的引用。 <code>parent</code>属性的值可以与目标<code>Bean</code>的<code>id</code>属性或<code>name</code>属性中的一个值相同。 目标<code>Bean</code>必须在当前容器的父容器中。 这种方式特别适用于当你有一个容器层次结构，并且希望在子容器中引用父容器中的 Bean 时，且代理具有与父 Bean 具有相同名称的 Bean。</p><p>以下是如何使用<code>parent</code>属性的示例：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 在父容器中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.SimpleAccountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 根据需要在此处插入依赖项 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 在子容器（后代）上下文中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">&lt;!--</span> <span class="token attr-name">bean名称与父bean相同</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
    class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 注意我们是如何引用父bean的 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 插入其他配置和依赖项 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>4.0 版Bean XSD中，<code>ref</code>元素上的<code>local</code>属性不在支持，因为它与常规的Bean引用没有区别。 在升级到4.0模式时，将你现有的<code>ref</code>局部引用改为<code>idref bean</code>。</p></blockquote><h2 id="内部-bean" tabindex="-1"><a class="header-anchor" href="#内部-bean"><span>内部 Bean</span></a></h2><p>在<code>&lt;property/&gt;</code>或<code>&lt;constructor-arg/&gt;</code>元素内部使用<code>&lt;bean/&gt;</code>元素定义了一个内部Bean，如下例所示。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 不使用对目标 Bean 的引用，而是直接内联定义目标 Bean --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.Person<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 这是内部 Bean --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Fiona Apple<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>25<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部Bean定义不需要指定ID或名称。如果指定了，容器不会将它们作标识符。 容器在创建时也会忽略作用域（scope）标志，因为内部Bean总是匿名的，并且始终与外部Bean一起创建。 无法独立地访问内部Bean，也无法将其注入到除封闭Bean之外的其他协作Bean中。</p><p>作为一个特例，可以从自定义作用域（scope）中接收销毁回调，例如，对于包含在单例Bean中的请求作用域（scope）的内层Bean。 内层Bean实例的创建与其包含的Bean相关联，但是销毁回调允许它参与到请求作用域（scope）的生命周期中。 这并不是一种常见的情况。内层Bean通常只是简单地共享其包含Bean的作用域（scope）。</p><h2 id="集合-collection" tabindex="-1"><a class="header-anchor" href="#集合-collection"><span>集合（Collection）</span></a></h2><h2 id="null和空字符串值" tabindex="-1"><a class="header-anchor" href="#null和空字符串值"><span>Null和空字符串值</span></a></h2><h2 id="使用p命名空间的xml快捷方式" tabindex="-1"><a class="header-anchor" href="#使用p命名空间的xml快捷方式"><span>使用p命名空间的XML快捷方式</span></a></h2><h2 id="使用c命名空间的xml快捷方式" tabindex="-1"><a class="header-anchor" href="#使用c命名空间的xml快捷方式"><span>使用c命名空间的XML快捷方式</span></a></h2><h2 id="复合属性名" tabindex="-1"><a class="header-anchor" href="#复合属性名"><span>复合属性名</span></a></h2>`,22);function y(_,w){const s=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[r,a("元素的"),d,a("属性指定了一个属性或构造函数参数的可读字符串表示。 Spring使用 "),n("a",k,[a("转换服务"),t(s)]),a(" 来将这些值从字符串转换为属性或参数的实际类型。以下示例展示了设置各种值的方式：")]),m,n("p",null,[a("前面的 XML 更加简洁。但是，拼写错误是在运行时而不是设计时被发现。 除非你使用支持在创建 Bean 定义时进行自动属性完成的集成开发环境（例如"),n("a",g,[a("IntelliJ IDEA"),t(s)]),a(" 或"),n("a",v,[a("Spring Tools for Eclipse"),t(s)]),a("），强烈建议使用这类 IDE 的帮助。")]),b,n("p",null,[q,a("元素带来价值的一个常见地方（至少在早于Spring 2.0的版本中）是在"),h,a(" Bean 定义中配置 "),n("a",x,[a("AOP interceptor（拦截器）"),t(s)]),a(" 。当你指定拦截器名称时，使用"),f,a("元素可以防止你把拦截器的ID拼错。")]),B])}const D=p(u,[["render",y],["__file","factory-properties-detailed.html.vue"]]),E=JSON.parse('{"path":"/spring-framework/core/dependencies/factory-properties-detailed.html","title":"依赖和配置详解","lang":"zh-CN","frontmatter":{"title":"依赖和配置详解","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-03-26T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"依赖和配置详解 正如前一节所述，您可以将Bean属性和构造函数参数定义为对其它托管Bean（协作者）的引用或内联定义的值。 Spring基于XML的配置元数据支持<property/>和<constructor-arg/>元素内的子元素类型，以达到这个目的。 字面值 (基本类型、 String 等) <property/>元素的value属性指定了一个...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/dependencies/factory-properties-detailed.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"依赖和配置详解"}],["meta",{"property":"og:description","content":"依赖和配置详解 正如前一节所述，您可以将Bean属性和构造函数参数定义为对其它托管Bean（协作者）的引用或内联定义的值。 Spring基于XML的配置元数据支持<property/>和<constructor-arg/>元素内的子元素类型，以达到这个目的。 字面值 (基本类型、 String 等) <property/>元素的value属性指定了一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-31T04:52:04.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-31T04:52:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖和配置详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-31T04:52:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"字面值 (基本类型、 String 等)","slug":"字面值-基本类型、-string-等","link":"#字面值-基本类型、-string-等","children":[{"level":3,"title":"idref元素","slug":"idref元素","link":"#idref元素","children":[]}]},{"level":2,"title":"对其他Bean的引用（协作者）","slug":"对其他bean的引用-协作者","link":"#对其他bean的引用-协作者","children":[]},{"level":2,"title":"内部 Bean","slug":"内部-bean","link":"#内部-bean","children":[]},{"level":2,"title":"集合（Collection）","slug":"集合-collection","link":"#集合-collection","children":[]},{"level":2,"title":"Null和空字符串值","slug":"null和空字符串值","link":"#null和空字符串值","children":[]},{"level":2,"title":"使用p命名空间的XML快捷方式","slug":"使用p命名空间的xml快捷方式","link":"#使用p命名空间的xml快捷方式","children":[]},{"level":2,"title":"使用c命名空间的XML快捷方式","slug":"使用c命名空间的xml快捷方式","link":"#使用c命名空间的xml快捷方式","children":[]},{"level":2,"title":"复合属性名","slug":"复合属性名","link":"#复合属性名","children":[]}],"git":{"createdTime":1711526465000,"updatedTime":1711860724000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":5}]},"readingTime":{"minutes":5.75,"words":1724},"filePathRelative":"spring-framework/core/dependencies/factory-properties-detailed.md","localizedDate":"2024年3月26日","excerpt":"\\n<p>正如前一节所述，您可以将<code>Bean</code>属性和构造函数参数定义为对其它<mark>托管Bean（协作者）的引用</mark>或<mark>内联定义的值</mark>。\\nSpring基于XML的配置元数据支持<code>&lt;property/&gt;</code>和<code>&lt;constructor-arg/&gt;</code>元素内的子元素类型，以达到这个目的。</p>\\n<h2>字面值 (基本类型、 String 等)</h2>\\n<p><code>&lt;property/&gt;</code>元素的<code>value</code>属性指定了一个属性或构造函数参数的可读字符串表示。\\nSpring使用 <a href=\\"https://docs.spring.io/spring-framework/reference/core/validation/convert.html#core-convert-ConversionService-API\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">转换服务</a>\\n来将这些值从字符串转换为属性或参数的实际类型。以下示例展示了设置各种值的方式：</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{D as comp,E as data};
