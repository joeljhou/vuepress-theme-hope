import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as s,b as a,d as t,e as i,o as l,r as c}from"./app-DVRWpGtU.js";const r={},u={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-aware",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.spring.io/spring-framework/reference/core/beans/basics.html#beans-factory-client",target:"_blank",rel:"noopener noreferrer"},k={href:"https://spring.io/blog/2004/08/06/method-injection/",target:"_blank",rel:"noopener noreferrer"};function v(g,n){const e=c("ExternalLinkIcon");return l(),p("div",null,[n[15]||(n[15]=s("h1",{id:"方法注入",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#方法注入"},[s("span",null,"方法注入")])],-1)),s("p",null,[n[1]||(n[1]=a("大多数应用场景中，容器中的大多数Bean都是")),s("a",u,[n[0]||(n[0]=a("单例（singleton）")),t(e)]),n[2]||(n[2]=a(" 的。 当一个单例（singleton）Bean需要与原型（prototype）Bean协作时，传统的注入方式可能不再适用。 这是因为单例Bean在整个应用生命周期内只创建一次，而原型Bean每次请求时都会创建一个新的实例。"))]),s("p",null,[n[5]||(n[5]=a("一种解决方案是放弃一些控制反转（inversion of control）。 通过实现")),s("a",d,[n[3]||(n[3]=a("ApplicationContextAware")),t(e)]),n[6]||(n[6]=a(" 接口使Bean A意识到Spring IoC容器 ，并 ")),s("a",m,[n[4]||(n[4]=a("使用容器")),t(e)]),n[7]||(n[7]=a(" 进行")),n[8]||(n[8]=s("code",null,'getBean("B")',-1)),n[9]||(n[9]=a("调用，每次Bean A需要时请求（新建")),n[10]||(n[10]=s("code",null,"new",-1)),n[11]||(n[11]=a("）Bean B实例。 以下示例展示了这种方法："))]),n[16]||(n[16]=i(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">fiona<span class="token punctuation">.</span>apple</span><span class="token punctuation">;</span>

<span class="token comment">// 导入 Spring 框架相关类</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextAware</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 使用一个有状态的 Command-style 类来执行一些处理的类。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandManager</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Map</span> commandState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token comment">// 获取一个适当的 Command 的新实例</span>
		<span class="token class-name">Command</span> command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 设置 Command 的状态</span>
		command<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>commandState<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">protected</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 注意 Spring API 的依赖！</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Command</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>
			<span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法并不理想，因为业务代码意识到并与Spring框架耦合。 方法注入（Method Injection）是Spring IoC容器的一种高级特性，可以干净地处理这种用例。</p>`,2)),s("blockquote",null,[s("p",null,[n[13]||(n[13]=a("你可以在")),s("a",k,[n[12]||(n[12]=a("这篇博客文章")),t(e)]),n[14]||(n[14]=a("中阅读更多关于方法注入的动机。"))])]),n[17]||(n[17]=s("h2",{id:"查找方法依赖注入",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#查找方法依赖注入"},[s("span",null,"查找方法依赖注入")])],-1)),n[18]||(n[18]=s("h2",{id:"任意方法替换",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#任意方法替换"},[s("span",null,"任意方法替换")])],-1))])}const y=o(r,[["render",v],["__file","factory-method-injection.html.vue"]]),w=JSON.parse('{"path":"/md/spring-framework/core/dependencies/factory-method-injection.html","title":"方法注入","lang":"zh-CN","frontmatter":{"title":"方法注入","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-03-26T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"方法注入 大多数应用场景中，容器中的大多数Bean都是单例（singleton） 的。 当一个单例（singleton）Bean需要与原型（prototype）Bean协作时，传统的注入方式可能不再适用。 这是因为单例Bean在整个应用生命周期内只创建一次，而原型Bean每次请求时都会创建一个新的实例。 一种解决方案是放弃一些控制反转（inversio...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/spring-framework/core/dependencies/factory-method-injection.html"}],["meta",{"property":"og:title","content":"方法注入"}],["meta",{"property":"og:description","content":"方法注入 大多数应用场景中，容器中的大多数Bean都是单例（singleton） 的。 当一个单例（singleton）Bean需要与原型（prototype）Bean协作时，传统的注入方式可能不再适用。 这是因为单例Bean在整个应用生命周期内只创建一次，而原型Bean每次请求时都会创建一个新的实例。 一种解决方案是放弃一些控制反转（inversio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T17:14:35.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T17:14:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法注入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T17:14:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"查找方法依赖注入","slug":"查找方法依赖注入","link":"#查找方法依赖注入","children":[]},{"level":2,"title":"任意方法替换","slug":"任意方法替换","link":"#任意方法替换","children":[]}],"git":{"createdTime":1719508475000,"updatedTime":1719508475000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":1}]},"readingTime":{"minutes":1.38,"words":414},"filePathRelative":"md/spring-framework/core/dependencies/factory-method-injection.md","localizedDate":"2024年3月26日","excerpt":"\\n<p>大多数应用场景中，容器中的大多数Bean都是<a href=\\"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">单例（singleton）</a>\\n的。\\n当一个单例（singleton）Bean需要与原型（prototype）Bean协作时，传统的注入方式可能不再适用。\\n这是因为单例Bean在整个应用生命周期内只创建一次，而原型Bean每次请求时都会创建一个新的实例。</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{y as comp,w as data};
