import{_ as o,r as p,o as r,c,a as e,b as n,d as a,e as s}from"./app-DSJxdZSS.js";const i={},l=e("h1",{id:"bean作用域-scope",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bean作用域-scope"},[e("span",null,"Bean作用域（Scope）")])],-1),u=e("p",null,"当你创建一个Bean定义时，实际上是在创建Bean定义所定义类的实际实例的配方。 将Bean定义视为“配方”的概念非常重要，因为它意味着，就像一个类一样，你可以从一个单一的“配方”中创建多个对象实例。",-1),d=e("code",null,"ApplicationContext",-1),g={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-custom",target:"_blank",rel:"noopener noreferrer"},h=s("<table><thead><tr><th>Bean作用域（Scope）</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>(默认) 在整个应用程序中只创建一个Bean实例</td></tr><tr><td>prototype</td><td>每次请求时，创建一个新的Bean实例</td></tr><tr><td>request</td><td>Web程序中，为每个HTTP请求创建一个Bean实例</td></tr><tr><td>session</td><td>Web程序中，为每个HTTP会话创建一个Bean实例</td></tr><tr><td>application</td><td>Web程序中，为每个<code>ServletContext</code>创建一个Bean实例</td></tr><tr><td>websocket</td><td>Web程序中，为每个<code>WebSocket</code>连接创建一个Bean实例</td></tr></tbody></table>",1),m={href:"https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/SimpleThreadScope.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-custom-using",target:"_blank",rel:"noopener noreferrer"},b=s(`<h2 id="单例作用域-singleton" tabindex="-1"><a class="header-anchor" href="#单例作用域-singleton"><span>单例作用域（singleton）</span></a></h2><p>单例作用域（singleton scope）是Spring框架中Bean定义的默认作用域。 当你将一个Bean定义为单例作用域时，对所有具有匹配ID或名称的Bean的调用都会返回这个特定的Bean实例。</p><p>下图说明了单例作用域：</p><figure><img src="http://img.geekyspace.cn/pictures/2024/singleton.png" alt="singleton" tabindex="0" loading="lazy"><figcaption>singleton</figcaption></figure><p>Spring的单例Bean概念与《设计模式》GoF（四人帮）书中定义的单例模式有所不同。</p><ul><li>GoF单例模式通过硬编码对象的作用域，确保每个类加载器（ClassLoader）下，仅有一个特定类的实例被创建</li><li>Spring单例的作用域最好被描述为每个容器（per-container）和每个bean（per-bean）</li></ul><p>单例作用域是Spring中的默认作用域。要在XML中将一个Bean定义为单例，参考按照以下示例：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultAccountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 以下是等效的冗余写法（因为单例作用域是默认的） --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultAccountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>singleton<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型作用域-prototype" tabindex="-1"><a class="header-anchor" href="#原型作用域-prototype"><span>原型作用域（prototype）</span></a></h2><p>原型作用域（prototype scope）的Bean部署，意味着每次请求该特定Bean时都会创建一个新的Bean实例。 也就是说，当一个Bean被注入到另一个Bean中，或者通过容器上的<code>getBean()</code>方法调用请求它，每次都会产生一个新的实例。 作为一项规则，将原型（prototype）作用域用于所有有状态的Bean，将单例（singleton）作用域用于无状态的Bean。</p><p>下图说明了原型作用域：</p><figure><img src="http://img.geekyspace.cn/pictures/2024/prototype.png" alt="prototype" tabindex="0" loading="lazy"><figcaption>prototype</figcaption></figure><p>（注意⚠️：以上图片中的数据访问对象（DAO）通常不配置为原型作用域，因为典型的DAO不持有任何会话状态。）</p><p>以下示例展示了如何在XML中将一个Bean定义为原型作用域：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultAccountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prototype<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),B=e("code",null,"@PostConstruct",-1),f=e("code",null,"@PreDestroy",-1),_={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-extension.html#beans-factory-extension-bpp",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"new",-1),v={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle",target:"_blank",rel:"noopener noreferrer"},S=e("h2",{id:"单例bean与原型bean依赖",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#单例bean与原型bean依赖"},[e("span",null,"单例Bean与原型Bean依赖")])],-1),x=e("p",null,"当你在单例作用域的Bean中使用对原型作用域Bean的依赖时，请注意依赖关系是在实例化时解析的。 因此，如果你将一个原型作用域的Bean注入到一个单例作用域的Bean中，将会实例化一个新的原型Bean，然后将其依赖注入到单例Bean中。 这个原型实例是唯一供给单例作用域Bean的实例。",-1),q={href:"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-method-injection.html",target:"_blank",rel:"noopener noreferrer"},w=e("h2",{id:"请求、会话、应用程序和websocket作用域",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#请求、会话、应用程序和websocket作用域"},[e("span",null,"请求、会话、应用程序和WebSocket作用域")])],-1),T=e("h2",{id:"自定义作用域",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#自定义作用域"},[e("span",null,"自定义作用域")])],-1);function D(W,A){const t=p("ExternalLinkIcon");return r(),c("div",null,[l,u,e("p",null,[n("你不仅可以控制Bean定义中的各种依赖项和配置值，还可以控制由Bean定义创建的对象的作用域（scope）。 这种方法是强大且灵活的，因为你可以通过配置选择创建的对象的作用域，而不必在Java类级别上固定对象的作用域。 Bean定义可以是多种作用域之一。Spring框架支持六种作用域，其中四种仅在使用Web感知（aware）的"),d,n("时才可用。 你还可以创建"),e("a",g,[n("自定义作用域"),a(t)]),n("。")]),h,e("blockquote",null,[e("p",null,[n("线程作用域（Thread Scope）在Spring框架中是可用的，但默认情况下并没有注册。参阅 "),e("a",m,[n("SimpleThreadScope"),a(t)]),n("。 关于如何注册此Scope或任何其他自定义Scope的说明，参阅 "),e("a",k,[n("自定义Scope"),a(t)]),n("。")])]),b,e("p",null,[n("与其他作用域相比，Spring并不管理原型（prototype）Bean的完整生命周期。 容器实例化、配置并组装原型对象，然后将其交给客户端，之后就不会对那个原型实例保持任何记录。 因此，尽管初始化生命周期回调方法（如"),B,n("）会在所有对象上调用，而不考虑作用域， 但在原型作用域的情况下，配置的销毁生命周期回调方法（如"),f,n("）则不会被调用。 客户端代码必须清理原型作用域的对象，并释放原型Bean所持有的昂贵资源。 要让Spring容器释放原型作用域Bean所持有的资源，可以尝试使用一个自定义的"),e("a",_,[n("Bean后置处理器"),a(t)]),n(" ，该后置处理器持有需要清理的Bean的引用。")]),e("p",null,[n("在某些方面，Spring容器对于原型（prototype）作用域Bean的角色类似于Java中的"),y,n("运算符。 但是，一旦Spring容器创建并交付原型Bean给客户端，所有生命周期管理的工作都需要由客户端自行处理。 有关Spring容器中Bean的生命周期的详细信息，参阅 "),e("a",v,[n("生命周期回调"),a(t)])]),S,x,e("p",null,[n("然而，假设你希望单例作用域的Bean在运行时重复获取原型作用域的Bean的新实例。 你不能将一个原型作用域的Bean注入到您的单例Bean中，因为这种注入只会在Spring容器实例化单例Bean并解析并注入其依赖时发生一次。 如果你需要在运行时多次获取原型Bean的新实例，参阅 "),e("a",q,[n("方法注入（Method Injection）"),a(t)]),n("。")]),w,T])}const z=o(i,[["render",D],["__file","beans-scope.html.vue"]]),N=JSON.parse('{"path":"/spring-framework/core/beans-scope.html","title":"Bean作用域（Scope）","lang":"zh-CN","frontmatter":{"title":"Bean作用域（Scope）","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-04-03T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"Bean作用域（Scope） 当你创建一个Bean定义时，实际上是在创建Bean定义所定义类的实际实例的配方。 将Bean定义视为“配方”的概念非常重要，因为它意味着，就像一个类一样，你可以从一个单一的“配方”中创建多个对象实例。 你不仅可以控制Bean定义中的各种依赖项和配置值，还可以控制由Bean定义创建的对象的作用域（scope）。 这种方法是强...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/beans-scope.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"Bean作用域（Scope）"}],["meta",{"property":"og:description","content":"Bean作用域（Scope） 当你创建一个Bean定义时，实际上是在创建Bean定义所定义类的实际实例的配方。 将Bean定义视为“配方”的概念非常重要，因为它意味着，就像一个类一样，你可以从一个单一的“配方”中创建多个对象实例。 你不仅可以控制Bean定义中的各种依赖项和配置值，还可以控制由Bean定义创建的对象的作用域（scope）。 这种方法是强..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.geekyspace.cn/pictures/2024/singleton.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-03T10:59:56.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-04-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-03T10:59:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bean作用域（Scope）\\",\\"image\\":[\\"http://img.geekyspace.cn/pictures/2024/singleton.png\\",\\"http://img.geekyspace.cn/pictures/2024/prototype.png\\"],\\"datePublished\\":\\"2024-04-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-03T10:59:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"单例作用域（singleton）","slug":"单例作用域-singleton","link":"#单例作用域-singleton","children":[]},{"level":2,"title":"原型作用域（prototype）","slug":"原型作用域-prototype","link":"#原型作用域-prototype","children":[]},{"level":2,"title":"单例Bean与原型Bean依赖","slug":"单例bean与原型bean依赖","link":"#单例bean与原型bean依赖","children":[]},{"level":2,"title":"请求、会话、应用程序和WebSocket作用域","slug":"请求、会话、应用程序和websocket作用域","link":"#请求、会话、应用程序和websocket作用域","children":[]},{"level":2,"title":"自定义作用域","slug":"自定义作用域","link":"#自定义作用域","children":[]}],"git":{"createdTime":1712131991000,"updatedTime":1712141996000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":5}]},"readingTime":{"minutes":4.94,"words":1482},"filePathRelative":"spring-framework/core/beans-scope.md","localizedDate":"2024年4月3日","excerpt":"\\n<p>当你创建一个Bean定义时，实际上是在创建Bean定义所定义类的实际实例的配方。\\n将Bean定义视为“配方”的概念非常重要，因为它意味着，就像一个类一样，你可以从一个单一的“配方”中创建多个对象实例。</p>\\n<p>你不仅可以控制Bean定义中的各种依赖项和配置值，还可以控制由Bean定义创建的对象的作用域（scope）。\\n这种方法是强大且灵活的，因为你可以通过配置选择创建的对象的作用域，而不必在Java类级别上固定对象的作用域。\\nBean定义可以是多种作用域之一。Spring框架支持六种作用域，其中四种仅在使用Web感知（aware）的<code>ApplicationContext</code>时才可用。\\n你还可以创建<a href=\\"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-custom\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">自定义作用域</a>。</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{z as comp,N as data};
