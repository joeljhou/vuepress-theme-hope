import{_ as p,r as o,o as c,c as l,a as n,b as a,d as t,e}from"./app-BXwui8RE.js";const r={},i=e('<h1 id="依赖和配置详解" tabindex="-1"><a class="header-anchor" href="#依赖和配置详解"><span>依赖和配置详解</span></a></h1><p>正如前一节所述，您可以将<code>Bean</code>属性和构造函数参数定义为对其它<mark>托管Bean（协作者）的引用</mark>或<mark>内联定义的值</mark>。 Spring基于XML的配置元数据支持<code>&lt;property/&gt;</code>和<code>&lt;constructor-arg/&gt;</code>元素内的子元素类型，以达到这个目的。</p><h2 id="字面值-基本类型、-string-等" tabindex="-1"><a class="header-anchor" href="#字面值-基本类型、-string-等"><span>字面值 (基本类型、 String 等)</span></a></h2>',3),u=n("code",null,"<property/>",-1),d=n("code",null,"value",-1),k={href:"https://docs.spring.io/spring-framework/reference/core/validation/convert.html#core-convert-ConversionService-API",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 调用 setDriverClassName(String) 方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClassName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>misterkaoli<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例使用了<a href="#%E4%BD%BF%E7%94%A8p%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84xml%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F">p命名空间</a>，使得 XML 配置更加简洁：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/p<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>misterkaoli<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g={href:"https://www.jetbrains.com/idea/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://spring.io/tools",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>你也可以配置一个<code>java.util.Properties</code>实例，示例如下：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappings<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.context.support.PropertySourcesPlaceholderConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 作为 java.util.Properties 类型 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>
            jdbc.driver.className=com.mysql.jdbc.Driver
            jdbc.url=jdbc:mysql://localhost:3306/mydb
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring容器会利用JavaBeans的<code>PropertyEditor</code>机制，将<code>&lt;value/&gt;</code>元素内的文本转换为<code>java.util.Properties</code>实例。 这是一个很好的快捷方式，Spring团队中在一些场景中更倾向于使用嵌套的<code>&lt;value/&gt;</code>元素而不是<code>value</code>属性的方式。</p><h2 id="对其他bean的引用-合作者" tabindex="-1"><a class="header-anchor" href="#对其他bean的引用-合作者"><span>对其他Bean的引用（合作者）</span></a></h2><h2 id="内部-bean" tabindex="-1"><a class="header-anchor" href="#内部-bean"><span>内部 Bean</span></a></h2><h2 id="集合-collection" tabindex="-1"><a class="header-anchor" href="#集合-collection"><span>集合（Collection）</span></a></h2><h2 id="null和空字符串值" tabindex="-1"><a class="header-anchor" href="#null和空字符串值"><span>Null和空字符串值</span></a></h2><h2 id="使用p命名空间的xml快捷方式" tabindex="-1"><a class="header-anchor" href="#使用p命名空间的xml快捷方式"><span>使用p命名空间的XML快捷方式</span></a></h2><h2 id="使用c命名空间的xml快捷方式" tabindex="-1"><a class="header-anchor" href="#使用c命名空间的xml快捷方式"><span>使用c命名空间的XML快捷方式</span></a></h2><h2 id="复合属性名" tabindex="-1"><a class="header-anchor" href="#复合属性名"><span>复合属性名</span></a></h2>`,10);function b(q,y){const s=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[u,a("元素的"),d,a("属性指定了一个属性或构造函数参数的可读字符串表示。 Spring使用 "),n("a",k,[a("转换服务"),t(s)]),a(" 来将这些值从字符串转换为属性或参数的实际类型。以下示例展示了设置各种值的方式：")]),m,n("p",null,[a("前面的 XML 更加简洁。但是，拼写错误是在运行时而不是设计时被发现。 除非你使用支持在创建 Bean 定义时进行自动属性完成的集成开发环境（例如"),n("a",g,[a("IntelliJ IDEA"),t(s)]),a(" 或"),n("a",v,[a("Spring Tools for Eclipse"),t(s)]),a("），强烈建议使用这类 IDE 的帮助。")]),h])}const f=p(r,[["render",b],["__file","factory-properties-detailed.html.vue"]]),_=JSON.parse('{"path":"/spring-framework/core/dependencies/factory-properties-detailed.html","title":"依赖和配置详解","lang":"zh-CN","frontmatter":{"title":"依赖和配置详解","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-03-26T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"依赖和配置详解 正如前一节所述，您可以将Bean属性和构造函数参数定义为对其它托管Bean（协作者）的引用或内联定义的值。 Spring基于XML的配置元数据支持<property/>和<constructor-arg/>元素内的子元素类型，以达到这个目的。 字面值 (基本类型、 String 等) <property/>元素的value属性指定了一个...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/dependencies/factory-properties-detailed.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"依赖和配置详解"}],["meta",{"property":"og:description","content":"依赖和配置详解 正如前一节所述，您可以将Bean属性和构造函数参数定义为对其它托管Bean（协作者）的引用或内联定义的值。 Spring基于XML的配置元数据支持<property/>和<constructor-arg/>元素内的子元素类型，以达到这个目的。 字面值 (基本类型、 String 等) <property/>元素的value属性指定了一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-29T07:32:15.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-29T07:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖和配置详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-29T07:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"字面值 (基本类型、 String 等)","slug":"字面值-基本类型、-string-等","link":"#字面值-基本类型、-string-等","children":[]},{"level":2,"title":"对其他Bean的引用（合作者）","slug":"对其他bean的引用-合作者","link":"#对其他bean的引用-合作者","children":[]},{"level":2,"title":"内部 Bean","slug":"内部-bean","link":"#内部-bean","children":[]},{"level":2,"title":"集合（Collection）","slug":"集合-collection","link":"#集合-collection","children":[]},{"level":2,"title":"Null和空字符串值","slug":"null和空字符串值","link":"#null和空字符串值","children":[]},{"level":2,"title":"使用p命名空间的XML快捷方式","slug":"使用p命名空间的xml快捷方式","link":"#使用p命名空间的xml快捷方式","children":[]},{"level":2,"title":"使用c命名空间的XML快捷方式","slug":"使用c命名空间的xml快捷方式","link":"#使用c命名空间的xml快捷方式","children":[]},{"level":2,"title":"复合属性名","slug":"复合属性名","link":"#复合属性名","children":[]}],"git":{"createdTime":1711526465000,"updatedTime":1711697535000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":3}]},"readingTime":{"minutes":1.88,"words":565},"filePathRelative":"spring-framework/core/dependencies/factory-properties-detailed.md","localizedDate":"2024年3月26日","excerpt":"\\n<p>正如前一节所述，您可以将<code>Bean</code>属性和构造函数参数定义为对其它<mark>托管Bean（协作者）的引用</mark>或<mark>内联定义的值</mark>。\\nSpring基于XML的配置元数据支持<code>&lt;property/&gt;</code>和<code>&lt;constructor-arg/&gt;</code>元素内的子元素类型，以达到这个目的。</p>\\n<h2>字面值 (基本类型、 String 等)</h2>\\n<p><code>&lt;property/&gt;</code>元素的<code>value</code>属性指定了一个属性或构造函数参数的可读字符串表示。\\nSpring使用 <a href=\\"https://docs.spring.io/spring-framework/reference/core/validation/convert.html#core-convert-ConversionService-API\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">转换服务</a>\\n来将这些值从字符串转换为属性或参数的实际类型。以下示例展示了设置各种值的方式：</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{f as comp,_ as data};
