import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as t,o as c}from"./app-DVRWpGtU.js";const i={};function l(a,e){return c(),r("div",null,e[0]||(e[0]=[t('<h1 id="docker概述" tabindex="-1"><a class="header-anchor" href="#docker概述"><span>Docker概述</span></a></h1><h2 id="docker是什么" tabindex="-1"><a class="header-anchor" href="#docker是什么"><span>Docker是什么？</span></a></h2><p>Docker 是一个用于 <strong>开发、发布 和 运行应用程序</strong> 的开放平台。<br> 它通过将应用程序与运行所需的基础设施进行隔离，使得应用程序可以在任何环境中保持一致性。 Docker 以轻量化的方式解决了软件跨平台部署的问题，是现代化应用程序开发的核心工具之一。</p><h2 id="docker执行流程" tabindex="-1"><a class="header-anchor" href="#docker执行流程"><span>Docker执行流程</span></a></h2><ul><li>客户端发指令 → 守护进程接收指令 → 检查镜像(本地/Docker Hub) → 创建容器 → 启动并运行。</li></ul><figure><img src="http://img.geekyspace.cn/pictures/2024/202411152359021.png" alt="Docker执行流程" tabindex="0" loading="lazy"><figcaption>Docker执行流程</figcaption></figure><h2 id="docker架构" tabindex="-1"><a class="header-anchor" href="#docker架构"><span>Docker架构</span></a></h2><p>Docker 的架构设计基于 <strong>客户端-服务器模型</strong>，主要包含以下核心组件：</p><figure><img src="http://img.geekyspace.cn/pictures/2024/202411262315598.webp" alt="Docker架构" tabindex="0" loading="lazy"><figcaption>Docker架构</figcaption></figure><ol><li><strong>Client（客户端）</strong> ：用户与Docker交互的界面，通过命令行或API发送指令给Docker daemon。 <ul><li><code>docker run</code>：创建并启动一个容器。</li><li><code>docker build</code>：根据Dockerfile构建一个新的镜像。</li><li><code>docker pull</code>：从注册中心拉取一个镜像。</li><li><code>docker push</code>：将本地镜像推送到注册中心。</li></ul></li><li><strong>Docker daemon（守护进程）</strong> ：Docker引擎的核心，负责监听、处理客户端的指令，并管理Docker对象（镜像、容器等）。 <ul><li><code>镜像管理</code>：管理本地镜像，包括存储、加载和删除。</li><li><code>容器管理</code>：创建、启动、停止、删除容器。</li><li><code>网络管理</code>：为容器提供网络接口。</li><li><code>存储管理</code>：管理容器的数据卷。</li></ul></li><li><strong>Images（镜像）</strong> ：Docker镜像是一个只读的模板，包含了运行容器所需的所有文件 <ul><li><code>分层结构</code>：镜像由多层组成，每一层代表一个构建步骤。</li><li><code>只读</code>：镜像是只读的，保证了镜像内容的不可变性。</li></ul></li><li><strong>Containers（容器）</strong> ：Docker容器是镜像的运行实例，是应用程序的运行环境。 <ul><li><code>隔离性</code>：每个容器都有独立的文件系统、网络配置和进程空间。</li><li><code>可复用性</code>：基于同一个镜像可以创建多个容器实例。</li></ul></li><li><strong>Registry（注册中心）</strong> ：用于存储和分发Docker镜像的仓库。 <ul><li><code>集中存储</code>：将镜像存储在集中式的仓库中，方便管理和共享。</li><li><code>版本控制</code>：支持镜像的版本管理。</li></ul></li></ol>',10)]))}const p=o(i,[["render",l],["__file","overview.html.vue"]]),k=JSON.parse('{"path":"/md/docker/overview.html","title":"Docker概述","lang":"zh-CN","frontmatter":{"title":"Docker概述","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-11-15T00:00:00.000Z","category":"Docker","tag":"Docker","description":"Docker概述 Docker是什么？ Docker 是一个用于 开发、发布 和 运行应用程序 的开放平台。 它通过将应用程序与运行所需的基础设施进行隔离，使得应用程序可以在任何环境中保持一致性。 Docker 以轻量化的方式解决了软件跨平台部署的问题，是现代化应用程序开发的核心工具之一。 Docker执行流程 客户端发指令 → 守护进程接收指令 → ...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/docker/overview.html"}],["meta",{"property":"og:title","content":"Docker概述"}],["meta",{"property":"og:description","content":"Docker概述 Docker是什么？ Docker 是一个用于 开发、发布 和 运行应用程序 的开放平台。 它通过将应用程序与运行所需的基础设施进行隔离，使得应用程序可以在任何环境中保持一致性。 Docker 以轻量化的方式解决了软件跨平台部署的问题，是现代化应用程序开发的核心工具之一。 Docker执行流程 客户端发指令 → 守护进程接收指令 → ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.geekyspace.cn/pictures/2024/202411152359021.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-26T16:18:26.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2024-11-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-26T16:18:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker概述\\",\\"image\\":[\\"http://img.geekyspace.cn/pictures/2024/202411152359021.png\\",\\"http://img.geekyspace.cn/pictures/2024/202411262315598.webp\\"],\\"datePublished\\":\\"2024-11-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-26T16:18:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"Docker是什么？","slug":"docker是什么","link":"#docker是什么","children":[]},{"level":2,"title":"Docker执行流程","slug":"docker执行流程","link":"#docker执行流程","children":[]},{"level":2,"title":"Docker架构","slug":"docker架构","link":"#docker架构","children":[]}],"git":{"createdTime":1731684364000,"updatedTime":1732637906000,"contributors":[{"name":"kai","email":"kkdlut@hotmail.com","commits":3}]},"readingTime":{"minutes":1.93,"words":580},"filePathRelative":"md/docker/overview.md","localizedDate":"2024年11月15日","excerpt":"\\n<h2>Docker是什么？</h2>\\n<p>Docker 是一个用于 <strong>开发、发布 和 运行应用程序</strong> 的开放平台。<br>\\n它通过将应用程序与运行所需的基础设施进行隔离，使得应用程序可以在任何环境中保持一致性。\\nDocker 以轻量化的方式解决了软件跨平台部署的问题，是现代化应用程序开发的核心工具之一。</p>\\n<h2>Docker执行流程</h2>\\n<ul>\\n<li>客户端发指令 → 守护进程接收指令 → 检查镜像(本地/Docker Hub) → 创建容器 → 启动并运行。</li>\\n</ul>\\n<figure><img src=\\"http://img.geekyspace.cn/pictures/2024/202411152359021.png\\" alt=\\"Docker执行流程\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Docker执行流程</figcaption></figure>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{p as comp,k as data};
