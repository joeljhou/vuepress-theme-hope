import{_ as o,r as i,o as l,c,a as n,b as a,d as t,e as s}from"./app-BN9nRW91.js";const p={},r=s('<h1 id="自定义bean的性质" tabindex="-1"><a class="header-anchor" href="#自定义bean的性质"><span>自定义Bean的性质</span></a></h1><p>Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类：</p><ul><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83">生命周期回调</a></li><li><a href="#applicationcontextaware%E5%92%8Cbeannameaware">ApplicationContextAware 和 BeanNameAware</a></li><li><a href="#%E5%85%B6%E4%BB%96aware%E6%8E%A5%E5%8F%A3">其他Aware接口</a></li></ul><h2 id="生命周期回调" tabindex="-1"><a class="header-anchor" href="#生命周期回调"><span>生命周期回调</span></a></h2><p>为了与容器管理Bean的生命周期进行交互，你可以实现Spring的<code>InitializingBean</code>和<code>DisposableBean</code>接口。 容器调用前者的<code>afterPropertiesSet()</code>方法以及后者的<code>destroy()</code>方法，让Bean在初始化和销毁时执行特定的操作。</p>',5),d={class:"hint-container tip"},u=n("p",{class:"hint-container-title"},"提示",-1),h=n("code",null,"@PostConstruct",-1),m=n("code",null,"@PreDestroy",-1),k={href:"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/postconstruct-and-predestroy-annotations.html",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[a("如果你不想使用JSR-250注解，但仍然希望消除耦合，可以考虑使用"),n("code",null,"init-method"),a("和"),n("code",null,"destroy-method"),a("的Bean定义元数据。")],-1),v=n("p",null,"在内部，Spring框架使用 BeanPostProcessor 实现来处理它能找到的任何回调接口并调用相应的方法。 如果你需要自定义功能或其他Spring默认不提供的生命周期行为，你可以自己实现一个 BeanPostProcessor。 欲了解更多信息，请参见 容器扩展点。",-1),b=n("code",null,"BeanPostProcessor",-1),w=n("code",null,"BeanPostProcessor",-1),B={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-extension.html",target:"_blank",rel:"noopener noreferrer"},_=s(`<p>除了初始化和销毁回调之外，Spring管理的对象还可以实现<code>Lifecycle</code>接口，以便这些对象可以参与由容器自身生命周期驱动的启动和关闭过程。</p><p>生命周期回调接口在本节中有详细描述。</p><h3 id="初始化回调" tabindex="-1"><a class="header-anchor" href="#初始化回调"><span>初始化回调</span></a></h3><p><code>org.springframework.beans.factory.InitializingBean</code>接口允许Bean在容器设置了所有必要属性之后执行初始化工作。 <code>InitializingBean</code>接口指定了一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),f=n("code",null,"InitializingBean",-1),x=n("code",null,"@PostConstruct",-1),y=n("code",null,"init-method",-1),E=n("code",null,"void",-1),A=n("code",null,"@Bean",-1),S=n("code",null,"initMethod",-1),C={href:"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-lifecycle-callbacks",target:"_blank",rel:"noopener noreferrer"},P=s(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 做一些初始化工作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上一个示例与以下示例几乎具有相同的效果，以下示例分为两个部分：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.AnotherExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 做一些初始化工作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，前面两个示例中的第一个并未将代码与Spring耦合在一起。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>请注意，<code>@PostConstruct</code>和初始化方法一般在容器的单例创建锁内执行。只有在从<code>@PostConstruct</code>方法返回后， Bean实例才被视为完全初始化并准备好发布给其他对象。 这些单独的初始化方法仅用于验证配置状态并可能根据给定的配置准备一些数据结构，但不涉及外部Bean访问相关的进一步活动。 否则，存在初始化死锁的风险。</p><p>对于需要触发昂贵的初始化后活动的场景，例如异步数据库准备步骤，你的Bean应该实现 <code>SmartInitializingSingleton.afterSingletonsInstantiated()</code>方法，或依赖于上下文刷新事件：实现 <code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code>或声明其注解等效的 <code>@EventListener(ContextRefreshedEvent.class)</code>。 这些变体在所有常规单例初始化之后，因此不会在任何单例创建锁内。</p><p>或者，你可以实现<code>(Smart)Lifecycle</code>接口并与容器的整体生命周期管理集成，包括自动启动机制、预销毁停止步骤和潜在的停止/重新启动回调（参见下文）。</p></div><h3 id="销毁回调" tabindex="-1"><a class="header-anchor" href="#销毁回调"><span>销毁回调</span></a></h3><h3 id="默认的初始化和销毁方法" tabindex="-1"><a class="header-anchor" href="#默认的初始化和销毁方法"><span>默认的初始化和销毁方法</span></a></h3><h3 id="结合生命周期机制" tabindex="-1"><a class="header-anchor" href="#结合生命周期机制"><span>结合生命周期机制</span></a></h3><h3 id="启动和关闭的回调" tabindex="-1"><a class="header-anchor" href="#启动和关闭的回调"><span>启动和关闭的回调</span></a></h3><h3 id="在非web应用中优雅地关闭spring-ioc容器" tabindex="-1"><a class="header-anchor" href="#在非web应用中优雅地关闭spring-ioc容器"><span>在非Web应用中优雅地关闭Spring IoC容器</span></a></h3><h2 id="applicationcontextaware和beannameaware" tabindex="-1"><a class="header-anchor" href="#applicationcontextaware和beannameaware"><span>ApplicationContextAware和BeanNameAware</span></a></h2><h2 id="其他aware接口" tabindex="-1"><a class="header-anchor" href="#其他aware接口"><span>其他Aware接口</span></a></h2>`,14);function q(j,I){const e=i("ExternalLinkIcon");return l(),c("div",null,[r,n("div",d,[u,n("p",null,[a("在现代的Spring应用程序中，通常认为JSR-250的"),h,a("和"),m,a("注解是用于接收生命周期回调最佳实践。 使用这些注解意味着你的Bean不会与Spring特定的接口耦合。参阅 "),n("a",k,[a("使用@PostConstruct和@PreDestroy"),t(e)]),a("。")]),g]),v,n("p",null,[a("Spring框架在内部使用"),b,a("实现来处理它找到的任何回调接口，并调用适当的方法。 如果你需要自定义功能或其他Spring默认不提供的生命周期行为，你可以自己实现一个"),w,a("。 参阅 "),n("a",B,[a("容器扩展点"),t(e)]),a("。")]),_,n("p",null,[a("我们建议不要使用"),f,a("接口，因为它会将代码不必要地耦合到Spring。 相反，我们建议使用"),x,a("注解或指定一个POJO初始化方法。 在基于XML的配置元数据中，你可以使用"),y,a("属性来指定具有"),E,a("无参数签名的方法的名称。 对于Java配置，你可以使用"),A,a("的"),S,a("属性。 参阅 "),n("a",C,[a("接收生命周期回调"),t(e)]),a("。 考虑以下示例：")]),P])}const z=o(p,[["render",q],["__file","custom-beans-nature.html.vue"]]),T=JSON.parse('{"path":"/spring-framework/core/custom-beans-nature.html","title":"自定义Bean的性质","lang":"zh-CN","frontmatter":{"title":"自定义Bean的性质","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-04-08T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"自定义Bean的性质 Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类： 生命周期回调 ApplicationContextAware 和 BeanNameAware 其他Aware接口 生命周期回调 为了与容器管理Bean的生命周期进行交互，你可以实现Spring的InitializingBean和Dis...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/custom-beans-nature.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"自定义Bean的性质"}],["meta",{"property":"og:description","content":"自定义Bean的性质 Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类： 生命周期回调 ApplicationContextAware 和 BeanNameAware 其他Aware接口 生命周期回调 为了与容器管理Bean的生命周期进行交互，你可以实现Spring的InitializingBean和Dis..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T10:01:32.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-04-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-08T10:01:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义Bean的性质\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-08T10:01:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"生命周期回调","slug":"生命周期回调","link":"#生命周期回调","children":[{"level":3,"title":"初始化回调","slug":"初始化回调","link":"#初始化回调","children":[]},{"level":3,"title":"销毁回调","slug":"销毁回调","link":"#销毁回调","children":[]},{"level":3,"title":"默认的初始化和销毁方法","slug":"默认的初始化和销毁方法","link":"#默认的初始化和销毁方法","children":[]},{"level":3,"title":"结合生命周期机制","slug":"结合生命周期机制","link":"#结合生命周期机制","children":[]},{"level":3,"title":"启动和关闭的回调","slug":"启动和关闭的回调","link":"#启动和关闭的回调","children":[]},{"level":3,"title":"在非Web应用中优雅地关闭Spring IoC容器","slug":"在非web应用中优雅地关闭spring-ioc容器","link":"#在非web应用中优雅地关闭spring-ioc容器","children":[]}]},{"level":2,"title":"ApplicationContextAware和BeanNameAware","slug":"applicationcontextaware和beannameaware","link":"#applicationcontextaware和beannameaware","children":[]},{"level":2,"title":"其他Aware接口","slug":"其他aware接口","link":"#其他aware接口","children":[]}],"git":{"createdTime":1712567172000,"updatedTime":1712570492000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":3}]},"readingTime":{"minutes":3.75,"words":1125},"filePathRelative":"spring-framework/core/custom-beans-nature.md","localizedDate":"2024年4月8日","excerpt":"\\n<p>Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类：</p>\\n<ul>\\n<li><a href=\\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83\\">生命周期回调</a></li>\\n<li><a href=\\"#applicationcontextaware%E5%92%8Cbeannameaware\\">ApplicationContextAware 和 BeanNameAware</a></li>\\n<li><a href=\\"#%E5%85%B6%E4%BB%96aware%E6%8E%A5%E5%8F%A3\\">其他Aware接口</a></li>\\n</ul>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{z as comp,T as data};
