import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Bw3Iwsxp.js";const e={},p=t(`<h1 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制"><span>类加载机制</span></a></h1><h2 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期"><span>类的生命周期</span></a></h2><p>类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202407260441081.png" alt="类的生命周期" tabindex="0" loading="lazy"><figcaption>类的生命周期</figcaption></figure><p><strong>类加载过程中的初始化</strong></p><p>在《Java虚拟机规范》中，“有且只有” 以下6种场景会触发初始化，称为对一个类进行<strong>主动引用</strong>。</p><ol><li>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>字节码指令时，如果类型尚未初始化，则需要先触发其初始化。</li><li>对类型进行反射调用时，如果类型还没有初始化，则需要先触发其初始化。</li><li>初始化一个类时，如果其父类还没有初始化，则需要先初始化父类。</li><li>虚拟机启动时，需要指定一个包含<code>main()</code>方法的主类，虚拟机会先初始化这个主类。</li><li>使用JDK 1.7引入的动态语言支持时，如果<code>java.lang.invoke.MethodHandle</code> 实例解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>或<code>REF_newInvokeSpecial</code>，并且对应类没有初始化，则需要先触发其初始化。</li><li>当接口中定义了JDK 1.8新增的默认方法时，如果实现类初始化，则需要先初始化该接口。</li></ol><p>除了这六种场景外，所有其他引用类的方式都不会触发初始化，称为<strong>被动引用</strong>。</p><blockquote><p>被动引用的例子</p></blockquote><p><strong>例子一：通过子类引用父类的静态字段，不会导致子类初始化</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>
   <span class="token keyword">static</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SuperClass init!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>
   <span class="token keyword">static</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SubClass init!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 运行结果只输出“SuperClass init！”，不会输出“SubClass init！”。</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SubClass</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于是否要触发子类的加载和验证阶段，取决于虚拟机的具体实现。 对于HotSpot虚拟机（JDK1.8亲测），加入<code>-XX:+TraceClassLoading</code>观察，此操作是会导致子类加载的。</p><p><strong>例子二：通过数组定义来引用类，不会触发此类的初始化</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 运行结果没有输出“SuperClass init！”，说明并没有触发类SuperClass的初始化</span>
      <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这段代码触发了另一个名为<code>[Lorg.fenixsoft.classloading.SuperClass</code>的类的初始化阶段。 它是由虚拟机自动生成的、直接继承于<code>java.lang.Object</code>的子类，由字节码指令<code>newarray</code>触发。</p><ul><li>这个类表示<code>SuperClass</code>的一维数组，包含数组应有的属性和方法（如<code>public</code>的<code>length</code>属性和<code>clone()</code>方法）。</li><li>Java语言对数组的访问比C/C++更安全，因为这个类包装了数组元素的访问，C/C++中直接翻译为对数组指针的移动。 在Java语言里，发生数组越界时会抛出<code>java.lang.ArrayIndexOutOfBoundsException</code>异常，避免非法内存访问。</li></ul><p><strong>例子三：常量在编译阶段存入调用类的常量池中，不会触发定义常量的类的初始化</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ConstClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConstClass init!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">HELLOWORLD</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 运行结果没有输出“ConstClass init！”</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ConstClass</span><span class="token punctuation">.</span><span class="token constant">HELLOWORLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>接口的加载与初始化</strong></p><p>接口的加载过程与类略有不同，具体情况如下：</p><ul><li>虽然接口不能使用静态语句块<code>static{}</code>来输出初始化信息，编译器仍会为接口生成<code>&lt;clinit&gt;()</code>类构造器，用于初始化接口中定义的成员变量。</li><li>接口与类的主要区别在于接口的初始化触发条件。类的初始化需要其所有父类已经初始化，而接口在初始化时不要求其父接口全部初始化。 接口只有在实际使用父接口中的成员（如引用接口中定义的常量）时，才会进行初始化。</li></ul><h2 id="类加载的过程" tabindex="-1"><a class="header-anchor" href="#类加载的过程"><span>类加载的过程</span></a></h2><p>Java类加载过程主要分为加载、连接、初始化三个阶段。</p><h3 id="加载" tabindex="-1"><a class="header-anchor" href="#加载"><span>加载</span></a></h3><p>首先是加载阶段，主要负责查找并加载类的二进制数据。 Java虚拟机需要完成以下三件事情：</p><ol><li>通过类的全限定名获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</li></ol><h3 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h3><p>验证 准备 解析</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器</span></a></h2>`,31),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","classload.html.vue"]]),k=JSON.parse('{"path":"/md/jvm/classload.html","title":"类加载机制","lang":"zh-CN","frontmatter":{"title":"类加载机制","description":"类加载机制 类的生命周期 类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。 类的生命周期类的生命周期 类加载过程中的初始化 在《Java虚拟机规范》中，“有且只有” 以下6种场景会触发初始化，称为对一个类进行主动引用。 遇到new、getstatic、putstatic或invokestatic字节码指令时，如果...","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-07-20T00:00:00.000Z","category":"JVM","tag":"JVM","order":3,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/jvm/classload.html"}],["meta",{"property":"og:title","content":"类加载机制"}],["meta",{"property":"og:description","content":"类加载机制 类的生命周期 类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。 类的生命周期类的生命周期 类加载过程中的初始化 在《Java虚拟机规范》中，“有且只有” 以下6种场景会触发初始化，称为对一个类进行主动引用。 遇到new、getstatic、putstatic或invokestatic字节码指令时，如果..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.geekyspace.cn/pictures/2024/202407260441081.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-02T20:27:55.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-07-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-02T20:27:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类加载机制\\",\\"image\\":[\\"https://img.geekyspace.cn/pictures/2024/202407260441081.png\\"],\\"datePublished\\":\\"2024-07-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-02T20:27:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"类的生命周期","slug":"类的生命周期","link":"#类的生命周期","children":[]},{"level":2,"title":"类加载的过程","slug":"类加载的过程","link":"#类加载的过程","children":[{"level":3,"title":"加载","slug":"加载","link":"#加载","children":[]},{"level":3,"title":"连接","slug":"连接","link":"#连接","children":[]},{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]}]},{"level":2,"title":"类加载器","slug":"类加载器","link":"#类加载器","children":[]}],"git":{"createdTime":1722019454000,"updatedTime":1722630475000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":3}]},"readingTime":{"minutes":3.81,"words":1143},"filePathRelative":"md/jvm/classload.md","localizedDate":"2024年7月20日","excerpt":"\\n<h2>类的生命周期</h2>\\n<p>类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。</p>\\n<figure><img src=\\"https://img.geekyspace.cn/pictures/2024/202407260441081.png\\" alt=\\"类的生命周期\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>类的生命周期</figcaption></figure>\\n<p><strong>类加载过程中的初始化</strong></p>\\n<p>在《Java虚拟机规范》中，“有且只有” 以下6种场景会触发初始化，称为对一个类进行<strong>主动引用</strong>。</p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{r as comp,k as data};
