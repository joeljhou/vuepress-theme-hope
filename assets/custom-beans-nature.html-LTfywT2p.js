import{_ as c,r as o,o as l,c as i,a,b as n,d as s,e as t}from"./app-DlnRaWKN.js";const r={},d=t('<h1 id="自定义bean的性质" tabindex="-1"><a class="header-anchor" href="#自定义bean的性质"><span>自定义Bean的性质</span></a></h1><p>Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类：</p><ul><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83">生命周期回调</a></li><li><a href="#applicationcontextaware%E5%92%8Cbeannameaware">ApplicationContextAware 和 BeanNameAware</a></li><li><a href="#%E5%85%B6%E4%BB%96aware%E6%8E%A5%E5%8F%A3">其他Aware接口</a></li></ul><h2 id="生命周期回调" tabindex="-1"><a class="header-anchor" href="#生命周期回调"><span>生命周期回调</span></a></h2><p>为了与容器管理Bean的生命周期进行交互，你可以实现Spring的<code>InitializingBean</code>和<code>DisposableBean</code>接口。 容器调用前者的<code>afterPropertiesSet()</code>方法以及后者的<code>destroy()</code>方法，让Bean在初始化和销毁时执行特定的操作。</p>',5),u={class:"hint-container tip"},k=a("p",{class:"hint-container-title"},"提示",-1),m=a("code",null,"@PostConstruct",-1),v=a("code",null,"@PreDestroy",-1),h={href:"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/postconstruct-and-predestroy-annotations.html",target:"_blank",rel:"noopener noreferrer"},g=a("p",null,[n("如果你不想使用JSR-250注解，但仍然希望消除耦合，可以考虑使用"),a("code",null,"init-method"),n("和"),a("code",null,"destroy-method"),n("的Bean定义元数据。")],-1),b=a("code",null,"BeanPostProcessor",-1),_=a("code",null,"BeanPostProcessor",-1),B={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-extension.html",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>除了初始化和销毁回调之外，Spring管理的对象还可以实现<code>Lifecycle</code>接口，以便这些对象可以参与由容器自身生命周期驱动的启动和关闭过程。</p><p>生命周期回调接口在本节中有详细描述。</p><h3 id="初始化回调" tabindex="-1"><a class="header-anchor" href="#初始化回调"><span>初始化回调</span></a></h3><p>实现<code>org.springframework.beans.factory.InitializingBean</code>接口允许Bean在容器设置了所有必要属性之后执行初始化工作。 <code>InitializingBean</code>接口指定了一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),f=a("code",null,"InitializingBean",-1),y=a("code",null,"@PostConstruct",-1),x=a("code",null,"init-method",-1),q=a("code",null,"void",-1),S=a("code",null,"@Bean",-1),E=a("code",null,"initMethod",-1),A={href:"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-lifecycle-callbacks",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 做一些初始化工作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上一个示例与以下示例几乎具有相同的效果：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.AnotherExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 做一些初始化工作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，前面两个示例中的第一个并未将代码与Spring耦合。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>请注意，<code>@PostConstruct</code>和初始化方法一般在容器的单例创建锁内执行。只有在从<code>@PostConstruct</code>方法返回后， Bean实例才被视为完全初始化并准备好发布给其他对象。 这些单独的初始化方法仅用于验证配置状态并可能根据给定的配置准备一些数据结构，但不涉及外部Bean访问相关的进一步活动。 否则，存在初始化死锁的风险。</p><p>对于需要触发昂贵的初始化后活动的场景，例如异步数据库准备步骤，你的Bean应该实现 <code>SmartInitializingSingleton.afterSingletonsInstantiated()</code>方法，或依赖于上下文刷新事件：实现 <code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code>或声明其注解等效的 <code>@EventListener(ContextRefreshedEvent.class)</code>。 这些变体在所有常规单例初始化之后，因此不会在任何单例创建锁内。</p><p>或者，你可以实现<code>(Smart)Lifecycle</code>接口并与容器的整体生命周期管理集成，包括自动启动机制、预销毁停止步骤和潜在的停止/重新启动回调（参见下文）。</p></div><h3 id="销毁回调" tabindex="-1"><a class="header-anchor" href="#销毁回调"><span>销毁回调</span></a></h3><p>实现<code>org.springframework.beans.factory.DisposableBean</code>接口允许Bean在包含它的容器销毁时获得回调。 <code>DisposableBean</code>接口指定了一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),D=a("code",null,"DisposableBean",-1),C=a("code",null,"@PreDestroy",-1),P=a("code",null,"<bean/>",-1),I=a("code",null,"destroy-method",-1),z=a("code",null,"@Bean",-1),L=a("code",null,"destroyMethod",-1),N={href:"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-lifecycle-callbacks",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cleanup<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做一些销毁工作(比如释放池连接)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上一个示例与以下示例几乎具有相同的效果：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.AnotherExampleBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做一些销毁工作(比如释放池连接)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，前面两个示例中的第一个并未将代码与Spring耦合。</p><p>请注意，Spring还支持推断销毁方法，可以检测到公开的<code>close</code>或<code>shutdown</code>方法。 这是Java配置类中<code>@Bean</code>方法的默认行为，并且自动匹配<code>java.lang.AutoCloseable</code>或<code>java.io.Closeable</code>实现，也不会将销毁逻辑与Spring耦合。</p>`,7),T={class:"hint-container tip"},F=a("p",{class:"hint-container-title"},"提示",-1),J=a("code",null,"<bean>",-1),O=a("code",null,"destroy-method",-1),X=a("code",null,"close",-1),Z=a("code",null,"shutdown",-1),R=a("code",null,"<beans>",-1),V=a("code",null,"default-destroy-method",-1),W={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle-default-init-destroy-methods",target:"_blank",rel:"noopener noreferrer"},G=t('<div class="hint-container note"><p class="hint-container-title">注</p><p>要实现扩展的关闭阶段，你可以实现<code>Lifecycle</code>接口，这样可以在调用任何单例Bean的销毁方法之前接收到早期停止信号。 此外，你还可以实现<code>SmartLifecycle</code>接口，用于时间限制的停止步骤，容器将等待所有这类停止处理完成后再继续执行销毁方法。</p></div><h3 id="默认的初始化和销毁方法" tabindex="-1"><a class="header-anchor" href="#默认的初始化和销毁方法"><span>默认的初始化和销毁方法</span></a></h3><p>当你编写初始化和销毁方法时，如果不使用Spring特定<code>InitializingBean</code>和<code>DisposableBean</code>回调接口， 通常会使用<code>init()</code>、<code>initialize()</code>、<code>dispose()</code>等名称的方法。 理想情况下，这些生命周期回调方法的命名应在项目中标准化，以便所有开发人员使用相同的方法名称并确保一致性。</p>',3),H=a("code",null,"init()",-1),K=a("code",null,'init-method="init"',-1),Q={href:"https://docs.spring.io/spring-framework/reference/core/beans/factory-nature.html#beans-factory-lifecycle",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>假设你的初始化回调方法命名为<code>init()</code>，销毁回调方法命名为<code>destroy()</code>。那么你的类将类似于以下示例中的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBlogService</span> <span class="token keyword">implements</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlogDao</span><span class="token punctuation">(</span><span class="token class-name">BlogDao</span> blogDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">=</span> blogDao<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 这个方法被标记为初始化回调方法</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>blogDao <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;必须设置 [blogDao] 属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你可以在一个类似于以下示例的Bean中使用该类：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultBlogService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在顶层<code>&lt;beans/&gt;</code>元素中添加<code>default-init-method</code>属性会导致Spring IoC容器识别Bean类中名为<code>init</code>的方法作为初始化方法的回调。 当创建和组装Bean时，如果Bean类具有这样的方法，它会在适当的时候被调用。</p><p>你可以类似地（在XML中）通过在顶层<code>&lt;beans/&gt;</code>元素上使用<code>default-destroy-method</code>属性来配置销毁方法的回调。</p><p>如果现有的Bean类已经有了与约定不符的回调方法的名称，你可以通过在<code>&lt;bean/&gt;</code>本身上使用<code>init-method</code>和<code>destroy-method</code> 属性（在XML中）来覆盖默认值，指定方法的名称。</p><p>Spring容器保证在为Bean提供所有依赖项之后立即调用配置的初始化回调。 因此，初始化回调在原始Bean引用上被调用，这意味着AOP拦截器等还没有被应用到Bean上。 首先完全创建目标Bean，然后再应用AOP代理（例如）及其拦截器链。 如果目标Bean和代理是分开定义的，你的代码甚至可以与原始目标Bean交互，绕过代理。 因此，将拦截器应用于<code>init</code>方法是不一致的，因为这样做会将目标Bean的生命周期与它的代理或拦截器耦合在一起，当你的代码直接与原始目标Bean交互时，会留下奇怪的语义。</p><h3 id="结合生命周期机制" tabindex="-1"><a class="header-anchor" href="#结合生命周期机制"><span>结合生命周期机制</span></a></h3><h3 id="启动和关闭的回调" tabindex="-1"><a class="header-anchor" href="#启动和关闭的回调"><span>启动和关闭的回调</span></a></h3><h3 id="在非web应用中优雅地关闭spring-ioc容器" tabindex="-1"><a class="header-anchor" href="#在非web应用中优雅地关闭spring-ioc容器"><span>在非Web应用中优雅地关闭Spring IoC容器</span></a></h3><h2 id="applicationcontextaware和beannameaware" tabindex="-1"><a class="header-anchor" href="#applicationcontextaware和beannameaware"><span>ApplicationContextAware和BeanNameAware</span></a></h2><h2 id="其他aware接口" tabindex="-1"><a class="header-anchor" href="#其他aware接口"><span>其他Aware接口</span></a></h2>`,13);function Y($,nn){const e=o("ExternalLinkIcon"),p=o("bean");return l(),i("div",null,[d,a("div",u,[k,a("p",null,[n("在现代的Spring应用程序中，通常认为JSR-250的"),m,n("和"),v,n("注解是用于接收生命周期回调最佳实践。 使用这些注解意味着你的Bean不会与Spring特定的接口耦合。参阅 "),a("a",h,[n("使用@PostConstruct和@PreDestroy"),s(e)]),n("。")]),g]),a("p",null,[n("Spring框架在内部使用"),b,n("实现来处理它找到的任何回调接口，并调用适当的方法。 如果你需要自定义功能或其他Spring默认不提供的生命周期行为，你可以自己实现一个"),_,n("。 参阅 "),a("a",B,[n("容器扩展点"),s(e)]),n("。")]),w,a("p",null,[n("我们建议不要使用"),f,n("接口，因为它会将代码不必要地耦合到Spring。 相反，我们建议使用"),y,n("注解或指定一个POJO初始化方法。 在基于XML的配置中，你可以使用"),x,n("属性来指定具有"),q,n("无参数签名的方法的名称。 对于Java配置，你可以使用"),S,n("的"),E,n("属性。 参阅 "),a("a",A,[n("接收生命周期回调"),s(e)]),n("。 考虑以下示例：")]),j,a("p",null,[n("我们建议你不要使用 DisposableBean 回调接口，因为它不必要地将代码耦合到Spring。 另外，我们建议使用 @PreDestroy 注解或指定一个bean定义所支持的通用方法。对于基于XML的配置元数据，你可以使用 "),s(p),n(" 上的 destroy-method 属性。使用Java配置，你可以使用 @Bean 的 destroyMethod 属性。参见接收生命周期的回调。考虑一下下面的定义。")]),a("p",null,[n("我们建议不要使用"),D,n("回调接口，因为它会将代码不必要地耦合到Spring。 相反，我们建议使用"),C,n("注解或指定一个由Bean定义支持的通用方法。 在基于XML的配置中，你可以在"),P,n("元素中使用"),I,n("属性。 在Java配置中，你可以使用"),z,n("的"),L,n("属性。 参阅 "),a("a",N,[n("接收生命周期回调"),s(e)]),n("。 考虑以下示例：")]),M,a("div",T,[F,a("p",null,[n("在XML配置中，你可以将"),J,n("元素的"),O,n("属性设置为一个特殊的(inferred)值。 该值指示Spring自动检测特定Bean类上的public "),X,n("或"),Z,n("方法。 另外，你也可以将这个特殊（inferred）值赋给"),R,n("元素的"),V,n("属性，以将此行为应用于一组Bean定义。 （参阅 "),a("a",W,[n("默认初始化和销毁方法"),s(e)]),n("）。")])]),G,a("p",null,[n('在Spring中，你可以配置容器来自动"寻找"每个Bean上具有特定名称的初始化和销毁回调方法。 这意味着作为应用开发者，你可以编写应用类并使用名为'),H,n("的初始化回调，而无需在每个Bean定义中配置"),K,n("属性。 Spring IoC容器会在创建Bean时调用该方法 （并且符合"),a("a",Q,[n("之前描述"),s(e)]),n(" 的标准生命周期回调约定）。这个特性还可以强制执行初始化和销毁方法回调的一致命名约定。")]),U])}const sn=c(r,[["render",Y],["__file","custom-beans-nature.html.vue"]]),en=JSON.parse('{"path":"/spring-framework/core/custom-beans-nature.html","title":"自定义Bean的性质","lang":"zh-CN","frontmatter":{"title":"自定义Bean的性质","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-04-08T00:00:00.000Z","category":"Spring","tag":"Spring Framework","description":"自定义Bean的性质 Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类： 生命周期回调 ApplicationContextAware 和 BeanNameAware 其他Aware接口 生命周期回调 为了与容器管理Bean的生命周期进行交互，你可以实现Spring的InitializingBean和Dis...","head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/spring-framework/core/custom-beans-nature.html"}],["meta",{"property":"og:site_name","content":"极客空间"}],["meta",{"property":"og:title","content":"自定义Bean的性质"}],["meta",{"property":"og:description","content":"自定义Bean的性质 Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类： 生命周期回调 ApplicationContextAware 和 BeanNameAware 其他Aware接口 生命周期回调 为了与容器管理Bean的生命周期进行交互，你可以实现Spring的InitializingBean和Dis..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T02:44:10.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:published_time","content":"2024-04-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-09T02:44:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义Bean的性质\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-09T02:44:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"生命周期回调","slug":"生命周期回调","link":"#生命周期回调","children":[{"level":3,"title":"初始化回调","slug":"初始化回调","link":"#初始化回调","children":[]},{"level":3,"title":"销毁回调","slug":"销毁回调","link":"#销毁回调","children":[]},{"level":3,"title":"默认的初始化和销毁方法","slug":"默认的初始化和销毁方法","link":"#默认的初始化和销毁方法","children":[]},{"level":3,"title":"结合生命周期机制","slug":"结合生命周期机制","link":"#结合生命周期机制","children":[]},{"level":3,"title":"启动和关闭的回调","slug":"启动和关闭的回调","link":"#启动和关闭的回调","children":[]},{"level":3,"title":"在非Web应用中优雅地关闭Spring IoC容器","slug":"在非web应用中优雅地关闭spring-ioc容器","link":"#在非web应用中优雅地关闭spring-ioc容器","children":[]}]},{"level":2,"title":"ApplicationContextAware和BeanNameAware","slug":"applicationcontextaware和beannameaware","link":"#applicationcontextaware和beannameaware","children":[]},{"level":2,"title":"其他Aware接口","slug":"其他aware接口","link":"#其他aware接口","children":[]}],"git":{"createdTime":1712567172000,"updatedTime":1712630650000,"contributors":[{"name":"zhouyu","email":"zhouyu@liquido.cn","commits":6}]},"readingTime":{"minutes":7.99,"words":2398},"filePathRelative":"spring-framework/core/custom-beans-nature.md","localizedDate":"2024年4月8日","excerpt":"\\n<p>Spring框架提供了多种接口，你可以使用这些接口来定制Bean的性质。本节将它们分为以下几类：</p>\\n<ul>\\n<li><a href=\\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83\\">生命周期回调</a></li>\\n<li><a href=\\"#applicationcontextaware%E5%92%8Cbeannameaware\\">ApplicationContextAware 和 BeanNameAware</a></li>\\n<li><a href=\\"#%E5%85%B6%E4%BB%96aware%E6%8E%A5%E5%8F%A3\\">其他Aware接口</a></li>\\n</ul>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{sn as comp,en as data};
