import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as l,e as a}from"./app-D0Ul4t7g.js";const o={},i=a('<h1 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制"><span>类加载机制</span></a></h1><h2 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期"><span>类的生命周期</span></a></h2><p>类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。</p><figure><img src="https://img.geekyspace.cn/pictures/2024/202407260441081.png" alt="类的生命周期" tabindex="0" loading="lazy"><figcaption>类的生命周期</figcaption></figure><p>注：并非所有的类都会经历完整的生命周期，有些类可能在某些阶段就结束其在JVM中的生涯。</p><p><strong>1、初始化时机的六种情况称为“主动引用”</strong></p><p>在Java虚拟机规范中，“有且只有”以下六种情况会触发类的初始化，称为对一个类的<strong>主动引用</strong>：</p><ol><li>创建对象实例时、获取或设置静态字段值时（非常量）、调用类的静态方法时。即遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code> 或<code>invokestatic</code>字节码指令这 4 种指令。</li><li>通过反射机制（如<code>Class.forName()</code>）调用类时。</li><li>初始化某个子类时，若其父类还没有初始化，则先初始化父类。</li><li>当虚拟机启动时，指定的包含<code>main()</code>方法的主类会被初始化。</li><li>使用JDK 1.7引入动态语言支持时，若<code>java.lang.invoke.MethodHandle</code> 实例解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>或<code>REF_newInvokeSpecial</code>，若其对应类没有初始化，则先初始化。</li><li>当接口中定义了JDK 1.8新增的默认方法时，若实现类初始化，则需要先初始化该接口。</li></ol><p><strong>2、“被动引用”的例子</strong></p><p>除了以上六种场景外，所有其他引用类的方式都不会触发初始化，称为<strong>被动引用</strong>。</p><ul><li><strong>例1：通过子类引用父类的静态字段，不会导致子类初始化，只有父类会被初始化</strong><ul><li>子类是否加载和验证，取决于虚拟机的具体实现。</li><li>在HotSpot虚拟机（JDK 1.8 亲测）中，使用<code>-XX:+TraceClassLoading</code>观察到此操作会导致子类加载。</li></ul></li><li><strong>例2：通过数组定义来引用类，不会触发此类的初始化</strong><ul><li>例如，<code>MyClass[] sca = new MyClass[10];</code>，不会初始化<code>MyClass</code>类</li><li>但这段代码触发了另一个名为<code>[L包名.MyClass</code>的类的初始化阶段。它是由虚拟机自动生成的、继承自<code>java.lang.Object</code> 的子类，由字节码指令<code>newarray</code>触发。这个类表示<code>MyClass</code>的一维数组，包含数组应有的属性和方法（如<code>public</code>的<code>length</code> 属性和<code>clone()</code>方法）。</li><li>Java语言对数组的访问比C/C++更安全，因为这个类包装了数组元素的访问，C/C++中直接翻译为对数组指针的移动。 在Java语言里，发生数组越界时会抛出<code>java.lang.ArrayIndexOutOfBoundsException</code>异常，避免非法内存访问。</li></ul></li><li><strong>例3：引用常量不会触发定义常量的类的初始化</strong><ul><li>因为常量在编译阶段就会被存入调用类的常量池中。</li></ul></li></ul><p><strong>3、接口的“加载与初始化”与类的差异</strong></p><p>接口的加载与初始化过程与类略有不同，差异如下：</p><ul><li><strong>静态变量的初始化：</strong> 虽然接口不能使用静态语句块<code>static{}</code>来输出初始化信息，编译器仍会为接口生成<code>&lt;clinit&gt;()</code> 类构造器，用于初始化接口中定义的静态变量。</li><li><strong>初始化触发条件：</strong> 类的初始化需要其所有父类已经初始化，而接口的初始化则不要求其父接口全部初始化。接口只有在实际使用父接口中的成员（如引用接口中定义的常量）时，才会进行初始化。</li></ul><h2 id="类加载的过程" tabindex="-1"><a class="header-anchor" href="#类加载的过程"><span>类加载的过程</span></a></h2><p>Java类加载过程主要分为加载、连接（验证、准备、解析）、初始化三个阶段。</p><h3 id="加载" tabindex="-1"><a class="header-anchor" href="#加载"><span>加载</span></a></h3><p>在加载阶段，Java虚拟机需要完成以下三件事情：</p><blockquote><ol><li>通过类的全限定名获取定义此类的二进制字节流。</li><li>并将字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</li></ol></blockquote><p><strong>类文件读取来源：</strong></p><p>通常包括本地文件系统、压缩文件（如JAR、WAR）、网络、数据库、加密文件（防止反编译）、运行时动态生成，以及由其他文件生成（如JSP应用生成的Class文件）。</p><p><strong>数组类的加载过程：</strong></p><p>数组类本身不通过类加载器创建，而是由Java虚拟机直接在内存中构建出来。但数组类的元素类型最终还是靠类加载器来完成加载。</p><p><strong>加载与连接阶段的顺序：</strong></p><p>加载阶段与连接阶段的一些动作（如部分字节码文件格式验证）交叉进行，加载阶段尚未完成时，连接阶段可能已开始。尽管如此，这些交叉进行的动作仍属于连接阶段的一部分，加载和连接阶段的开始时间顺序固定。</p><h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证"><span>验证</span></a></h3><blockquote><p>验证是连接阶段的第一步，目的是确保字节码的正确性和安全性，包括文件格式验证、元数据验证、字节码验证和符号引用验证四个阶段。</p></blockquote><p>验证阶段大致上会完成下面四个阶段的检验动作：</p><ol><li><strong>文件格式验证：</strong> 基于二进制字节流进行，只有通过验证，才允许进入JVM内存中的方法区进行存储。 <ul><li>检查魔数，是否以<code>0xCAFEBABE</code>开头。</li><li>检查版本号，是否在当前JVM接受范围之内。</li><li>检查常量池，检查常量类型<code>tag</code>标志，并验证<code>CONSTANT_Utf8_info</code>中的字符串是否符合UTF-8编码。</li><li>检查访问标志，是否符合规范，存在不合法的组合。</li><li>Class文件中各个部分及文件本身是否有被删除的或附加的其他信息</li></ul></li><li><strong>元数据验证：</strong> 对类的元数据信息进行语义校验，保证不存在与《Java语言规范》定义相悖的元数据信息 <ul><li>检查类是否有父类（除了<code>java.lang.Object</code>之外，所有的类都应有父类）。</li><li>检查父类是否继承了不允许被继承的类（被<code>final</code>修饰的类）。</li><li>检查非抽象类是否实现了父类或接口中要求实现的所有方法。</li><li>检查类中的字段和方法是否与父类产生冲突（如覆盖<code>final</code>字段，或方法重载参数一致但返回值类型不同）。</li></ul></li><li><strong>字节码验证：</strong> 通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。 <ul><li>检查操作数栈中的数据类型与指令代码是否配合得当，避免在操作栈中放置<code>int</code>类型数据但按<code>long</code>类型加载到本地变量表。</li><li>检查跳转指令是否跳转到方法体以外的字节码指令上。</li><li>检查方法体中的类型转换是否合法，例如子类对象可以赋值给父类类型，但父类对象赋值给子类类型或毫无继承关系的类型是不合法的。</li></ul></li><li><strong>符号引用验证：</strong> 确保解析行为能正常执行。 <ul><li>检查符号引用中通过字符串描述的全限定名是否能找到对应的类。</li><li>检查指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。</li><li>检查符号引用中的类、字段、方法的可访问性（<code>private</code>、<code>protected</code>、<code>public</code>、<code>&lt;package&gt;</code>）是否可被当前类访问。</li></ul></li></ol><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h3><h3 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h3><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器</span></a></h2>',33),c=[i];function n(s,d){return t(),l("div",null,c)}const g=e(o,[["render",n],["__file","classload.html.vue"]]),h=JSON.parse('{"path":"/md/jvm/classload.html","title":"类加载机制","lang":"zh-CN","frontmatter":{"title":"类加载机制","description":"类加载机制 类的生命周期 类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。 类的生命周期类的生命周期 注：并非所有的类都会经历完整的生命周期，有些类可能在某些阶段就结束其在JVM中的生涯。 1、初始化时机的六种情况称为“主动引用” 在Java虚拟机规范中，“有且只有”以下六种情况会触发类的初始化，称为对一个类的主...","author":"会敲代码的程序猿","isOriginal":true,"date":"2024-07-20T00:00:00.000Z","category":"JVM","tag":"JVM","order":3,"head":[["meta",{"property":"og:url","content":"https://www.geekyspace.cn/md/jvm/classload.html"}],["meta",{"property":"og:title","content":"类加载机制"}],["meta",{"property":"og:description","content":"类加载机制 类的生命周期 类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。 类的生命周期类的生命周期 注：并非所有的类都会经历完整的生命周期，有些类可能在某些阶段就结束其在JVM中的生涯。 1、初始化时机的六种情况称为“主动引用” 在Java虚拟机规范中，“有且只有”以下六种情况会触发类的初始化，称为对一个类的主..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.geekyspace.cn/pictures/2024/202407260441081.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-04T20:13:49.000Z"}],["meta",{"property":"article:author","content":"会敲代码的程序猿"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-07-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-04T20:13:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类加载机制\\",\\"image\\":[\\"https://img.geekyspace.cn/pictures/2024/202407260441081.png\\"],\\"datePublished\\":\\"2024-07-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-04T20:13:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会敲代码的程序猿\\"}]}"]]},"headers":[{"level":2,"title":"类的生命周期","slug":"类的生命周期","link":"#类的生命周期","children":[]},{"level":2,"title":"类加载的过程","slug":"类加载的过程","link":"#类加载的过程","children":[{"level":3,"title":"加载","slug":"加载","link":"#加载","children":[]},{"level":3,"title":"验证","slug":"验证","link":"#验证","children":[]},{"level":3,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":3,"title":"解析","slug":"解析","link":"#解析","children":[]},{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]}]},{"level":2,"title":"类加载器","slug":"类加载器","link":"#类加载器","children":[]}],"git":{"createdTime":1722019454000,"updatedTime":1722802429000,"contributors":[{"name":"joeljhou","email":"joeljhou336@gmail.com","commits":6}]},"readingTime":{"minutes":6.42,"words":1927},"filePathRelative":"md/jvm/classload.md","localizedDate":"2024年7月20日","excerpt":"\\n<h2>类的生命周期</h2>\\n<p>类的生命周期分为以下7个阶段，其中解析可以在初始化之后，以支持Java的运行时绑定特性。</p>\\n<figure><img src=\\"https://img.geekyspace.cn/pictures/2024/202407260441081.png\\" alt=\\"类的生命周期\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>类的生命周期</figcaption></figure>\\n<p>注：并非所有的类都会经历完整的生命周期，有些类可能在某些阶段就结束其在JVM中的生涯。</p>\\n<p><strong>1、初始化时机的六种情况称为“主动引用”</strong></p>","copyright":{"author":"会敲代码的程序猿"},"autoDesc":true}');export{g as comp,h as data};
