<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://www.geekyspace.cn/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://www.geekyspace.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>极客空间</title>
    <link>https://www.geekyspace.cn/</link>
    <description>vuepress-theme-hope 的博客搭建</description>
    <language>zh-CN</language>
    <pubDate>Wed, 03 Apr 2024 04:13:01 GMT</pubDate>
    <lastBuildDate>Wed, 03 Apr 2024 04:13:01 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Spring</category>
    <category>Spring Boot</category>
    <category>Spring Data</category>
    <category>Java</category>
    <category>程序人生</category>
    <item>
      <title>自动装配协作者</title>
      <link>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-autowire.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-autowire.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">自动装配协作者</source>
      <description>自动装配协作者（Autowiring Collaborators） Spring容器可以自动装配协作Bean之间的关系。 你可以通过检查ApplicationContext的内容，让Spring自动为你的Bean解析协作对象（其他Bean）。 自动装配的优势 减少手动配置：自动装配可以显著减少对手动指定属性或构造方法参数的需求。 其他机制 ，如bean...</description>
      <category>Spring</category>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Spring容器可以自动装配协作Bean之间的关系。
你可以通过检查<code>ApplicationContext</code>的内容，让Spring自动为你的Bean解析协作对象（其他Bean）。</p>
<p><strong>自动装配的优势</strong></p>
<ul>
<li><strong>减少手动配置</strong>：自动装配可以显著减少对手动指定属性或构造方法参数的需求。
<a href="https://docs.spring.io/spring-framework/reference/core/beans/child-bean-definitions.html" target="_blank" rel="noopener noreferrer">其他机制</a>
，如bean模板，在这方面也是非常有价值的。</li>
<li><strong>动态更新配置</strong>：随着项目的发展，对象可能会增加新的依赖。自动装配能够适应这种变化，自动满足新的依赖关系，而无需手动更新配置。
这一点在项目的迭代开发过程中尤为有用。同时，当项目稳定下来后，开发者仍然可以选择切换到显式装配，以获得更精确的控制。</li>
</ul>
<p><strong>四种自动装配模式</strong></p>
<p>在使用XML配置时，
（参阅 <a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html" target="_blank" rel="noopener noreferrer">依赖注入</a>），
可以通过<code>&lt;bean/&gt;</code>元素的<code>autowire</code>属性来定义Bean的自动装配模式。
Spring提供了四种自动装配模式，允许你为每个Bean单独指定使用哪种模式。以下是这四种模式的详细描述：</p>
<p>| 模式          | 描述                                                                                                                                           |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用depends-on</title>
      <link>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-dependson.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-dependson.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">使用depends-on</source>
      <description>使用depends-on 如果一个Bean是另一个Bean的依赖项，这意味着一个Bean被设置为另一个Bean的属性。 可以通过&amp;lt;ref/&amp;gt;元素 来实现这一点。 然而，有时Bean之间的依赖关系并不那么直接。 举个例子：当一个类中的静态初始化器需要被触发时，比如数据库驱动程序的注册。 depends-on属性可以强制容器在初始化beanOne Bean...</description>
      <category>Spring</category>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>如果一个Bean是另一个Bean的依赖项，这意味着一个Bean被设置为另一个Bean的属性。
可以通过<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-dependson.html#beans-ref-element" target="_blank" rel="noopener noreferrer">&lt;ref/&gt;元素</a>
来实现这一点。 然而，有时Bean之间的依赖关系并不那么直接。</p>
<p>举个例子：当一个类中的静态初始化器需要被触发时，比如数据库驱动程序的注册。
<code>depends-on</code>属性可以强制容器在初始化<code>beanOne</code> Bean之前先初始化指定的<code>manager</code> Bean。
以下示例使用<code>depends-on</code>属性来表达对单个Bean的依赖：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ManagerBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>要表达对多个Bean的依赖，可以将多个Bean名称作为<code>depends-on</code>属性的值提供（通过逗号、空格和分号进行分隔）：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager,accountDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ManagerBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.jdbc.JdbcAccountDao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><blockquote>
<p><code>depends-on</code>属性不仅可以指定初始化时的依赖关系，而且在
<a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton" target="_blank" rel="noopener noreferrer">单例</a>
Bean的情况下，还可以指定相应的销毁时依赖关系。
<code>depends-on</code>指定的依赖Bean会在给定Bean本身被销毁之前被首先销毁。因此，<code>depends-on</code>也可以控制关闭顺序。</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>懒加载（Lazy Initialization）Bean</title>
      <link>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-lazy-init.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-lazy-init.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">懒加载（Lazy Initialization）Bean</source>
      <description>懒加载（Lazy Initialization）Bean 在Spring框架中，ApplicationContext的默认行为是在启动过程中立即创建并配置所有的单例Bean。 这种做法有利于及时发现配置错误或环境问题，避免了错误在应用运行一段时间后才暴露。 然而，如果需要改变这一行为，可以通过设置Bean定义为懒加载（lazy-initialized）...</description>
      <category>Spring</category>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在Spring框架中，<code>ApplicationContext</code>的默认行为是在启动过程中立即创建并配置所有的单例Bean。
这种做法有利于及时发现配置错误或环境问题，避免了错误在应用运行一段时间后才暴露。
然而，如果需要改变这一行为，可以通过设置Bean定义为懒加载（lazy-initialized）来实现。
这样一来，Bean的实例化将被推迟到第一次实际请求该Bean时进行，而不是在应用启动时完成，从而提供了更大的灵活性和控制。</p>
<p>在XML中，通过<code>&lt;bean/&gt;</code>元素上的<code>lazy-init</code>属性来控制这种行为，如下例所示：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 将Bean定义为懒加载 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.ExpensiveToCreateBean<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 默认立即创建Bean --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>not.lazy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.AnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>当上述配置被<code>ApplicationContext</code>加载启动时，<code>lazy</code> Bean不会立即预实例化，而<code>not.lazy</code> Bean则会被急切地预实例化。</p>
<p>然而，当一个懒加载的Bean作为另一个未标记为懒加载单例Bean的依赖项时，<code>ApplicationContext</code>会在启动时创建这个懒加载的Bean，
因为它必须满足单例Bean的依赖关系。懒加载的Bean会被注入到一个未标记为懒加载的单例Bean中。</p>
<p>你还可以通过在<code>&lt;beans/&gt;</code>元素上使用<code>default-lazy-init</code>属性来控制容器级别的懒加载初始化，如下例所示：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">default-lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 不会预实例化任何Bean... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>方法注入</title>
      <link>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-method-injection.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-method-injection.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">方法注入</source>
      <description>方法注入</description>
      <category>Spring</category>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>依赖和配置详解</title>
      <link>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-properties-detailed.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-properties-detailed.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">依赖和配置详解</source>
      <description>依赖和配置详解 正如前一节所述，您可以将Bean属性和构造函数参数定义为对其它托管Bean（协作者）的引用或内联定义的值。 Spring基于XML的配置元数据支持&amp;lt;property/&amp;gt;和&amp;lt;constructor-arg/&amp;gt;元素内的子元素类型，以达到这个目的。 字面值 (基本类型、 String 等) &amp;lt;property/&amp;gt;元素的value属性指定了一个...</description>
      <category>Spring</category>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>正如前一节所述，您可以将<code>Bean</code>属性和构造函数参数定义为对其它<mark>托管Bean（协作者）的引用</mark>或<mark>内联定义的值</mark>。
Spring基于XML的配置元数据支持<code>&lt;property/&gt;</code>和<code>&lt;constructor-arg/&gt;</code>元素内的子元素类型，以达到这个目的。</p>
<h2>字面值 (基本类型、 String 等)</h2>
<p><code>&lt;property/&gt;</code>元素的<code>value</code>属性指定了一个属性或构造函数参数的可读字符串表示。
Spring使用 <a href="https://docs.spring.io/spring-framework/reference/core/validation/convert.html#core-convert-ConversionService-API" target="_blank" rel="noopener noreferrer">转换服务</a>
来将这些值从字符串转换为属性或参数的实际类型。以下示例展示了设置各种值的方式：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 调用 setDriverClassName(String) 方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>misterkaoli<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>以下示例使用了<a href="#%E4%BD%BF%E7%94%A8p-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84xml%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F">p-命名空间</a>，使得 XML 配置更加简洁：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span>
          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mydb<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>misterkaoli<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>前面的 XML 更加简洁。但是，拼写错误是在运行时而不是设计时被发现。
除非你使用支持在创建 Bean 定义时进行自动属性完成的集成开发环境（例如<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener noreferrer">IntelliJ IDEA</a>
或<a href="https://spring.io/tools" target="_blank" rel="noopener noreferrer">Spring Tools for Eclipse</a>），强烈建议使用这类 IDE 的帮助。</p>
<p>你也可以配置一个<code>java.util.Properties</code>实例，示例如下：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappings<span class="token punctuation">"</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.PropertySourcesPlaceholderConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 作为 java.util.Properties 类型 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>
            jdbc.driver.className=com.mysql.jdbc.Driver
            jdbc.url=jdbc:mysql://localhost:3306/mydb
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Spring容器会利用JavaBeans的<code>PropertyEditor</code>机制，将<code>&lt;value/&gt;</code>元素内的文本转换为<code>java.util.Properties</code>实例。
这是一个很好的快捷方式，Spring团队中在一些场景中更倾向于使用嵌套的<code>&lt;value/&gt;</code>元素而不是<code>value</code>属性的方式。</p>
<h3>idref元素</h3>
<p><code>idref</code>元素仅仅是将容器中另一个<code>Bean</code>的id（一个字符串值，而不是引用）
传递给<code>&lt;constructor-arg/&gt;</code>或<code>&lt;property/&gt;</code>元素的一种防错方式。下面的例子展示了如何使用它。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theTargetBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theClientBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>targetName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theTargetBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>上面的 Bean 定义片段（在运行时）与以下代码片段完全等价：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theTargetBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>targetName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theTargetBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>第一种形式比第二种形式好，使用<code>idref</code>标签可以在部署时验证引用的<code>Bean</code>是否存在，
避免在第二种情况下，当实例化时才发现拼写错误或不存在的引用（并且可能导致致命的结果）。这提高了配置文件的可靠性和易读性。</p>
<blockquote>
<p>4.0 版Bean XSD中，不再支持<code>idref</code>元素上的<code>local</code>属性，因为它与常规的Bean引用没有区别。
在升级到4.0模式时，将你现有的<code>idref</code>局部引用改为<code>idref bean</code>。</p>
</blockquote>
<p><code>&lt;idref/&gt;</code>元素带来价值的一个常见地方（至少在早于Spring 2.0的版本中）是在<code>ProxyFactory</code> Bean
定义中配置 <a href="https://docs.spring.io/spring-framework/reference/core/aop-api/pfb.html#aop-pfb-1" target="_blank" rel="noopener noreferrer">AOP interceptor（拦截器）</a>
。当你指定拦截器名称时，使用<code>&lt;idref/&gt;</code>元素可以防止你把拦截器的ID拼错。</p>
<h2>对其他Bean的引用（协作者）</h2>
<p><strong><code>ref</code>元素使用<code>bean</code>属性引用其他Bean</strong></p>
<p><code>ref</code>元素作为<code>&lt;constructor-arg/&gt;</code>或<code>&lt;property/&gt;</code>定义元素的子元素，可以将一个Bean的属性值设置为容器管理的另一个Bean（协作者）的引用。
这个被引用的Bean是依赖项，它将在属性设置之前被初始化。（如果这个协作者Bean是单例的，可能被容器进行预先初始化）
作用域（scope）和验证取决于你是否通过<code>bean</code>或<code>parent</code>属性指定了其他对象的ID或名称。</p>
<p>最常见的使用方式是通过<code>&lt;ref/&gt;</code>标签的<code>bean</code>属性来指定目标Bean。
这样做可以创建对同一容器或父容器中任何<code>Bean</code>的引用，无论它们是否定义在同一个XML文件中。
使用<code>bean</code>属性时，你可以指定目标Bean的<code>id</code>或<code>name</code>属性中的一个值。</p>
<p>以下是一个使用<code>&lt;ref/&gt;</code>元素的例子：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p><strong><code>ref</code>元素使用<code>parent</code>属性引用父容器中的Bean</strong></p>
<p>通过<code>parent</code>属性，可以创建对当前容器的父容器中的Bean的引用。
<code>parent</code>属性的值可以与目标<code>Bean</code>的<code>id</code>属性或<code>name</code>属性中的一个值相同。 目标<code>Bean</code>必须在当前容器的父容器中。
这种方式特别适用于当你有一个容器层次结构，并且希望在子容器中引用父容器中的 Bean 时，且代理具有与父 Bean 具有相同名称的 Bean。</p>
<p>以下是如何使用<code>parent</code>属性的示例：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 在父容器中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.SimpleAccountService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 根据需要在此处插入依赖项 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 在子容器（后代）上下文中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">&lt;!--</span> <span class="token attr-name">bean名称与父bean相同</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
    class="org.springframework.aop.framework.ProxyFactoryBean"&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 注意我们是如何引用父bean的 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 插入其他配置和依赖项 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><blockquote>
<p>4.0 版Bean XSD中，<code>ref</code>元素上的<code>local</code>属性不在支持，因为它与常规的Bean引用没有区别。
在升级到4.0模式时，将你现有的<code>ref</code>局部引用改为<code>idref bean</code>。</p>
</blockquote>
<h2>内部 Bean</h2>
<p>在<code>&lt;property/&gt;</code>或<code>&lt;constructor-arg/&gt;</code>元素内部使用<code>&lt;bean/&gt;</code>元素定义了一个内部Bean，如下例所示。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 不使用对目标 Bean 的引用，而是直接内联定义目标 Bean --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 这是内部 Bean --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Fiona Apple<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>内部Bean定义不需要指定ID或名称。如果指定了，容器不会将它们作标识符。
容器在创建时也会忽略作用域（scope）标志，因为内部Bean总是匿名的，并且始终与外部Bean一起创建。
无法独立地访问内部Bean，也无法将其注入到除封闭Bean之外的其他协作Bean中。</p>
<p>作为一个特例，可以从自定义作用域（scope）中接收销毁回调，例如，对于包含在单例Bean中的请求作用域（scope）的内层Bean。
内层Bean实例的创建与其包含的Bean相关联，但是销毁回调允许它参与到请求作用域（scope）的生命周期中。
这并不是一种常见的情况。内层Bean通常只是简单地共享其包含Bean的作用域（scope）。</p>
<h2>集合（Collection）</h2>
<p><code>&lt;list/&gt;</code>、<code>&lt;set/&gt;</code>、<code>&lt;map/&gt;</code>和<code>&lt;props/&gt;</code> 元素分别用于设置 Java 集合类型<code>List</code>、<code>Set</code>、<code>Map</code>和<code>Properties</code>的属性和参数。</p>
<p>以下示例展示了如何使用它们：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>moreComplexObject<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.ComplexObject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 调用 setAdminEmails(java.util.Properties) 方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adminEmails<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>administrator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>administrator@example.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>support@example.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>development@example.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 调用 setSomeList(java.util.List) 方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>a list element followed by a reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 调用 setSomeMap(java.util.Map) 方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>an entry<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>just some string<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a ref<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 调用 setSomeSet(java.util.Set) 方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someSet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>just some string<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>Map</code>的键值对中的值、或者<code>Set</code>中的元素，可以是以下任一元素：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>bean | ref | idref | list | set | map | props | value | null
</code></pre></div><h3>集合合并（merging）</h3>
<p>Spring 容器还支持集合合并。开发者可以定义一个父级<code>&lt;list/&gt;</code>、<code>&lt;map/&gt;</code>、<code>&lt;set/&gt;</code>或<code>&lt;props/&gt;</code>元素，
并让子级<code>&lt;list/&gt;</code>、<code>&lt;map/&gt;</code>、<code>&lt;set/&gt;</code> 或 <code>&lt;props/&gt;</code>元素继承并覆盖父集合中的值。</p>
<p>也就是说，子集合的值是合并父子集合的元素后的结果，其中子集合的元素会覆盖在父集合中指定的值。
这部分关于合并（merging）的内容讨论了父子Bean机制。对于不熟悉父子Bean定义的读者，建议在继续阅读之前阅读<a href="https://docs.spring.io/spring-framework/reference/core/beans/child-bean-definitions.html" target="_blank" rel="noopener noreferrer">相关章节</a>。</p>
<p>以下示例演示了集合合并（merging）：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 父 Bean 定义 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.ComplexObject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adminEmails<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>administrator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>administrator@example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>support@example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 子 Bean 继承父 Bean 定义 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>adminEmails<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- merge 在子集合定义上进行了指定 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span> <span class="token attr-name">merge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sales<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>sales@example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>support@example.co.uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>请注意，在子Bean定义的<code>adminEmails</code>属性的<code>&lt;props/&gt;</code>元素上使用了<code>merge=true</code>属性。
当容器解析并实例化子Bean时，生成的实例具有一个<code>adminEmails Properties</code>集合，
该集合是合并子Bean的 <code>adminEmails</code>集合与父Bean的<code>adminEmails</code>集合的结果。</p>
<p>以下列表显示了合并的结果：</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">administrator</span><span class="token punctuation">=</span><span class="token value attr-value">administrator@example.com</span>
<span class="token key attr-name">sales</span><span class="token punctuation">=</span><span class="token value attr-value">sales@example.com</span>
<span class="token key attr-name">support</span><span class="token punctuation">=</span><span class="token value attr-value">support@example.co.uk</span>
</code></pre></div><p>子代<code>Properties</code>集合的值集继承了父<code>&lt;props/&gt;</code>中的所有属性元素，并且子集合中对于<code>support</code>键的值会覆盖父代集合中的值。</p>
<p>这种合并行为同样适用于<code>&lt;list/&gt;</code>、<code>&lt;map/&gt;</code> 和 <code>&lt;set/&gt;</code>等集合类型。在<code>&lt;list/&gt;</code>元素的特定情况下，与List集合类型相关的语义（即有序值集合的概念）被保留。
父集合的值位于子列表所有值之前。对于Map、Set和Properties集合类型，不存在任何排序。因此，在容器内部使用的关于
Map、Set和Properties实现的集合类型，没有排序语义。</p>
<h3>集合合并的限制</h3>
<p>你不能合并不同的集合类型（例如 Map 和 List）。如果你试图这样做，会抛出一个适当的<code>Exception</code>异常。
合并属性（merge attribute）必须在较低层级、被继承的子定义上指定。
在父级集合定义上指定<code>merge</code>属性是多余的，不会产生期望的合并行为。</p>
<h3>强类型集合</h3>
<p>得益于Java的泛型特性，你能够创建特定类型的强类型的集合（Collection）。
例如，可以声明一个Collection类型，使其只能包含（例如）String元素。
当你通过Spring进行依赖注入时，Spring的类型转换功能将确保Collection中的元素在添加之前被自动转换为正确的类型。</p>
<p>以下示例 Java 类和 Bean 定义展示了如何实现这一点：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccounts</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>accounts <span class="token operator">=</span> accounts<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>something<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.SomeClass<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>9.99<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.75<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>six<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.99<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>当准备注入<code>something</code> Bean 的<code>accounts</code>属性时，关于强类型<code>Map&lt;String, Float&gt;</code>的元素类型的泛型信息可通过反射获得。
因此，Spring 的类型转换基础设施能够识别出这些值元素属于 <code>Float</code> 类型，并将字符串值（9.99、2.75 和 3.99）转换为实际的 <code>Float</code> 类型。</p>
<h2>Null和空字符串值</h2>
<p>Spring 将属性等的空参数视为空字符串。下面这个基于XML的配置元数据片段将<code>email</code>属性设置为空字符串值（<code>""</code>）。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>上述示例等同于以下Java代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>exampleBean<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>使用 p-命名空间</h2>
<p>p-命名空间提供了一种便捷的XML配置方式，允许你直接在<code>bean</code>
元素的属性中定义属性值或引用其他Bean，而无需使用嵌套的<code>&lt;property/&gt;</code>标签。</p>
<p>Spring框架支持通过XML Schema定义的扩展配置格式和命名空间。
虽然<code>beans</code>的配置格式在XML Schema文档中有所定义，但p-命名空间并未在XSD文件中声明，它是Spring框架内部的一个特性。</p>
<p><strong>简化bean属性设置</strong></p>
<p>以下是一个示例，展示了两种不同的XML配置片段（标准XML格式和使用p-命名空间的格式），它们将产生相同的配置结果：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 用于bean设置的标准XML配置 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classic<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someone@somewhere.com<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 用于bean设置的p-命名空间快捷方式 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p-namespace<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.ExampleBean<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>email</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someone@somewhere.com<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这个示例展示了在Bean定义中，p-命名空间中有一个名为<code>email</code>的属性。这告诉Spring要包含一个属性声明。
如前所述，p-命名空间没有Schema定义，所以你可以直接使用属性名作为属性值，而无需按照常规方式指定属性值。</p>
<p><strong>简化bean属性引用</strong></p>
<p>以下示例包含了两个bean定义，它们都引用了另一个bean：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 用于bean引用的标准XML配置 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>john-classic<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spouse<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jane<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 用于bean引用的p-命名空间快捷方式 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>john-modern<span class="token punctuation">"</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">p:</span>spouse-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jane<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- 另一个bean定义，名称为jane --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jane<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jane Doe<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>此示例不仅使用p-命名空间声明了属性值，还使用了一种特殊的格式来声明属性的引用。
第一个bean定义使用了传统的</p>
<ul>
<li><code>p:name</code>：这是使用p-命名空间设置name属性值的简洁方式</li>
<li><code>p:spouse-ref</code>：这是使用p-命名空间声明spouse属性的引用，<code>-ref</code>后跟被引用Bean</li>
</ul>
<blockquote>
<p>注意⚠️：p-命名空间不如标准XML格式灵活。例如，声明属性引用的格式与以<code>Ref</code>结尾的属性发生冲突，而标准XML格式则不会。
我们建议你谨慎选择这种方式，并将此决策传达给你的团队成员，以避免同时使用这三种格式的XML文档。</p>
</blockquote>
<h2>使用 c-命名空间</h2>
<p>与带有<a href="#%E4%BD%BF%E7%94%A8-p-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">p-命名空间的XML快捷方式</a>类似，
Spring 3.1中引入的c-命名空间，允许使用内联属性来配置构造函数参数，而不是嵌套的<code>constructor-arg</code>元素。</p>
<p>以下示例使用c-命名空间来实现与基于构造函数依赖注入相同的功能：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
	<span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
	<span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>
	<span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingTwo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanThree<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingThree<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

	<span class="token comment">&lt;!-- 传统的声明，可以使用可选的参数名称 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingOne<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thingTwo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thingThree<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanThree<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>something@somewhere.com<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

	<span class="token comment">&lt;!-- 使用c-命名空间声明参数名称 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingOne<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>thingTwo-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span>
		<span class="token attr-name"><span class="token namespace">c:</span>thingThree-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanThree<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>email</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>something@somewhere.com<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>c-命名空间与p-命名空间使用相同的约定（以<code>-ref</code>结尾表示Bean引用）来通过名称设置构造函数参数。
同样，即使c-命名空间在XSD模式中未定义（它存在于Spring核心中），但在XML文件中仍然需要声明。</p>
<p>对于构造函数参数名称不可用的罕见情况（通常是因为字节码是在没有调试debug信息的情况下编译的），可以使用参数索引（下标）作为备用，如下所示：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- c-namespace索引声明 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingOne<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>_0-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>_1-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanThree<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">c:</span>_2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>something@somewhere.com<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><blockquote>
<p>由于XML语法限制，索引表示法需要以下划线（_）开头，因为XML属性名不能以数字开头（尽管一些IDE允许这样做）。
对于<code>&lt;constructor-arg&gt;</code>元素，也有相应的索引表示法可用，但并不常用，因为通常情况下，普通的声明顺序已经足够了。</p>
</blockquote>
<p>在实践中，构造函数解析机制在匹配参数方面非常高效，因此除非确实需要，我们建议在整个配置中始终使用名称标记。</p>
<h2>复合属性名</h2>
<p>在设置Bean属性时，只要路径中除最终属性名外的所有组件不为null，就可以使用复合或嵌套的属性名称。以下是一个Bean定义的示例：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>something<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>things.ThingOne<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fred.bob.sammy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>在这个示例中，<code>something</code> Bean有一个<code>fred</code>属性，该属性又有一个<code>bob</code>属性，属性下又有一个<code>sammy</code>属性，最终<code>sammy</code>属性被设置为值 123。
为了使这个设置生效，除了最终的属性名<code>sammy</code>外，要保证路径中的所有属性不为 <code>null</code>。否则，将抛出 NullPointerException 异常。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Bean 定义</title>
      <link>https://www.geekyspace.cn/spring-framework/core/beans-definition.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/beans-definition.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Bean 定义</source>
      <description>Bean 定义 概述 构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。 在容器中，Bean的定义表示为org.springframework.beans.factory.config.BeanDefinition对象。 BeanDefinition包含以下元数据： 全路径类名：通常，被定义为Bean的实现类 行为配置元素：说明了...</description>
      <category>Spring</category>
      <pubDate>Mon, 18 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>概述</h2>
<blockquote>
<p>构建应用程序主干并由Spring IoC 容器管理的对象称为 Bean。</p>
<p>在容器中，Bean的定义表示为<code>org.springframework.beans.factory.config.BeanDefinition</code>对象。</p>
</blockquote>
<p><strong>BeanDefinition包含以下元数据：</strong></p>
<ul>
<li><strong>全路径类名</strong>：通常，被定义为Bean的实现类</li>
<li><strong>行为配置元素</strong>：说明了Bean在容器中的行为方式，例如作用域scope、生命周期回调等</li>
<li><strong>依赖关系</strong>：描述Bean与其他Bean之间的依赖关系，包括依赖注入，依赖查找等</li>
<li>其他配置信息：如：管理连接池的Bean可以配置pool的大小限制，使用的连接数量等</li>
</ul>
<p>该元数据转换为组成每个Bean定义的一组属性。 下表介绍了这些属性：</p>
<p>| 属性                       | 描述           |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>依赖</title>
      <link>https://www.geekyspace.cn/spring-framework/core/dependencies/</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/dependencies/</guid>
      <source url="https://www.geekyspace.cn/rss.xml">依赖</source>
      <description>依赖 企业应用程序通常不是由单个对象（或Spring术语中的Bean）构成的。 即使是最简单的应用程序，也是由多个对象共同协作来呈现给最终用户一个连贯的应用体验。 下一节将解释如何从定义独立的Bean开始，逐步实现一个完整的应用程序。 在这个应用程序中，各个对象将相互协作，实现一个共同的目标。 章节摘要</description>
      <category>Spring</category>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>企业应用程序通常不是由单个对象（或<code>Spring</code>术语中的<code>Bean</code>）构成的。
即使是最简单的应用程序，也是由多个对象共同协作来呈现给最终用户一个连贯的应用体验。</p>
<p>下一节将解释如何从定义独立的Bean开始，逐步实现一个完整的应用程序。
在这个应用程序中，各个对象将相互协作，实现一个共同的目标。</p>
<h2>章节摘要</h2>
<ul>
<li><a href="/spring-framework/core/dependencies/factory-collaborators.html" target="_blank">依赖注入</a></li>
<li><a href="/spring-framework/core/dependencies/factory-properties-detailed.html" target="_blank">依赖和配置详解</a></li>
<li><a href="/spring-framework/core/dependencies/factory-dependson.html" target="_blank">使用depends-on</a></li>
<li><a href="/spring-framework/core/dependencies/factory-lazy-init.html" target="_blank">懒加载Bean</a></li>
<li><a href="/spring-framework/core/dependencies/factory-autowire.html" target="_blank">自动装配协作者</a></li>
<li><a href="/spring-framework/core/dependencies/factory-method-injection.html" target="_blank">方法注入</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>依赖注入</title>
      <link>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-collaborators.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/dependencies/factory-collaborators.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">依赖注入</source>
      <description>依赖注入 依赖注入（DI）是什么？ Spring IoC（控制反转）也被称为依赖注入（DI） 它是一个过程，对象仅通过构造参数、工厂方法参数或在对象实例被构造函数或工厂方法返回后，在其上设置的属性来定义它们的依赖关系。 在IoC容器创建Bean时，它会自动注入这些依赖项。 不再需要通直接构造依赖项或使用服务定位器模式等方式来管理对象的实例化或位置， 而...</description>
      <category>Spring</category>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>依赖注入（DI）是什么？</h2>
<p><strong>Spring IoC（控制反转）也被称为依赖注入（DI）</strong></p>
<p>它是一个过程，对象仅通过构造参数、工厂方法参数或在<strong>对象实例</strong>被构造函数或工厂方法返回后，在其上设置的属性来定义它们的依赖关系。
在IoC容器创建Bean时，它会自动注入这些依赖项。 不再需要通<code>直接构造依赖项</code>或使用<code>服务定位器模式</code>等方式来管理对象的实例化或位置，
而是交由IoC容器来管理，因此称为<strong>控制反转</strong>。</p>
<p><strong>DI解耦</strong></p>
<p>采用依赖注入（DI）原则，可以使代码更干净简洁，同时也更有效地解耦。
通过DI，对象不需要查找其依赖，也不知道依赖的位置或类别。
因此，你的类变得更易于测试，特别是当依赖是在接口或抽象基类上时，可以使用<code>stub</code>或<code>mock</code>进行单元测试。
这种方式使代码更加整洁，同时也更符合面向对象的设计原则。</p>
<p>DI有两个主要的变体。 基于<a href="#%E5%9F%BA%E4%BA%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5">构造器的依赖注入</a>和<a href="#%E5%9F%BA%E4%BA%8Esetter%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5">基于Setter的依赖注入</a>。</p>
<h2>基于构造函数的依赖注入</h2>
<p><strong>基于构造函数的依赖注入</strong>是容器（如Spring框架）调用具有多个参数的构造函数来实现，每个参数代表一个依赖项，容器负责在创建Bean时注入这些依赖项。
<strong>与静态工厂方法的比较</strong>构造Bean几乎是等价的。</p>
<p>以下示例通过构造函数进行依赖注入：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token comment">// SimpleMovieLister 依赖于 MovieFinder</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，以便Spring容器可以注入MovieFinder</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleMovieLister</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 省略了实际使用注入的 MovieFinder 的业务逻辑...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个类并没有什么特别之处。它是一个普通的POJO（简单的Java对象），不依赖于容器特定的接口、基类或注解。</p>
<h3>构造函数参数解析</h3>
<p><strong>1.按定义的顺序传递构造函数的参数（参数无歧义时）</strong></p>
<p>构造函数参数的解析匹配是通过使用参数的类型来完成的。
如果Bean定义中的构造函数参数不存在歧义， 那么构造函数参数的顺序就是Bean定义中的定义顺序。
这样在实例化Bean时，Spring IoC容器就会按照定义的顺序传递参数。 请考虑以下这个类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">x<span class="token punctuation">.</span>y</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThingOne</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">ThingOne</span><span class="token punctuation">(</span><span class="token class-name">ThingTwo</span> thingTwo<span class="token punctuation">,</span> <span class="token class-name">ThingThree</span> thingThree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>假设<code>ThingTwo</code>和<code>ThingThree</code>类没有继承关系，不存在潜在的歧义。
因此，下面的配置可以正常工作，你不需要在<code>&lt;constructor-arg/&gt;</code>元素中显示指定构造函数参数的索引或类型。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingOne<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanThree<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingTwo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanThree<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x.y.ThingThree<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>2.使用<code>type</code>属性显式指定构造函数参数的类型</strong></p>
<p>当引用另一个Bean时，类型是已知的，并且可以进行匹配（就像前面的例子那样）。
但是，当使用简单类型时，比如<code>&lt;value&gt;true&lt;/value&gt;</code>，Spring不能确定值的类型，所以在没有帮助的情况下不能通过类型进行匹配。
请考虑以下这个类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

	<span class="token comment">// 用于计算终极答案的年数</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> years<span class="token punctuation">;</span>

	<span class="token comment">// 生命、宇宙和万物的终极答案</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在上述情况下，可以通过使用<code>type</code>属性显式指定构造函数参数的类型，容器就对简单类型进行类型匹配，如下例所示：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>42<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>3.使用<code>index</code>属性显示指定构造函数参数的索引</strong></p>
<p>你还可以使用<code>index</code>属性显示指定构造函数参数的索引，如下例所示：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>42<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>除了解决多个简单值的歧义外，指定索引还可以解决构造函数具有两个相同类型参数的歧义问题。</p>
<blockquote>
<p><strong>注意⚠️</strong>：索引（下标）从0开始。</p>
</blockquote>
<p>你还可以使用构造函数的参数名称来消除值的歧义，如下例所示：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>years<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7500000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ultimateAnswer<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>42<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>4.使用<code>@ConstructorProperties</code>指定构造函数参数名称</strong></p>
<p>请记住，要使这一方法开箱即用，代码在编译时必须启用<code>debug</code>标志，以便Spring可以从构造函数中查找参数名称。</p>
<p>如果你不想用<code>debug</code>标志编译你的代码，
可以使用<a href="https://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html" target="_blank" rel="noopener noreferrer">@ConstructorProperties</a>
JDK注解来显式命名你的构造函数参数。 示例类将如下所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">examples</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

	<span class="token comment">// 省略字段</span>

    <span class="token comment">// 指定构造函数属性，以便Spring容器可以注入参数</span>
	<span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"years"</span><span class="token punctuation">,</span> <span class="token string">"ultimateAnswer"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> years<span class="token punctuation">,</span> <span class="token class-name">String</span> ultimateAnswer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> years<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>ultimateAnswer <span class="token operator">=</span> ultimateAnswer<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>基于Setter的依赖注入</h2>
<p><strong>基于Setter的依赖注入（DI）</strong> 是指容器在调用<code>无参构造函数</code>或<code>无参静态工厂方法</code>实例化Bean后，调用Setter方法来实现的。</p>
<p>以下示例展示了一个只能通过Setter进行依赖注入的类。这个类是传统的Java类，是一个普通的POJO，不依赖于容器特定的接口、基类或注解。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>

    <span class="token comment">// SimpleMovieLister 依赖于 MovieFinder</span>
    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>

    <span class="token comment">// Setter方法，以便Spring容器可以注入MovieFinder</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMovieFinder</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 省略了实际使用注入的 MovieFinder 的业务逻辑...</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>ApplicationContext的依赖注入支持</strong>：<code>ApplicationContext</code>在管理的<code>Bean</code>时支持基于构造函数和基于Setter的依赖注入（DI）。
此外，它还支持通过构造函数注入依赖项后，再使用Setter方法注入其他依赖项。
<strong>配置依赖关系和属性转换</strong>：你可以通过<code>BeanDefinition</code>来配置依赖关系，并利用<code>java.beans.PropertyEditor</code>
接口实例将属性值从一种格式转换为另一种格式。
<strong>Spring用户的使用方式</strong>：然而，大多数Spring用户并不直接使用这些类（即以编程方式），而是使用XML Bean定义、
注解组件（即使用<code>@Component</code>、<code>@Controller</code>等注解的类），
或基于Java的<code>@Configuration</code>类中的<code>@Bean</code>方法。
<strong>内部转换为BeanDefinition</strong>：然后，这些来源在内部被转换为<code>BeanDefinition</code>的实例，并用于加载整个Spring IoC容器实例。</p>
<div class="hint-container tip">
<p class="hint-container-title">基于构造器的DI还是基于Setter的DI？</p>
<p>通常建议对于必要的依赖项使用构造函数注入（DI），对于可选的依赖项使用Setter方法或配置方法进行注入。
需要注意的是，在Setter方法上使用<a href="https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html" target="_blank" rel="noopener noreferrer">@Autowired</a>
注解也可以使属性标记为必需的依赖项；但是，带有参数的程序化验证的构造函数注入更为推荐。</p>
<p>Spring团队倡导使用构造函数注入，它允许你将应用程序组件实现为不可变<code>final</code>对象，并确保了所需的依赖项不是<code>null</code>。
此外，构造函数注入组件总是以完全初始化的状态返回给客户端，这有利于提高稳定性和可预测性。</p>
<p>另一方面，Setter注入适用于可选的依赖项，可以在类内部设置默认值。
但是，它需要在整个代码库使用依赖性的地方进行额外的<code>null</code>值检查，以处理依赖项未设置的情况。
通过<a href="https://docs.spring.io/spring-framework/reference/integration/jmx.html" target="_blank" rel="noopener noreferrer">JMX MBean</a>进行管理是Setter注入的一个很好的用例。</p>
<p>在某些情况下，选择构造函数注入或Setter注入可能由类本身决定，特别是当处理没有源代码的第三方类时。
例如，如果第三方类没有暴露任何Setter方法，则构造函数注入可能是唯一可用的DI形式。</p>
</div>
<h2>依赖的解析过程</h2>
<p>容器执行Bean依赖解析的步骤如下：</p>
<ol>
<li><strong>容器初始化</strong>：
<ul>
<li><code>ApplicationContext</code> 是 Spring 容器的接口，用于创建和管理 Bean</li>
<li>配置元数据可以是 XML、Java 代码或注解，它们描述了 Bean 的配置信息</li>
</ul>
</li>
<li><strong>依赖表达方式</strong>：
<ul>
<li>依赖可以表达为属性、构造函数参数或静态工厂方法的参数</li>
<li>Spring 会根据依赖表达方式来创建和注入依赖的 Bean</li>
</ul>
</li>
<li><strong>属性和构造函数参数定义</strong>：
<ul>
<li>属性或构造函数参数可以是值的定义，也可以是对容器中另一个 Bean 的引用</li>
<li><strong>属性值转换</strong>：对于值的定义，Spring 会将以字符串格式提供的值转换为所有内置类型，如<code>int</code>、<code>long</code>、<code>String</code>、<code>boolean</code>等等</li>
</ul>
</li>
<li><strong>容器验证和Bean创建</strong>:
<ul>
<li>容器在创建时，会验证每个Bean的配置</li>
<li>容器被创建时，单例作用域并被设置为预实例化的Bean（默认）被创建。
作用域范围在<a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html" target="_blank" rel="noopener noreferrer">Bean Scope</a>中定义</li>
<li>非单例Bean只有在被请求时才会被创建</li>
</ul>
</li>
<li><strong>Bean的依赖项解析</strong>：
<ul>
<li>创建Bean可能会导致创建Bean Graph，因为Bean的依赖项及其依赖项的依赖项（以此类推）会被创建和分配</li>
</ul>
</li>
<li><strong>注意⚠️：解析不匹配问题</strong>
<ul>
<li>依赖项之间的解析不匹配可能会在创建受影响的 Bean 时才会出现问题</li>
</ul>
</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">循环依赖</p>
<p>循环依赖是指在使用主要基于构造函数的依赖注入时，可能会创建一个无法解决的循环依赖场景。</p>
<p>例如：Class A通过构造函数注入需要Class B的实例，而Class B通过构造函数注入需要Class A的实例。
如果配置Bean A和Bean B相互注入对方，Spring IoC容器会在运行时检测到这种循环引用，并抛出<code>BeanCurrentlyInCreationException</code>
异常。</p>
<p>解决这种问题的一个可能方法是编辑某些类的源代码，改为通过Setter方法配置，而不是构造函数。
另一个方法是避免构造函数注入，只使用Setter注入。换句话说，虽然不推荐，但你可以通过Setter注入配置循环依赖。</p>
<p>与典型情况（没有循环依赖）不同，Bean A和Bean B之间的循环依赖会导致其中一个Bean在自身完全初始化之前被注入到另一个Bean中（经典的鸡生蛋蛋生鸡的情况）。</p>
</div>
<p><strong>Spring容器的行为</strong>： 通常情况下，你可以相信Spring会做正确的事情。
它在容器加载时检测配置问题，例如引用不存在的Bean或存在循环依赖等。
<strong>异常生成可能性</strong>： Spring会尽可能地延迟设置属性和解析依赖，直到真正创建Bean时才会进行。
这意味着，一个正确加载的Spring容器在请求对象时可能会生成异常；例如在创建该对象或其依赖关系时出现问题，Bean由于缺少或无效属性而抛出异常。
<strong>ApplicationContext的预实例化</strong>： 这种潜在的延迟暴露一些配置的情况，是<code>ApplicationContext</code>实现默认预先实例化单例Bean的原因。
在实际创建这些Bean之前，尽管需要花费一些前期时间和内存代价，但这样做可以在创建<code>ApplicationContext</code>时发现配置问题，而不是之后。
<strong>覆盖默认行为</strong>： 你仍然可以覆盖这种默认行为，使得单例Bean延迟（懒加载）初始化，而不是预先实例化。</p>
<h2>依赖注入的例子</h2>
<h3>Setter依赖注入</h3>
<p>以下示例使用基于XML的配置元数据来实现基于Setter的依赖注入。Spring XML配置文件的一小部分如下所示，指定了一些<code>Bean</code>定义：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 使用嵌套的 ref 元素进行Setter注入 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanOne<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 使用更简洁的 ref 属性进行Setter注入 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beanTwo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>integerProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.AnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.YetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>以下示例展示了相应的<code>ExampleBean</code>类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanOne</span><span class="token punctuation">(</span><span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanOne <span class="token operator">=</span> beanOne<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanTwo</span><span class="token punctuation">(</span><span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanTwo <span class="token operator">=</span> beanTwo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIntegerProperty</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>构造函数依赖注入</h3>
<p>在上面的例子中，Setter 方法被声明来匹配 XML 文件中指定的属性。以下示例使用基于构造函数依赖注入（DI）：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 使用嵌套的ref元素进行构造函数注入 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 使用更简洁的ref属性进行构造函数注入 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.AnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.YetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>对应的<code>ExampleBean</code>类如下所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AnotherBean</span> beanOne<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">YetAnotherBean</span> beanTwo<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span>
        <span class="token class-name">AnotherBean</span> anotherBean<span class="token punctuation">,</span> <span class="token class-name">YetAnotherBean</span> yetAnotherBean<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanOne <span class="token operator">=</span> anotherBean<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanTwo <span class="token operator">=</span> yetAnotherBean<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在<code>Bean</code>定义中指定的构造函数参数将作为<code>ExampleBean</code>的构造函数参数使用。</p>
<h3>静态工厂方法依赖注入</h3>
<p>现在考虑这个示例的一个变体，在这个变体中，不是使用构造函数，而是告诉 Spring 调用一个静态工厂方法来返回对象的实例：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createInstance<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.AnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yetAnotherBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.YetAnotherBean<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>以下示例展示了相应的<code>ExampleBean</code>类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">{</span>

	<span class="token comment">// 私有构造函数</span>
	<span class="token keyword">private</span> <span class="token class-name">ExampleBean</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 静态工厂方法；该方法的参数可以被视为返回的Bean的依赖项，</span>
	<span class="token comment">// 不管这些参数实际上是如何使用的。</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExampleBean</span> createInstance <span class="token punctuation">(</span>
		<span class="token class-name">AnotherBean</span> anotherBean<span class="token punctuation">,</span> <span class="token class-name">YetAnotherBean</span> yetAnotherBean<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token class-name">ExampleBean</span> eb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleBean</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 其他操作...</span>
		<span class="token keyword">return</span> eb<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>静态工厂方法的参数由<code>&lt;constructor-arg/&gt;</code>元素提供，与实际使用构造函数时完全相同。
被工厂方法返回的类的类型不一定与包含静态工厂方法的类的类型相同（尽管在这个例子中，它是相同的）。
实例（非静态）工厂方法可以以基本相同的方式使用（除了使用<code>factory-bean</code>属性而不是<code>class</code>属性），因此我们不在此讨论这些细节。</p>
]]></content:encoded>
    </item>
    <item>
      <title>IoC 容器</title>
      <link>https://www.geekyspace.cn/spring-framework/core/ioc-container.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/ioc-container.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">IoC 容器</source>
      <description>IoC 容器 概述 Spring IoC（控制反转）容器是Spring框架的核心。 org.springframework.context.ApplicationContext接口代表Spring IoC容器，负责实例化、配置和组装Bean。 Spring提供了几个 ApplicationContext 接口的实现，在独立应用程序中，最常用的是： Cl...</description>
      <category>Spring</category>
      <pubDate>Mon, 18 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>概述</h2>
<blockquote>
<p>Spring IoC（控制反转）容器是Spring框架的核心。
<code>org.springframework.context.ApplicationContext</code>接口代表Spring IoC容器，负责实例化、配置和组装<code>Bean</code>。</p>
</blockquote>
<p>Spring提供了几个 ApplicationContext 接口的实现，在独立应用程序中，最常用的是：</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener noreferrer">ClassPathXmlApplicationContext</a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html" target="_blank" rel="noopener noreferrer">FileSystemXmlApplicationContext</a></li>
<li>等等</li>
</ul>
<p><strong>支持以XML、Java注释或Java代码作为配置元数据的格式</strong></p>
<p>虽然<code>XML</code>一直是定义配置元数据的传统格式， 但你可以通过提供少量的<code>XML</code>配置来指定容器使用<code>Java注解</code>或<code>Java代码</code>作为元数据格式。
以声明式方式启用对这些元数据格式的支持，从而更灵活地定义应用程序的配置信息。</p>
<p><strong>为Web应用程序提供方便的ApplicationContext实例化</strong></p>
<p>在大多数应用场景中，无需手动编写代码来实例化<strong>Spring IoC</strong>容器；
例如：在Web应用场景中，通常只需要在应用程序的<code>web.xml</code>文件中编写 8
行（或更多）<a href="https://docs.spring.io/spring-framework/reference/core/beans/context-introduction.html#context-create" target="_blank" rel="noopener noreferrer">模板式的Web描述符</a>
即可初始化<code>ApplicationContext</code></p>
<p><strong>解析Spring框架的工作原理：<mark>应用程序类</mark>与<mark>配置元数据</mark>的整合</strong></p>
<p>下图表展示了Spring框架的工作原理高层视图。通过将你的应用程序类与配置元数据结合起来，
一旦<code>ApplicationContext</code>被创建和初始化，你就获得了一个完全配置且可执行的系统或应用程序。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403181756387.png" alt="Spring IoC容器" tabindex="0" loading="lazy"><figcaption>Spring IoC容器</figcaption></figure>
<h2>配置元数据</h2>
<p>如上图所示，Spring IoC容器消费配置元数据。
这种配置元数据代表了你作为一个应用开发者，如何告诉Spring容器在你的应用中实例化、配置和组装对象。</p>
<blockquote>
<p><strong>注意⚠️</strong>：Spring IoC容器本身与实际配置元数据的编写格式完全解耦。
如今，许多开发者选择使用<a href="https://docs.spring.io/spring-framework/reference/core/beans/java.html" target="_blank" rel="noopener noreferrer">基于Java的容器配置</a>
来构建他们的Spring应用程序。</p>
</blockquote>
<p>有关在<code>Spring</code>容器中使用其他形式的元数据信息，参阅：</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html" target="_blank" rel="noopener noreferrer">基于XML的容器配置</a></li>
<li><a href="https://docs.spring.io/spring-framework/reference/core/beans/annotation-config.html" target="_blank" rel="noopener noreferrer">基于注解的容器配置</a>（Spring
2.5开始支持）</li>
<li><a href="https://docs.spring.io/spring-framework/reference/core/beans/java.html" target="_blank" rel="noopener noreferrer">基于Java的容器配置</a>（Spring
3.0开始支持；参阅 <a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener noreferrer">@Configuration</a>, <a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener noreferrer">@Bean</a>,
<a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener noreferrer">@Import</a>,
和 <a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/annotation/DependsOn.html" target="_blank" rel="noopener noreferrer">@DependsOn</a>
注解）</li>
</ul>
<p>Spring的配置包含至少一个，通常是多个<code>&lt;bean&gt;</code>元素。容器必须管理这些定义的bean。</p>
<ul>
<li>XML配置：将这些Bean配置为顶层 <code>&lt;beans/&gt;</code> 元素内的 <code>&lt;bean/&gt;</code> 元素</li>
<li>Java配置：将这些Bean配置为<code>@Configuration</code>类中的<code>@Bean</code>注解的方法</li>
</ul>
<p>这些Bean的定义对应于构成应用程序的实际对象，
如服务层对象，持久层对象（Dao），表示层对象（Web控制器），基础设施对象（JPA EntityManagerFactory），JMS队列等。
通常，人们不会在容器中配置细粒度的<code>domain</code>对象，因为创建和加载<code>domain</code>对象的通常是<code>repository</code>和<code>service</code>层逻辑的责任。</p>
<p>下面的例子显示了基于XML的配置元数据的基本结构：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>(1) (2)
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 更多bean 定义在这里 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ol>
<li><code>id</code>属性是一个字符串，用于<mark>唯一标识</mark>Bean</li>
<li><code>class</code>属性是一个字符串，用于指定Bean的<mark>完整类名</mark>（包括包名）</li>
</ol>
<p><code>id</code>属性的值可以用来指代其他Bean的<code>ref</code>属性，从而实现Bean之间的依赖关系。
参阅 <a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html" target="_blank" rel="noopener noreferrer">依赖</a>。</p>
<h2>实例化容器</h2>
<p>提供给<code>ApplicationContext</code>
构造函数的一条或多条路径是<mark>资源字符串</mark>，它让容器从各种外部资源（如本地文件系统、Java <code>CLASSPATH</code>
等）加载配置元数据。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"services.xml"</span><span class="token punctuation">,</span> <span class="token string">"daos.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote>
<p>了解更多关于<a href="https://docs.spring.io/spring-framework/reference/core/resources.html" target="_blank" rel="noopener noreferrer">资源加载</a>的信息；
它提供了一种简单的方法，可以从<code>URI</code>语法中定义的位置读取<code>InputStream</code>。 特别是，<code>Resource</code>路径被用来构建应用程序上下文， 如
<a href="https://docs.spring.io/spring-framework/reference/core/resources.html#resources-app-ctx" target="_blank" rel="noopener noreferrer">Application Context和资源路径</a>
中所述。</p>
</blockquote>
<p>以下示例显示了<strong>服务层对象</strong><code>services.xml</code> 配置文件：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- services --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>petStore<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.samples.jpetstore.services.PetStoreServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemDao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 更多服务的bean 定义在这里 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>以下示例显示<strong>数据访问对象</strong>（data access object）<code>daos.xml</code> 文件：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.samples.jpetstore.dao.jpa.JpaItemDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这个bean的协作者和配置在这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 更多数据访问对象的bean 定义在这里 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>在前面的示例中，服务层由 <code>PetStoreServiceImpl</code> 类和两个类型为 <code>JpaAccountDao</code> 和 <code>JpaItemDao</code> 的数据访问对象组成（基于JPA对象-关系映射标准）。</p>
<ul>
<li><code>property name</code> 元素指的是<code>JavaBean</code>属性的名称</li>
<li><code>ref</code> 元素指的是引用另一个<code>Bean</code>定义的名称</li>
</ul>
<p><code>id</code> 和 <code>ref</code>元素之间的这种联系，表达了协作对象之间的依赖关系。
有关配置对象依赖项的详细信息，参阅 <a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies.html" target="_blank" rel="noopener noreferrer">依赖</a>。</p>
<h2>使用容器</h2>
<p><code>ApplicationContext</code>是一个高级工厂的接口，能够维护不同Bean及其依赖关系的注册表。
通过使用方法 <code>T getBean(String name, Class&lt;T&gt; requiredType)</code>，你可以检索到Bean的实例。</p>
<p><code>ApplicationContext</code>可以让你读取Bean定义（definition）并访问它们，如下例所示。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建和配置Bean</span>
<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"services.xml"</span><span class="token punctuation">,</span> <span class="token string">"daos.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检索配置的实例</span>
<span class="token class-name">PetStoreService</span> service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"petStore"</span><span class="token punctuation">,</span> <span class="token class-name">PetStoreService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用配置的实例</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getUsernameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>不直接依赖于Spring的API</strong></p>
<blockquote>
<p>理想情况下，应用程序代码不应该直接依赖于Spring的API，而是通过元数据（如自动装配<code>@Autowired</code>注解）声明对特定Bean的依赖。</p>
</blockquote>
<p>虽然 ApplicationContext 接口提供了一些检索 Bean 的方法，如 getBean() 等，但在设计上，应该避免直接依赖这些方法。</p>
<p>例如，Spring与Web框架的集成为各种<strong>Web框架组件</strong>（如Controller控制器和JSF管理的Bean）提供了依赖注入的能力，
使得你可以通过元数据（如<code>@Autowired</code>注解）声明对特定<code>Bean</code>的依赖，而不必直接调用<code>getBean()</code>等方法。
这样可以使代码更加模块化、可维护性更高。</p>
]]></content:encoded>
      <enclosure url="https://img.geekyspace.cn/pictures/2024/202403181756387.png" type="image/png"/>
    </item>
    <item>
      <title>Spring 核心技术</title>
      <link>https://www.geekyspace.cn/spring-framework/core/</link>
      <guid>https://www.geekyspace.cn/spring-framework/core/</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Spring 核心技术</source>
      <description>Spring 核心技术 核心技术 Spring 框架的核心技术主要包括： 依赖注入（dependency injection），也称为控制反转（IoC） 事件（events） 资源（resources） 国际化（i18n） 数据验证（validation） 数据绑定（data binding） 类型转换（type conversion） SpEL（Sp...</description>
      <category>Spring</category>
      <pubDate>Mon, 18 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>核心技术</h2>
<p>Spring 框架的核心技术主要包括：</p>
<ul>
<li><strong>依赖注入（dependency injection），也称为控制反转（IoC）</strong></li>
<li>事件（events）</li>
<li>资源（resources）</li>
<li>国际化（i18n）</li>
<li>数据验证（validation）</li>
<li>数据绑定（data binding）</li>
<li>类型转换（type conversion）</li>
<li>SpEL（Spring Expression Language）</li>
<li><strong>面向切面编程（AOP）</strong></li>
</ul>
<h2>Spring IoC容器和Bean简介</h2>
<p><strong>Spring IoC（控制反转）也被称为依赖注入（DI）</strong></p>
<p>它是一个过程，对象仅通过构造参数、工厂方法参数或在<strong>对象实例</strong>被构造函数或工厂方法返回后，在其上设置的属性来定义它们的依赖关系。
在IoC容器创建Bean时，它会自动注入这些依赖项。 不再需要通<code>直接构造依赖项</code>或使用<code>服务定位器模式</code>等方式来管理对象的实例化或位置，
而是交由IoC容器来管理，因此称为<strong>控制反转</strong>。</p>
<p><a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener noreferrer">org.springframework.beans</a>
和 <a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener noreferrer">org.springframework.context</a>
包是Spring Framework的IoC容器的基础。
<a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener noreferrer">BeanFactory</a>
接口提供了一种高级配置机制，能够管理任何类型的<code>object</code>对象。
<a href="https://docs.spring.io/spring-framework/docs/6.1.5/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener noreferrer">ApplicationContext</a>
是 BeanFactory 的一个子接口。它增加了：</p>
<ul>
<li>与Spring的AOP特性更好的集成</li>
<li><code>Message resource</code>消息资源处理（用于国际化）</li>
<li><code>Event publication</code>事件发布</li>
<li>应用层特定的上下文，例如Web应用程序的<code>WebApplicationContext</code></li>
</ul>
<p>简而言之，<code>BeanFactory</code> 提供了配置框架和基本功能，<code>ApplicationContext</code> 添加了更多企业特定的功能。
<code>ApplicationContext</code> 是 <code>BeanFactory</code> 的一个超集。 在特别要求轻量级应用程序的情况下，可以考虑使用<code>BeanFactory</code>。</p>
<p>想要了解 BeanFactory
参阅 <a href="https://docs.spring.io/spring-framework/reference/core/beans/beanfactory.html" target="_blank" rel="noopener noreferrer">BeanFactory API</a> 。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spring Framework 概述</title>
      <link>https://www.geekyspace.cn/spring-framework/overview/</link>
      <guid>https://www.geekyspace.cn/spring-framework/overview/</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Spring Framework 概述</source>
      <description>Spring Framework 概述 Spring Framework 简介 Spring是一个开源、轻量级、依赖注入(DI)容器和框架，用于构建Java企业应用程序。 Spring 官网：spring.io Spring 中文网：springdoc.cn 为什么使用Spring？ 官网解释：why-spring Spring让Java编程变得更快、...</description>
      <category>Spring</category>
      <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>Spring Framework 简介</h2>
<p>Spring是一个开源、轻量级、依赖注入(DI)容器和框架，用于构建Java企业应用程序。</p>
<ul>
<li>Spring 官网：<a href="https://docs.spring.io/spring-framework/reference/" target="_blank" rel="noopener noreferrer">spring.io</a></li>
<li>Spring 中文网：<a href="https://springdoc.cn/spring/" target="_blank" rel="noopener noreferrer">springdoc.cn</a></li>
</ul>
<h2>为什么使用Spring？</h2>
<blockquote>
<p>官网解释：<a href="https://spring.io/why-spring" target="_blank" rel="noopener noreferrer">why-spring</a></p>
<p>Spring让Java编程变得更快、更容易、更安全。
Spring对速度、简单性和生产力的关注使其成为世界上最受欢迎的Java框架。</p>
</blockquote>
<p>我们使用了许多Spring框架提供的工具，并受益于许多<mark>开箱即用</mark>的解决方案，
无需担心编写大量额外的代码，因此这确实为我们节省了时间和精力。</p>
<h2>核心思想</h2>
<p>Spring的核心思想是 <strong>控制反转（IOC）</strong> 和 <strong>面向切面编程（AOP）</strong>。</p>
<p><strong>控制反转（IoC）</strong></p>
<p>控制反转是一种设计模式，它将对象的创建和对象之间的依赖关系的管理交给了Spring IoC容器。
在传统的开发模式中，对象的创建和对象之间的依赖关系的管理都是由程序员来完成的。</p>
<p><strong>面向切面编程（AOP）</strong></p>
<p>面向切面编程是一种编程范式，它将程序的业务逻辑和系统级服务（如日志，事务，安全等）分开，通过横切关注点的方式来解耦。
在传统的开发模式中，业务逻辑和系统级服务是混在一起的，这样会导致代码的复杂性增加。</p>
<h2>版本支持</h2>
<p>我们建议尽可能从Maven Central升级到最新的<strong>Spring Framework 6.0.x / 5.3.x</strong> 版本</p>
<p>在Spring Framework 6.0中， Spring需要Java 17+。</p>
<ul>
<li>6.2.x (2024年11月) - 下一个功能分支</li>
<li>6.1.x (2023年11月) - 即将推出的功能分支</li>
<li>6.0.x (2022年11月) - 主要生产线，基于JDK 17和Jakarta EE 9</li>
<li>5.3.x - 第五代最终功能分支，长期支持，支持JDK 8、11、17和Java EE 8</li>
<li>4.3.x - EOL (2020年12月31日)，不再提供维护和安全补丁</li>
<li>3.2.x - EOL (2016年12月31日)，不再提供维护和安全补丁</li>
</ul>
<p>您可以在 <a href="https://spring.io/projects/spring-framework#support" target="_blank" rel="noopener noreferrer">spring.io#support</a>上找到有关官方支持日期的更多信息。</p>
<h2>入门指南</h2>
<p>使用<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Spring Boot</a>来快速创建生产就绪的Spring应用程序</p>
<ul>
<li>您可以通过<a href="start.spring.io">start.spring.io</a>生成基本项目</li>
<li>或者遵循"<a href="https://spring.io/guides" target="_blank" rel="noopener noreferrer">入门指南</a>"
之一，例如"<a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener noreferrer">开始构建RESTful Web服务</a>"</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Spring Framework 快速开始</title>
      <link>https://www.geekyspace.cn/spring-framework/overview/quickstart.html</link>
      <guid>https://www.geekyspace.cn/spring-framework/overview/quickstart.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Spring Framework 快速开始</source>
      <description>Spring Framework 快速开始 IntelliJ IDEA 提供的专用项目向导，您能够快速创建Spring应用程序，这也是创建Spring应用程序的最佳方式之一。 参考🚀 ：Jetbrains 创建第一个Spring应用程序 在本教程中，您将学习如何公开HTTP端点并将其映射到一个方法，当用户通过Web浏览器访问时，该方法会向用户返回问候...</description>
      <category>Spring</category>
      <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p><strong>IntelliJ IDEA</strong> 提供的专用项目向导，您能够快速创建Spring应用程序，这也是创建Spring应用程序的最佳方式之一。</p>
</blockquote>
<p>参考🚀 ：<a href="https://www.jetbrains.com/help/idea/your-first-spring-application.html" target="_blank" rel="noopener noreferrer">Jetbrains 创建第一个Spring应用程序</a></p>
<p>在本教程中，您将学习如何公开HTTP端点并将其映射到一个方法，当用户通过Web浏览器访问时，该方法会向用户返回问候信息。</p>
<h2>创建 Spring Boot项目</h2>
<ol>
<li>在主菜单中，转到 <strong>文件(File) | 新建(New) | 项目(Project)</strong></li>
<li>在 <strong>新建项目(New Project)</strong> 对话框中，选择 <code>Spring Initializr</code></li>
<li>指定项目的名称 <mark>spring-boot-tutorial</mark>，单击 <strong>下一步(Next)</strong> 继续</li>
</ol>
<figure><img src="https://img.geekyspace.cn/pictures/2024/spring-new-project-initializr.png" alt="Spring Initializr in the New Project wizard" tabindex="0" loading="lazy"><figcaption>Spring Initializr in the New Project wizard</figcaption></figure>
<ol start="4">
<li>在<strong>Web</strong>组下选择<strong>Spring Web</strong>依赖项，然后单击 <strong>创建(Create)</strong> 生成并设置项目</li>
</ol>
<figure><img src="https://img.geekyspace.cn/pictures/2024/spring-new-project-dependencies.png" alt="Spring Dependencies in the New Project wizard" tabindex="0" loading="lazy"><figcaption>Spring Dependencies in the New Project wizard</figcaption></figure>
<h2>添加 sayHello() 方法</h2>
<p><code>Spring Initializr</code> 会创建一个带有 <code>main()</code> 方法的类来启动你的 Spring 应用程序。</p>
<ol>
<li>转到 "<strong>导航(Navigate) | 文件(File )</strong>"，搜索<code>SpringBootTutorialApplication.java</code>文件并打开</li>
</ol>
<figure><img src="https://img.geekyspace.cn/pictures/2024/spring-boot-tutorial-gotofile.png" alt="Using Go To File to open SpringBootTutorialApplication.java" tabindex="0" loading="lazy"><figcaption>Using Go To File to open SpringBootTutorialApplication.java</figcaption></figure>
<ol start="2">
<li>添加 <code>sayHello()</code> 方法，并包含所有必要的注解和导入：</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>springboottutorial</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootTutorialApplication</span> <span class="token punctuation">{</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootTutorialApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myName"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hello %s!"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div><p><code>sayHello()</code>方法接受一个名字参数，并返回与参数值组合的<code>Hello</code>单词。其余的工作由添加Spring注解来处理：</p>
<ul>
<li><code>@RestController</code>注解将<code>SpringBootTutorialApplication</code>类标记为请求处理程序（<mark>REST控制器</mark>）。</li>
<li><code>@GetMapping("/hello")</code>注解将<code>sayHello()</code>方法<mark>映射</mark>到GET请求的<code>/hello</code>路径。
*<code> @RequestParam</code>注解将名字<strong>方法参数</strong><mark>映射</mark>到<code>myName</code> Web请求参数。如果您在Web请求中未提供<code>myName</code>
参数，则默认为<code>World</code>。</li>
</ul>
<h2>运行Spring应用程序</h2>
<p><strong>IntelliJ IDEA</strong> 创建了一个<code> Spring Boot</code> 运行配置，您可以使用它来运行新 <code>Spring</code> 应用程序。</p>
<ul>
<li>如果选择了运行配置，请按 <code>Shift</code> <code>F10</code>键。</li>
<li>还可以点击 <code>SpringBootTutorialApplication.java</code> 文件<code> main()</code>方法旁边的▶️图标运行。</li>
</ul>
<p>默认情况下，IntelliJ IDEA 会在运行工具窗口中显示你正在运行的 Spring Boot 应用程序。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/spring-boot-demo-run-console_dark.png" alt="The Run tool window with a running Spring Boot application" tabindex="0" loading="lazy"><figcaption>The Run tool window with a running Spring Boot application</figcaption></figure>
<p>控制台选项卡显示 Spring 日志消息的输出。
默认情况下，内置的 Apache Tomcat 服务器正在监听端口 8080。
打开你的网络浏览器并访问 <a href="http://localhost:8080/hello" target="_blank" rel="noopener noreferrer">http://localhost:8080/hello</a>。
如果你操作正确，你应该会看到你的应用程序以 Hello World! 回应。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/spring-boot-web-browser-hello-world.png" alt="Spring Boot Hello World response in the browser" tabindex="0" loading="lazy"><figcaption>Spring Boot Hello World response in the browser</figcaption></figure>
<p>这是默认的响应。你可以在你的网络请求中提供一个参数，让应用程序知道如何适当地问候你。
例如，尝试访问 <a href="http://localhost:8080/hello?myName=Human" target="_blank" rel="noopener noreferrer">http://localhost:8080/hello?myName=Human</a>。</p>
<h2>添加主页</h2>
<p>创建的 Spring Boot 应用程序在 <code>/hello</code> 路径下有一个端点可用。
然而，如果你在 <a href="http://localhost:8080/" target="_blank" rel="noopener noreferrer">http://localhost:8080/</a> 中打开你的应用程序的根上下文，你会收到错误，因为没有定义根资源。
让我们添加一个静态 HTML 首页，其中包含指向你端点的链接。</p>
<ol>
<li>请在 <code>/src/main/resources/static/</code> 下创建 <code>index.html</code> 文件。</li>
<li>你可以修改默认模板或者使用以下 HTML 代码替换它：</li>
</ol>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>您的第一个 Spring 应用程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>问候全世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ifm</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nameForm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nameField<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>应用程序应该怎样称呼您？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nameField<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>问候我！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ifm</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>3.在运行工具窗口中，点击 "<strong>重新运行</strong>" 按钮，或按下 <code>Shift</code> + <code>F10</code>。
现在你的应用程序将会在 <a href="http://localhost:8080/" target="_blank" rel="noopener noreferrer">http://localhost:8080/</a> 上作为根资源提供 <code>index.html</code> 页面。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/image-20240316015405566.png" alt="image-20240316015405566" tabindex="0" loading="lazy"><figcaption>image-20240316015405566</figcaption></figure>
<h2>下一个教程</h2>
<p>这个简单的应用程序演示了如何开始使用 Spring。 要了解 IntelliJ IDEA 如何帮助你编写代码并在运行时管理应用程序，
请参考下一个教程，该教程重点介绍更高级的 <a href="https://www.jetbrains.com/help/idea/spring-support-tutorial.html" target="_blank" rel="noopener noreferrer">Spring 支持功能</a>。</p>
]]></content:encoded>
      <enclosure url="https://img.geekyspace.cn/pictures/2024/spring-new-project-initializr.png" type="image/png"/>
    </item>
    <item>
      <title>Spring Boot 入门教程</title>
      <link>https://www.geekyspace.cn/spring-boot/</link>
      <guid>https://www.geekyspace.cn/spring-boot/</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Spring Boot 入门教程</source>
      <description>Spring Boot 教程</description>
      <category>Spring Boot</category>
      <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>SpringBoot 快速入门</title>
      <link>https://www.geekyspace.cn/spring-boot/quickstart.html</link>
      <guid>https://www.geekyspace.cn/spring-boot/quickstart.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">SpringBoot 快速入门</source>
      <description>SpringBoot 快速入门</description>
      <category>Spring Boot</category>
      <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>Spring Data JPA 快速入门</title>
      <link>https://www.geekyspace.cn/spring-data-jpa/jetbrains/getting-started.html</link>
      <guid>https://www.geekyspace.cn/spring-data-jpa/jetbrains/getting-started.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Spring Data JPA 快速入门</source>
      <description>Spring Data JPA 快速入门 目标： 了解如何使用Spring Data JPA从数据库中存储和检索数据。 参考： Spring Data JPA 官方文档 Jetbrains 官方文档 介绍 Spring Data JPA是一个功能强大的框架，允许用户轻松地与数据库交互，同时最大限度地减少样板代码。 在本教程中，我们将研究如何使用Spri...</description>
      <category>Spring Data</category>
      <pubDate>Thu, 04 Apr 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>目标： 了解如何使用Spring Data JPA从数据库中存储和检索数据。</p>
</blockquote>
<p>参考：</p>
<ul>
<li><a href="https://docs.spring.io/spring-data/jpa/reference/jpa/getting-started.html" target="_blank" rel="noopener noreferrer">Spring Data JPA 官方文档</a></li>
<li><a href="https://www.jetbrains.com/guide/java/tutorials/getting-started-spring-data-jpa/" target="_blank" rel="noopener noreferrer">Jetbrains 官方文档</a></li>
</ul>
<h2>介绍</h2>
<p><a href="https://spring.io/projects/spring-data-jpa" target="_blank" rel="noopener noreferrer">Spring Data JPA</a>是一个功能强大的框架，允许用户轻松地与数据库交互，同时最大限度地减少样板代码。
在本教程中，我们将研究如何使用Spring Data JPA插入数据库并从数据库查询数据。
我们将使用<a href="https://www.jetbrains.com/lp/intellij-frameworks/" target="_blank" rel="noopener noreferrer">IntelliJ IDEA Ultimate</a>创建一个简单的Spring靴子应用程序，以利用其Spring特性支持。</p>
<h2>创建一个新的Spring Boot项目</h2>
<p>首先，在 IntelliJ IDEA Ultimate 中，我们将通过在欢迎屏幕中点击 "<strong>New Project</strong>" 来创建一个新项目。
我们将从左侧菜单中选择 "<strong>Spring Initializr</strong>"。然后，我们将指定项目的名称 - 你可以将其命名为 <mark>SpringDataJPA</mark>。
我们还可以将 "<strong>Group</strong>" 字段更改为我们公司的名称。
对于其余的字段，你可以接受默认值。请随意为你的项目使用最新的 Java 版本。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032048778.png" alt="New Project Window" tabindex="0" loading="lazy"><figcaption>New Project Window</figcaption></figure>
<p>接下来，我们将点击 "<strong>Next</strong>"。</p>
<p>在接下来的窗口中，我们将选择我们可用的最新的 Spring Boot 版本。
然后在 "Dependencies" 下，我们将在搜索框中搜索 "<mark>data</mark>"。
在 SQL 下，我们将从列表中选择 <strong>Spring Data JPA</strong> 和 <strong>H2 Database</strong> 的复选框。
对于本教程，我们将使用 H2 作为我们的数据库，因为它很容易设置。
如果你想使用不同的数据库，比如 MySQL 或 HyperSQL，可以随意选择这些依赖项，或者稍后将它们添加到你的 pom.xml 文件中。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032053947.png" alt="New Project Window Dependency" tabindex="0" loading="lazy"><figcaption>New Project Window Dependency</figcaption></figure>
<p>一旦我们点击 "<strong>Finish</strong>"，IntelliJ IDEA 就会创建一个带有 Spring Data JPA 和数据库依赖的新的 Spring Boot 项目。</p>
<h2>创建员工实体</h2>
<p>实体是一个Java类，代表着你想要插入到数据库中的数据。 对于我们的应用程序，我们将创建一个名为 Employee 的实体，
我们将使用它来将员工数据插入到我们数据库中的 Employee 表中。</p>
<p>在项目工具窗口中，我们将导航到我们的 <code>src/main/java</code> 目录，选择 <code>com.jetbrains.springdatajpaapp</code> 包，
并按下 <strong>⌘N</strong> (macOS) / <strong>Alt+Insert</strong> (Windows/Linux)。选择 <strong>Java Class</strong>，然后输入我们的实体名称 - <mark>Employee</mark>。
然后，按下 <strong>⏎</strong> (macOS) / <strong>Enter</strong> (Windows/Linux)。</p>
<p>在 Employee 类中，我们将通过在类定义中添加 <mark>@Entity</mark> 注解并导入 <code>javax.persistence.Entity</code> 包来将其设置为实体。
一旦你这样做了，你会注意到你的类中出现了一个错误。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032108680.png" alt="Employee Entity Error" tabindex="0" loading="lazy"><figcaption>Employee Entity Error</figcaption></figure>
<p>正如错误消息所指示的，实体必须有一个由 <code>@Id </code>注解指定的主键字段。我们将使用 <strong>⌥⏎</strong> (macOS) / <strong>Alt+Enter</strong> (Windows/Linux)
快捷键，
这样 IntelliJ IDEA 就可以为我们添加 ID，这将导致提示输入 ID 字段的信息。 我们将采用默认的名称和类型。
你可以选择 "<strong>Field Access</strong>" 复选框（我更喜欢在字段上使用注解，而不是在 setter 方法上，因为我觉得这样更易读）。
你也可以选择 "<strong>Generated</strong>" 复选框，这样你就不必自己分配员工 ID。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032111916.png" alt="Add Employee ID" tabindex="0" loading="lazy"><figcaption>Add Employee ID</figcaption></figure>
<p>然后，我们将点击 "<strong>OK</strong>"。你会注意到 IntelliJ IDEA 创建了一个带有其 setter 和 getter 的 <code>id</code> 字段。</p>
<p>接下来，让我们添加几个 String 字段：<mark>firstName</mark> 和 <mark>lastName</mark>。</p>
<p>接下来，我们将通过调出 Generate 菜单 <strong>⌘N</strong> (macOS) / <strong>Alt+Insert</strong> (Windows/Linux)，然后选择 <strong>Constructor</strong> 来生成我们的构造函数。
我们不需要构造函数接收一个 id，因为我们的 id 将会自动生成，
所以我们将点击 <strong>firstName</strong>，然后按住 <strong>⌘</strong> (macOS) / <strong>Ctrl</strong> (Windows/Linux) 键，然后选择 <strong>lastName</strong>。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032114060.png" alt="Generate Constructor" tabindex="0" loading="lazy"><figcaption>Generate Constructor</figcaption></figure>
<p>然后，我们将点击 "<strong>OK</strong>"。</p>
<p>你现在会注意到你的 <code>Employee</code> 类上出现了一个错误，因为你没有一个无参构造函数。
如果你在错误上按下 <strong>Alt+Enter</strong> (Windows/Linux)
或 <strong>⌥⏎</strong> (macOS)，IntelliJ IDEA 将为你提供创建它的选项 - 让我们继续执行。</p>
<p>接下来，我们将生成字段的 setter 和 getter。
我们将调出 Generate 菜单 ⌘N (macOS) / Alt+Insert (Windows/Linux)，然后选择 Getter 和 Setter。
我们将按住 ⌘ (macOS) / Ctrl (Windows/Linux) 键，并选择两个变量。
然后，我们将点击 "<strong>OK</strong>"。IntelliJ IDEA 为这两个变量生成了 getter 和 setter。</p>
<p>最后，让我们再次调出 Generate 菜单 ⌘N (macOS) / Alt+Insert (Windows/Linux)，然后选择 <code>toString</code> 来生成一个 toString 方法。
我们将保持所有字段选中，然后点击 "<strong>OK</strong>"。</p>
<p>最终，Employee 实体应该类似于以下内容（格式可能会有所不同）：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>springdatajpaapp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Entity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span> <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Employee{"</span> <span class="token operator">+</span>
                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">", firstName='"</span> <span class="token operator">+</span> firstName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token string">", lastName='"</span> <span class="token operator">+</span> lastName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token char">'}'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>创建 Repository 接口</h2>
<p>现在我们已经创建了 Employee 实体，我们需要一种方式来执行 CRUD（创建、读取、更新、删除）操作。
幸运的是，Spring Data JPA 通过 <mark>Repositories</mark> 提供了所有基本的操作。让我们看看它们是如何工作的。</p>
<p>在项目工具窗口中，我们将选择 <code>com.jetbrains.springdatajpaapp</code> 包，并按下 ⌘N (macOS) / Alt+Insert (Windows/Linux)。
选择 <strong>Java Class</strong>。
我们将其命名为 <mark>EmployeeRepository</mark>，这次我们选择 <strong>Interface</strong> 然后按下 ⏎ (macOS) / Enter (Windows/Linux)。
为了使我们的接口成为一个 repository，我们需要让它扩展 <mark>CrudRespository&lt;T, ID&gt;</mark> 接口，其中泛型参数是我们的实体类和实体的
id 类型。
所以对于我们的应用程序，我们的 repository
接口定义将会是：<code>public interface EmployeeRepository extends CrudRepository&lt;Employee, Long&gt;</code>。</p>
<p>我们将使用这个 <code>EmployeeRepository</code> 接口来在我们的应用程序代码中执行 CRUD 操作。
由于我们正在扩展 <code>CrudRepository</code>，我们默认就可以访问基本的 CRUD 方法。
例如，我们可以调用 <code>save</code> 方法将一个 Employee 对象插入到我们的数据库中。
我们也可以调用 <code>findAll</code> 方法来列出你的 Employee 表中的所有员工。
当我们编写我们的应用程序逻辑时，我们将看到如何做到这一点。</p>
<p>在大多数应用程序中，你会发现自己希望做的事情超出了 CrudRepository 接口默认提供的范围。
例如，假设我们想要找到所有姓氏中包含空格的员工。你当然可以编写一个 SQL 查询来实现这个功能。
然而，一个更简单的方法是利用 Spring Data JPA，它允许你在你的 repository 中创建方法，这些方法将根据方法名被转换为查询。</p>
<p>例如，假设我们想要添加一个方法来查找所有姓氏中包含特定字符串的员工。
我们将前往我们的 <code>EmployeeRepository</code> 接口，并开始声明我们的方法。
我的方法将返回一个员工列表，因此我们将使用 <code>List&lt;Employee&gt;</code> 作为返回类型。
然后，我们需要指定一个由两部分组成的方法名：引入部分和条件部分。
我们可以在 IntelliJ IDEA 中使用 <strong>⌃␣</strong> (macOS) / <strong>Ctrl+Space</strong> (Windows/Linux) 来查看引入部分的方法建议列表：</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032144256.png" alt="Repository Method Suggestion Introducer" tabindex="0" loading="lazy"><figcaption>Repository Method Suggestion Introducer</figcaption></figure>
<p>我们将选择 <mark>findEmployeesBy</mark> 作为引入部分。
然后，我们将再次点击 <strong>⌃␣</strong> (macOS) / <strong>Ctrl+Space</strong> (Windows/Linux) 来查看可以选择的条件列表。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032145040.png" alt="Repository Method Suggestion Criteria" tabindex="0" loading="lazy"><figcaption>Repository Method Suggestion Criteria</figcaption></figure>
<p>我们将选择 <code>LastNameContaining</code>。最后，我们将声明一个 String 方法参数，表示我们要检查的字符串。
现在我们有了一个方法，可以找到所有姓氏中包含所提供字符串的员工。</p>
<p>你可能会想：如果我定义了这个接口，我不是必须要实现它吗？答案是否定的。
Spring Data JPA 会为你处理这些！你只需要定义你的 Repository 接口，并遵循 Spring Data 的约定声明你的方法。
当你添加更多方法时，如果在方法名中犯错，IntelliJ IDEA 将会指出错误。
例如，如果我们尝试创建一个用于查询具有不正确 <code>LName</code> 属性的员工的方法，IntelliJ IDEA
会给出一个错误，说<code>Cannot resolve property LName</code>。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032330980.png" alt="Method Signature Validation" tabindex="0" loading="lazy"><figcaption>Method Signature Validation</figcaption></figure>
<p>最终，你的 EmployeeRepository 接口应该如下所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>springdatajpaapp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">CrudRepository</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">findEmployeesByLastNameContaining</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>配置数据库</h2>
<p>此时，我们可以使用 Spring Boot 为我们创建的默认内存数据库。
然而，默认数据库功能有限，并且在应用程序终止后不允许数据保留，因此让我们继续配置一个数据库。</p>
<p>我们将调出搜索菜单 <strong>⇧⇧</strong> (macOS) / <strong>Shift+Shift</strong> (Windows/Linux) 并搜索我们的 <mark>application.properties</mark> 文件。
在我们的 application.properties 文件中，我们可以利用 IntelliJ IDEA 的建议来指定连接到我们的 H2 数据库所需的属性。
我们将开始输入 <mark>url</mark>，并从建议列表中选择 <mark>spring.datasource.url</mark> 属性。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032332643.png" alt="Application Properties URL" tabindex="0" loading="lazy"><figcaption>Application Properties URL</figcaption></figure>
<p>如果你没有使用 H2 作为你的数据库，你可以在这里指定你自己的数据库 URL。
在我们的情况下，我们将指定 <mark>jdbc:h2:file:./data/myDB</mark> 作为我们的 URL，这将创建一个名为 <mark>myDB</mark> 的 H2 数据库。</p>
<p>接下来，我们需要指定我们的驱动类名。
我们可以类似地搜索 <mark>driver</mark>，并从我们的建议列表中选择 <mark>spring.datasource.driver-class-name</mark>。
一旦我们选择了这个，IntelliJ IDEA 将根据我们之前指定的 URL 提供 H2 驱动程序的建议值，因此我们可以选择它。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032156491.png" alt="Application Properties Driver Class" tabindex="0" loading="lazy"><figcaption>Application Properties Driver Class</figcaption></figure>
<p>接下来，我们同样搜索 <mark>username</mark> 和 <mark>password</mark> 属性，并将它们的值分别设置为 <mark>sa</mark> 和 <mark>password</mark>。</p>
<p>最后，我们不想手动创建任何表，因此我们将添加 <mark>spring.jpa.hibernate.ddl-auto</mark> 属性，并使用代码完成来查看可能的值列表。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032158424.png" alt="Application Properties ddl-auto" tabindex="0" loading="lazy"><figcaption>Application Properties ddl-auto</figcaption></figure>
<p>对于我的应用程序，我将把属性值设置为 <mark>update</mark>，这样如果表不存在，它将在数据库中创建表，并在我对实体进行更改时更新它们。</p>
<p>最终，你的 application.properties 文件应该如下所示：</p>
<div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:h2:file:./data/myDB</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">org.h2.Driver</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">sa</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">password</span>
<span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">update</span>
</code></pre></div><h2>从应用程序写入数据库</h2>
<p>现在我们有了我们的 Employee 实体、Repository 和数据库配置，我们准备编写我们的应用程序逻辑。
假设我们想要向我们的数据库插入四个员工。我们将导航到为我们的 Spring Boot 应用程序
创建的 <mark>SpringDataJpaApplication</mark> 类 <strong>⇧⇧</strong> (macOS) / <strong>Shift+Shift</strong> (Windows/Linux)。</p>
<p><strong>练习</strong>：</p>
<p>花几分钟时间看看你能否创建一个 <code>insertFourEmployees(EmployeeRepository repository)</code> 方法，使用 <code>save()</code> 方法插入员工。</p>
<p>完成了吗？以下是你的方法应该是什么样子的：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertFourEmployees</span><span class="token punctuation">(</span><span class="token class-name">EmployeeRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Dalia"</span><span class="token punctuation">,</span> <span class="token string">"Abo Sheasha"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Trisha"</span><span class="token punctuation">,</span> <span class="token string">"Gee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Helen"</span><span class="token punctuation">,</span> <span class="token string">"Scott"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Mala"</span><span class="token punctuation">,</span> <span class="token string">"Gupta"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>现在，让我们继续在我们的应用程序中调用那个方法。在一个典型的 Spring Boot 应用程序中，我们会有一个服务类，其中包含服务提供的功能。
然而，由于我们只是做一些一次性的操作，让我们保持简单，使用一个 Bean 来调用我们的 <code>insertFourEmployees</code> 方法。
然后，让我们调用 <code>repository.findAll()</code> 来检索已插入的实体。下面是代码示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EmployeeRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">insertFourEmployees</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>让我们运行我们的应用程序并看到它的运行情况。我们将按 <strong>⌃R</strong> (macOS) / <strong>Shift+F10</strong> (Windows/Linux)。</p>
<p>最终结果，一旦我们的应用程序启动，我们可以看到控制台日志显示我们的 Spring Boot 应用程序正在启动。
然后，我们可以看到 <code>findAll</code> 调用的结果，打印出数据库中所有的员工。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032212130.png" alt="Application Run Successfully" tabindex="0" loading="lazy"><figcaption>Application Run Successfully</figcaption></figure>
<h2>创建数据源</h2>
<p>在你的项目中使用数据库时，在IntelliJ IDEA中创建一个数据源连接非常有用。
它允许你在IDE中轻松地与数据库进行交互。让我们为我们的<a href="https://www.h2database.com/html/main.html" target="_blank" rel="noopener noreferrer">H2</a>数据库创建一个数据源连接。
如果你正在使用其他数据库，你可以使用类似的步骤，或者你可以按照
IntelliJ IDEA<a href="https://www.jetbrains.com/help/java/connecting-to-a-database.html" target="_blank" rel="noopener noreferrer">数据库连接帮助页面</a>中概述的说明进行操作。
请注意，此功能仅适用于<a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html" target="_blank" rel="noopener noreferrer">IntelliJ IDEA Ultimate</a>版。</p>
<p>要创建我们的H2数据源，我们将打开数据库工具窗口（<strong>View | Tool Windows | Database</strong>），然后点击<code>+</code>按钮。
有多种方式可以创建我们的连接。我们将使用<strong>Data source from URL</strong>选项。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032330533.png" alt="New Database" tabindex="0" loading="lazy"><figcaption>New Database</figcaption></figure>
<p>我们将输入我们的数据库URL：<mark>jdbc:h2:file:./data/myDB</mark>，然后点击确定。</p>
<p>接下来，我们将完成数据库的配置。对于我们的用户和密码字段，
我们将输入在我们的<code>application.properties</code>文件中设置的用户和密码（<mark>sa</mark>，<mark>password</mark>）。
如果你收到有关缺少H2驱动程序的警告，请点击下载缺失的驱动程序文件。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032332971.png" alt="Data Source myDB Config" tabindex="0" loading="lazy"><figcaption>Data Source myDB Config</figcaption></figure>
<p><strong>可选步骤</strong>：在选项选项卡下，启用“设置后自动断开连接”，并将其设置为在3秒后断开连接。
此设置将断开IntelliJ IDEA中的数据库并释放所有锁定，使我们应用程序的进程可以持续连接并写入数据库。
这将防止来自你的应用程序的<code>database may already be in use</code>的错误。
如果执行了此步骤，则可能需要在数据库工具窗口中点击“刷新”按钮以更新数据源。</p>
<p>然后，我们将点击“<strong>Test Connection</strong>”以确保我们的配置是有效的。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032331974.png" alt="Data Source Config Options" tabindex="0" loading="lazy"><figcaption>Data Source Config Options</figcaption></figure>
<p>一旦我们点击"<strong>OK</strong>"，我们就会看到一个新的数据源，用于我们的H2数据库。</p>
<p>最终结果 ，在数据库视图中，我们现在可以导航到我们的Employee表，并通过双击表格查看所有员工数据。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032331767.png" alt="Database View" tabindex="0" loading="lazy"><figcaption>Database View</figcaption></figure>
<h2>调用自定义查询</h2>
<p>假设我们想要查询数据库中所有姓氏中包含空格的员工。</p>
<p><strong>练习</strong>：花几分钟时间编写代码，查找并打印姓氏中带有空格的所有员工。</p>
<p>完成了吗？以下是实现代码的样子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CommandLineRunner</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EmployeeRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">findEmployeesByLastNameContaining</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>最终结果， 如果你插入了教程中提到的相同数据，你应该在控制台输出中看到"<code>Dalia</code>"员工。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403032250455.png" alt="Application Run Successfully" tabindex="0" loading="lazy"><figcaption>Application Run Successfully</figcaption></figure>
<h2>总结</h2>
<p>在这个教程中，我们创建了一个简单的Spring Boot应用程序，它使用Spring Data JPA来存储和检索数据库中的数据。</p>
<p>一些在教程中提到的有用的快捷方式包括：</p>
<p>| Name          | Windows Shortcut | macOS Shortcut |
|</p>
]]></content:encoded>
      <enclosure url="https://img.geekyspace.cn/pictures/2024/202403032048778.png" type="image/png"/>
    </item>
    <item>
      <title>Spring Data JPA</title>
      <link>https://www.geekyspace.cn/spring-data-jpa/</link>
      <guid>https://www.geekyspace.cn/spring-data-jpa/</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Spring Data JPA</source>
      <description>Spring Data JPA 目录 Spring Data JPA 快速入门</description>
      <category>Spring Data</category>
      <pubDate>Thu, 04 Apr 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>目录</h2>
<ul>
<li><a href="/spring-data-jpa/jetbrains/getting-started">Spring Data JPA 快速入门</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 21 新特性：虚拟线程</title>
      <link>https://www.geekyspace.cn/java-features/Java21/jep444-virtual-threads.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java21/jep444-virtual-threads.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 21 新特性：虚拟线程</source>
      <description>Java 21 新特性：虚拟线程（Virtual Threads） Java 21 引入了虚拟线程（Virtual Threads）功能，类似于Go语言中的Goroutines。 虚拟线程是一种轻量级的线程，它可以极大地减少了编写、维护和管理高吞吐量并发应用程序所需的工作量。 Java平台目前为止有两种类型的线程：传统线程，也称为平台线程，和虚拟线程。...</description>
      <category>Java</category>
      <pubDate>Thu, 11 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 21 引入了<strong>虚拟线程</strong>（Virtual Threads）功能，类似于Go语言中的<code>Goroutines</code>。
虚拟线程是一种轻量级的线程，它可以极大地减少了编写、维护和管理高吞吐量并发应用程序所需的工作量。</p>
<p>Java平台目前为止有两种类型的线程：<strong>传统线程</strong>，也称为<mark>平台线程</mark>，和<strong>虚拟线程</strong>。</p>
<h2>平台线程</h2>
<p>在引入虚拟线程之前，我们所使用的线程<code>java.lang.Thread</code>是由所谓的平台线程支持的。</p>
<p>这些线程通常是 1:1 映射到操作系统线程的，因此它们是重量级的，创建和销毁线程的开销很大。
且每个请求都需要一个独立的线程，这会导致线程资源的快速耗尽，从而限制了应用程序的可伸缩性。</p>
<h3>创建平台线程</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 由平台线程执行的代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>随着<a href="https://openjdk.org/projects/loom/" target="_blank" rel="noopener noreferrer">Project Loom</a>简化了新的并发方法，它还提供了一种新的方法来创建平台支持的线程：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">ofPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      
<span class="token comment">// 或者</span>
<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">ofPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
                      <span class="token punctuation">.</span><span class="token function">daemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"platform-thread"</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">unstarted</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>虚拟线程</h2>
<p>虚拟线程是JDK提供的<strong>轻量级线程</strong>实现，可以在同一个OS线程上运行许多虚拟线程。
虚拟线程为平台线程提供了一种更有效的替代方案，允许开发人员以显著降低的开销处理大量任务。
这些线程提供了与现有Java代码的兼容性和无缝迁移路径，从而从增强的性能和资源利用率中获益。</p>
<p>许多语言中都有某种形式的轻量级线程：</p>
<ul>
<li>Go语言的<a href="https://go.dev/tour/concurrency/1" target="_blank" rel="noopener noreferrer">Goroutines</a></li>
<li>Erlang的<a href="https://www.erlang.org/docs/23/efficiency_guide/processes.html" target="_blank" rel="noopener noreferrer">Erlang Processes</a></li>
<li>Haskell的<a href="https://wiki.haskell.org/Lightweight_concurrency" target="_blank" rel="noopener noreferrer">Haskell Threads</a></li>
<li>等等</li>
</ul>
<h3>创建虚拟线程</h3>
<ol>
<li>使用<code>Thread.startVirtualThread()</code>方法创建虚拟线程：</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用静态构建器方法</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 由虚拟线程执行的代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>也可以使用<code>Thread.ofVirtual()</code>来创建，这里还可以设置一些属性，比如：线程名称等。具体如下代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> virtualThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">ofVirtual</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"virtual-thread"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ol start="2">
<li>使用<code>ExecutorService</code>创建虚拟线程：</li>
</ol>
<p>从Java 5开始，就推荐开发人员使用<code>ExecutorServices</code>而不是直接使用<code>Thread</code>类了。
现在，Java 21中引入了使用虚拟线程，所以也有了新的ExecutorService来适配，看看下面的例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newVirtualThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>  <span class="token comment">// executor.close() 被隐式调用, 然后 waits</span>
</code></pre></div><p>3.使用<code>ThreadFactory</code>创建虚拟线程：</p>
<p>开发者还可以创建一个生成虚拟线程的工厂来管理，具体看下面的例子例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ThreadFactory</span> virtualThreadFactory <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">ofVirtual</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"virtual-thread"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span> factoryThread <span class="token operator">=</span> virtualThreadFactory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 由虚拟线程执行的代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
factoryThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这段代码创建了一个虚拟线程工厂，每个虚拟线程都会以<code>virtual-thread</code>为前缀、以数字结尾（从0开始累加）的名称。</p>
<h2>虚拟线程如何工作</h2>
<p>虚拟线程是一个新的轻量级<code>java.lang.Thread</code>变体，由JVM的<a href="https://openjdk.org/projects/loom/" target="_blank" rel="noopener noreferrer">Project Loom</a>项目实现的。
它使用了一种称为<code>Continuation</code>的技术，不受操作系统的管理或调度。相反，JVM负责调度。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403141847457.jpg" alt="Java中虚拟线程的结构" tabindex="0" loading="lazy"><figcaption>Java中虚拟线程的结构</figcaption></figure>
<p>应用程序实例化虚拟线程，而 JVM 分配计算资源来处理它们。
与传统线程相对比，传统线程直接映射到操作系统（OS）进程。
传统线程中，应用程序代码负责提供和释放 OS 资源。
而虚拟线程中，应用程序实例化虚拟线程，从而表达并发需求。
但实际上是 JVM 从操作系统获取并释放资源。</p>
<figure><img src="https://img.geekyspace.cn/pictures/2024/202403141846557.webp" alt="JVM/OS线程管理" tabindex="0" loading="lazy"><figcaption>JVM/OS线程管理</figcaption></figure>
<p>所需的平台线程在 FIFO 工作窃取
<a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/ForkJoinPool.html" target="_blank" rel="noopener noreferrer">ForkJoinPool</a>
中进行管理，默认情况下使用所有可用处理器，
但可以通过调整系统属性 <code>jdk.virtualThreadScheduler.parallelism</code> 来根据您的需求进行修改。
您熟悉的 <code>ForkJoinPool</code> 和其他功能（如并行流）使用的公共池的主要区别在于，公共池以 LIFO 模式运行。</p>
]]></content:encoded>
      <enclosure url="https://img.geekyspace.cn/pictures/2024/202403141847457.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Java 21 新特性：switch模式匹配</title>
      <link>https://www.geekyspace.cn/java-features/Java21/jep441-pattern-matching-for-switch.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java21/jep441-pattern-matching-for-switch.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 21 新特性：switch模式匹配</source>
      <description>Java 21 新特性：switch模式匹配 Java 21 引入了 switch 模式匹配功能，它增强了 switch 语句的功能，允许使用更简洁的语法来执行类型检查和数据提取。 该功能与记录模式（JEP 440）共同发展，并与之有相当大的互动。 switch + instanceof 与if条件中的instanceof一样，switch case现...</description>
      <category>Java</category>
      <pubDate>Wed, 10 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 21 引入了 switch 模式匹配功能，它增强了 switch 语句的功能，允许使用更简洁的语法来执行类型检查和数据提取。
该功能与<a href="/java-features/Java21/jep440-record-partterns">记录模式（JEP 440）</a>共同发展，并与之有相当大的互动。</p>
<h2>switch + instanceof</h2>
<p>与if条件中的<code>instanceof</code>一样，<code>switch case</code>现在可以对其值进行类型检查，并创建一个case作用域变量:</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> str      <span class="token operator">-&gt;</span> str<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">JSONObject</span> json <span class="token operator">-&gt;</span> json<span class="token punctuation">.</span><span class="token function">toCompactString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">BigDecimal</span> bd   <span class="token operator">-&gt;</span> bd<span class="token punctuation">.</span><span class="token function">toEngineeringString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i       <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">LocalDate</span> ld    <span class="token operator">-&gt;</span> ld<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>              <span class="token operator">-&gt;</span> <span class="token string">"n/a"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>switch + null</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span>       <span class="token operator">-&gt;</span> <span class="token string">"n/a"</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> str <span class="token operator">-&gt;</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>switch + enum</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">sealed</span> <span class="token keyword">interface</span> <span class="token class-name">CardClassification</span> <span class="token keyword">permits</span> <span class="token class-name">Suit</span><span class="token punctuation">,</span> <span class="token class-name">Tarot</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Suit</span> <span class="token keyword">implements</span> <span class="token class-name">CardClassification</span> <span class="token punctuation">{</span> <span class="token constant">CLUBS</span><span class="token punctuation">,</span> <span class="token constant">DIAMONDS</span><span class="token punctuation">,</span> <span class="token constant">HEARTS</span><span class="token punctuation">,</span> <span class="token constant">SPADES</span> <span class="token punctuation">}</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Tarot</span> <span class="token keyword">implements</span> <span class="token class-name">CardClassification</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exhaustiveSwitchWithBetterEnumSupport</span><span class="token punctuation">(</span><span class="token class-name">CardClassification</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">CLUBS</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"梅花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">DIAMONDS</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">HEARTS</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"红桃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">SPADES</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"黑桃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Tarot</span> t <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"塔罗牌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未知的卡片类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 21 新特性：记录模式</title>
      <link>https://www.geekyspace.cn/java-features/Java21/jep440-record-partterns.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java21/jep440-record-partterns.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 21 新特性：记录模式</source>
      <description>Java 21 新特性：记录模式（Record Patterns） Java 21 中的记录模式（Record Patterns）是对模式匹配的扩展，它允许在模式匹配中使用记录（Records）类型。 同时，记录模式还支持嵌套，可以实现更复杂的数据查询和处理。 仅仅是类型匹配 到目前为止，Java中的模式匹配主要局限于匹配类型：instanceof类型...</description>
      <category>Java</category>
      <pubDate>Tue, 09 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 21 中的<strong>记录模式</strong>（Record Patterns）是对模式匹配的扩展，它允许在模式匹配中使用<strong>记录</strong>（Records）类型。
同时，记录模式还支持嵌套，可以实现更复杂的数据查询和处理。</p>
<h2>仅仅是类型匹配</h2>
<p>到目前为止，Java中的模式匹配主要局限于匹配类型：<a href="/java-features/Java16/jep394-pattern-matching-for-instanceof">instanceof类型匹配</a></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Java 16 之前</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 16+</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Java
21扩展了这个概念，使其可用于switch语句和表达式: <a href="/java-features/Java21/jep441-pattern-matching-for-switch">switch的模式匹配</a></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// JAVA 21之前</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>anyValue <span class="token keyword">instanceof</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> str<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>anyValue <span class="token keyword">instanceof</span> <span class="token class-name">BigDecimal</span> bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">toEngineeringString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>anyValue instance <span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token string">"n/a"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 21+</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">asStringValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>anyValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> str    <span class="token operator">-&gt;</span> str<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">BigDecimal</span> bd <span class="token operator">-&gt;</span> bd<span class="token punctuation">.</span><span class="token function">toEngineeringString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Integer</span> i     <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span>            <span class="token operator">-&gt;</span> <span class="token string">"n/a"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>代码比之前更加简洁，同时也更加易读。但是，这种模式匹配仍然局限于类型匹配。</p>
<h2>record模式</h2>
<p>当我们将模式匹配与记录类型结合使用时，我们称之为<strong>记录模式</strong>。这意味着我们可以在模式匹配中使用记录类型，以及记录类型的属性。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Java 16 之前</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 21+</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中<code>Point(int x, int y)</code>就是记录模式，它匹配<code>Point</code>类型的对象，将记录的实例（obj）分解到它的组件（<code>x</code>和<code>y</code>）。</p>
<h2>嵌套record的解构</h2>
<p>假设我们设计了一个记录，表示一个矩形，其中包含左上角和右下角的颜色点。
如果我们想要获取左上角点的颜色，我们可以这样写：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLUE</span> <span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p<span class="token punctuation">,</span> <span class="token class-name">Color</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">ColoredPoint</span> upperLeft<span class="token punctuation">,</span> <span class="token class-name">ColoredPoint</span> lowerRight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                            <span class="token keyword">new</span> <span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Java 16 之前</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printUpperLeftColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">ColoredPoint</span> ul<span class="token punctuation">,</span> <span class="token class-name">ColoredPoint</span> lr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// JAVA 21+</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printUpperLeftColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span><span class="token class-name">Point</span> ul<span class="token punctuation">,</span> <span class="token class-name">Color</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ColoredPoint</span> lr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>嵌套模式允许我们使用与将其组合的代码一样清晰简洁的代码来拆解聚合。</p>
<h2>发展脉络</h2>
<p>该功能最初作为预览功能在Java 19（JEP 405）中首次亮相，随后经过Java 20（JEP 432）的迭代，最终在Java 21中定稿（JEP 440）。
此功能与模式匹配的switch语句（JEP 441）共同演进，并且它们之间存在相当大的互动。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 21 新特性：分代ZGC</title>
      <link>https://www.geekyspace.cn/java-features/Java21/jep439-generational-zgc.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java21/jep439-generational-zgc.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 21 新特性：分代ZGC</source>
      <description>Java 21 新特性：分代ZGC（Generational ZGC） Java以其垃圾回收机制而闻名。这是它的主要优势之一，但也可能是许多头疼的根源。 Java 11（JEP 333）中引入了一个可扩展的低延迟垃圾收集器，称为ZGC Java 15（JEP 377）中 ZGC 可用于生产 现在，随着Java 21的出现，它已经发展成为一种分代GC（J...</description>
      <category>Java</category>
      <pubDate>Mon, 08 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java以其垃圾回收机制而闻名。这是它的主要优势之一，但也可能是许多头疼的根源。</p>
<ul>
<li>Java 11（<a href="https://openjdk.org/jeps/333" target="_blank" rel="noopener noreferrer">JEP 333</a>）中引入了一个可扩展的低延迟垃圾收集器，称为ZGC</li>
<li>Java 15（<a href="https://openjdk.org/jeps/377" target="_blank" rel="noopener noreferrer">JEP 377</a>）中 ZGC 可用于生产</li>
<li>现在，随着Java 21的出现，它已经发展成为一种分代GC（<a href="https://openjdk.org/jeps/439" target="_blank" rel="noopener noreferrer">JEP 439</a>）</li>
</ul>
<h2>垃圾收集（Garbage Collection）</h2>
<p>在Java中，垃圾收集器负责释放堆内存，堆内存是存储Java对象的地方。
这有助于防止内存泄漏并确保有效的资源使用，否则，程序会抛出<code>OutOfMemoryError</code>异常。</p>
<p>“<a href="https://wiki.c2.com/?GarbageCollection" target="_blank" rel="noopener noreferrer">垃圾收集</a>”的概念本质上是<strong>自动内存管理</strong>， 这可能导致如下潜在的错误：</p>
<ol>
<li>需要时间来清理和重新排列内存，引入了运行时开销，超出了程序员的控制。</li>
<li>GC运行的实际点通常是不确定的，对于高吞吐量内存消耗大的应用，可能会长时间的“<strong>GC暂停</strong>”</li>
<li>讽刺的是，GC的非确定性也是它的优点之一，我们不必担心内存是何时或如何释放的，它将自动发生</li>
</ol>
<p>有三种主要的自动内存管理技术：</p>
<ol>
<li>引用计数（<a href="https://wiki.c2.com/?ReferenceCounting" target="_blank" rel="noopener noreferrer">ReferenceCounting</a>）</li>
<li>标记和清除（<a href="https://wiki.c2.com/?MarkAndSweep" target="_blank" rel="noopener noreferrer">MarkAndSweep</a>）</li>
<li>复制（<a href="https://wiki.c2.com/?StopAndCopy" target="_blank" rel="noopener noreferrer">StopAndCopy</a>）</li>
</ol>
<h2>不同语言如何管理内存</h2>
<ul>
<li><strong>C/C++</strong>：手动管理内存，程序员负责分配和释放内存</li>
<li><strong>Objective-C 和 Swift</strong>：引入了自动引用计数（ARC），但仍然需要手动释放内存</li>
<li><strong>Rust</strong>：使用<a href="https://en.wikipedia.org/wiki/Substructural_type_system#Affine_type_systems" target="_blank" rel="noopener noreferrer">仿射类型系统</a>
而不是GC，引入了所有权和借用，编译器在编译时检查内存安全性</li>
<li><strong>Kotlin</strong>：与Java类似，但引入了<code>Kotlin/Native</code>，允许手动内存管理</li>
<li><strong>Java、<a href="https://devguide.python.org/internals/garbage-collector/" target="_blank" rel="noopener noreferrer">Python</a>
、Go、<a href="https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals" target="_blank" rel="noopener noreferrer">C#</a>
、JavaScript</strong>：自动内存管理，垃圾收集器负责释放内存</li>
</ul>
<h2>HotSpot JVM垃圾收集器</h2>
<p>内存管理有许多不同的方法，并且没有“最好”的方法。
即使在一种语言/运行时中，也可以有不止一种垃圾收集方法，JVM就是一个很好的例子。</p>
<p>与单一的GC不同，<a href="https://docs.oracle.com/en/java/javase/11/gctuning/available-collectors.html" target="_blank" rel="noopener noreferrer">HotSpot JVM</a>有5个GC可供选择：</p>
<ul>
<li>Garbage-First Collector(G1)（Java 9后的默认选项）</li>
<li>Serial Collector</li>
<li>Parallel Collector</li>
<li><s>Concurrent Mark Sweep (CMS) Collector（Java 9中已弃用）</s></li>
<li>Shenandoah GC（Java 12+）</li>
<li>Z Garbage Collector（Java 15中可用于生产）</li>
</ul>
<p>此外，不要忘记还有其他的JDK实现！</p>
<ul>
<li><a href="https://eclipse.dev/openj9/" target="_blank" rel="noopener noreferrer">Eclipse OpenJ9</a> 使用具有多个收集策略的分代并发GC</li>
<li><a href="https://www.graalvm.org/latest/reference-manual/native-image/optimizations-and-performance/MemoryManagement/" target="_blank" rel="noopener noreferrer">GraalVM</a>
有 Epsilon GC，它是一个 No-Op GC，完全不进行内存清理</li>
</ul>
<h2>如何选择JVM GC</h2>
<p>许多语言只提供了一种垃圾收集方法，而Java之所以提供多种GC选项，取决于您的应用程序对于“全局停顿”事件和总体暂停时间的容忍程度。</p>
<p>GC算法主要关注三个指标：</p>
<ol>
<li><strong>吞吐量</strong>：应用程序的运行时间与GC时间的比率</li>
<li><strong>延迟</strong>：GC暂停时间</li>
<li><strong>内存占用</strong>：GC对堆内存的使用</li>
</ol>
<p>与许多问题一样，您无法为所有这些问题进行优化，因此每个GC都需要在它们之间找到平衡点。以下是一些场景及其匹配的GC作为起点：</p>
<p>| 垃圾收集器       | 场景                                             |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 21 新特性：有序集合</title>
      <link>https://www.geekyspace.cn/java-features/Java21/jep431-sequenced-collections.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java21/jep431-sequenced-collections.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 21 新特性：有序集合</source>
      <description>Java 21 新特性：有序集合（Sequenced Collections） 在JDK 21中，有序集合（Sequenced Collections）引入了新的接口和方法来简化集合处理。 此增强功能旨在解决访问Java中各种集合类型的第一个和最后一个元素需要非统一且麻烦处理场景 Sequenced Collections 引入如下 3 个新接口，用于...</description>
      <category>Java</category>
      <pubDate>Sun, 07 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在JDK 21中，<strong>有序集合</strong>（Sequenced Collections）引入了新的接口和方法来简化集合处理。</p>
<blockquote>
<p>此增强功能旨在解决访问Java中各种集合类型的第一个和最后一个元素需要非统一且麻烦处理场景</p>
</blockquote>
<p><code>Sequenced Collections</code> 引入如下 3 个新接口，用于处理顺序<code>List</code>、<code>Set</code>和<code>Map</code>，
并将它们整合到现有的集合类型中。这些新接口中的方法都具有默认实现。</p>
<ol>
<li>SequencedCollection</li>
<li>SequencedSet</li>
<li>SequencedMap</li>
</ol>
<h2>SequencedCollection</h2>
<p>提供了在集合两端添加、检索和移除元素的方法，沿着<code>reversed()</code>方法提供了该集合的逆序视图。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 新方法：返回反转后的序列化集合</span>
    <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 以下方法是从Deque提升的,支持在两端添加、获取和删除元素</span>
    <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul>
<li>新的<code>reversed()</code>方法提供了原始集合的反向视图，对原始集合的任何修改都可以在视图中看到</li>
<li>如果允许，对视图的修改将写入原始集合</li>
<li>逆序视图使得不同的序列类型可以在两个方向上处理元素
<ul>
<li>如：增强for循环、显式iterator()循环、forEach()、stream()、parallelStream() 和 toArray()</li>
</ul>
</li>
</ul>
<p>例如，从<code>LinkedHashSet</code>获得逆序流以前很难，现在很简单</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>linkedHashSet<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 获取逆序流非常困难</span>
linkedHashSet<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 现在：直接使用 reversed() 方法获取逆序流</span>
</code></pre></div><blockquote>
<p><code>reversed()</code> 方法本质上是 <code>NavigableSet::descendingSet</code>的重命名，并升级为 SequencedCollection</p>
</blockquote>
<h2>SequencedSet</h2>
<p>sequenced set 是一个不包含重复元素的 SequencedCollection，区别是<code>SequencedSet.reversed()</code>的返回类型是SequencedSet。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写父接口的 reversed() 方法</span>
    <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>SortedSet</strong></p>
<ul>
<li>Java集合框架中<code>SortedSet</code>接口，表示一个有序集合</li>
<li>不能支持显式定位操作，因为是基于元素之间的相对比较来确定它们位置的，而不是基于顺序插入</li>
<li>如果尝试使用<code>addFirst(E)</code>或<code>addLast(E)</code>方法，会抛出<code>UnsupportedOperationException</code>异常</li>
</ul>
<p><strong>SequencedSet</strong></p>
<ul>
<li><code>SequencedSet</code>接口扩展了<code>SortedSet</code></li>
<li>其中<code>addFirst(E)</code>和<code>addLast(E)</code> 方法对于集合（如<code>LinkedHashSet</code>）具有特殊情况语义：
<ul>
<li>如果元素已经存在于集合中，则将其移动到适当的位置</li>
<li>这弥补了LinkedHashSet中的一个长期缺陷，即无法重新定位元素</li>
</ul>
</li>
</ul>
<h2>SequencedMap</h2>
<p>sequenced map 是一个映射，其键具有已定义的顺序，
它不实现SequencedCollection，而是提供了自己的方法，这些方法将访问顺序应用于映射条目，而不是单个元素。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 新方法</span>
    <span class="token class-name">SequencedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 返回一个反转的映射</span>
    <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 返回键的序列化集合</span>
    <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回值的序列化集合</span>
    <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedEntrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回条目的序列化集合</span>
    <span class="token class-name">V</span> <span class="token function">putFirst</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// 将键值对放在映射的第一个位置</span>
    <span class="token class-name">V</span> <span class="token function">putLast</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 将键值对放在映射的最后一个位置</span>
    <span class="token comment">// 从 NavigableMap 提升的方法，支持在映射的两端获取和移除条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 返回映射的第一个条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">lastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 返回映射的最后一个条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollFirstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除并返回映射的第一个条目</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollLastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 移除并返回映射的最后一个条目</span>
<span class="token punctuation">}</span>
</code></pre></div><p>新的<code>put*(K, V)</code>方法具有特殊的含义，类似于 SequencedSet 中对应的<code>add*(E)</code>方法：</p>
<ul>
<li>对于 LinkedHashMap 映射，如果已存在相同键的条目，该方法将重新定位该条目</li>
<li>对于 SortedMap 映射，这些方法会抛出 <code>UnsupportedOperationException</code> 异常</li>
</ul>
<h2>改造</h2>
<p>上述定义的三个新接口完美地适应了现有的集合类型层次结构（点击放大）：</p>
<figure><img src="http://img.geekyspace.cn/pictures/2024/SequencedCollectionDiagram20220216.png" alt="Sequenced-Collections" tabindex="0" loading="lazy"><figcaption>Sequenced-Collections</figcaption></figure>
<p>具体而言，我们对现有的类和接口进行以下调整：</p>
<ul>
<li>List 现在将 SequencedCollection 定义为其直接超级接口</li>
<li>Deque 现在将 SequencedCollection 定义为其直接超级接口</li>
<li>LinkedHashSet 另外实现了 SequencedSet</li>
<li>SortedSet 现在将 SequencedSet 定义为其直接超级接口</li>
<li>LinkedHashMap 另外实现了 SequencedMap</li>
<li>SortedMap 现在将 SequencedMap 定义为其直接超级接口</li>
</ul>
<p>我们在适当的位置为<code>reversed()</code>方法定义协变覆盖。
例如: <code>List::reversed</code> 被覆盖为返回 List 类型的值，而不是 <code>SequencedCollection</code> 类型的值。</p>
<p>我们还向 Collections 实用类添加了新方法，用于创建三种新类型的不可修改包装：</p>
<ul>
<li>Collections.unmodifiableSequencedCollection(sequencedCollection)</li>
<li>Collections.unmodifiableSequencedSet(sequencedSet)</li>
<li>Collections.unmodifiableSequencedMap(sequencedMap)</li>
</ul>
<h2>第一个和最后一个元素的访问</h2>
<p>引入顺序接口的动机是对获取集合的第一个和最后一个元素的简单方法的长期未决需求。</p>
<p>目前，在Java 21之前，JDK API调用访问第一个和最后一个元素的一些示例：</p>
<p>| 访问位置   | List                    | Deque            | SortedSet   |
|</p>
]]></content:encoded>
      <enclosure url="http://img.geekyspace.cn/pictures/2024/SequencedCollectionDiagram20220216.png" type="image/png"/>
    </item>
    <item>
      <title>Java 21 新特性：字符串模版(Preview)</title>
      <link>https://www.geekyspace.cn/java-features/Java21/jep430-string-templates.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java21/jep430-string-templates.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 21 新特性：字符串模版(Preview)</source>
      <description>Java 21 新特性：String Templates（字符串模版） Java 21 中引入了字符串模版（String Templates），它是一种新的字符串字面量，用于更简洁地构建字符串。 字符串组合的机制 在之前，Java 提供了几种字符串组合的机制，但不幸的是，它们都存在一些缺点 使用 + 操作符, 代码难以阅读 使用 StringBuild...</description>
      <category>Java</category>
      <pubDate>Sat, 06 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 21 中引入了<strong>字符串模版</strong>（String Templates），它是一种新的字符串字面量，用于更简洁地构建字符串。</p>
<h2>字符串组合的机制</h2>
<p>在之前，Java 提供了几种字符串组合的机制，但不幸的是，它们都存在一些缺点</p>
<ol>
<li>使用 <code>+</code> 操作符, 代码难以阅读<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">" plus "</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">" equals "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>使用 <code>StringBuilder</code> 和 <code>StringBuffer</code>，代码冗长<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span>（）
                <span class="token punctuation">.</span>append（x）
                <span class="token punctuation">.</span>append（“plus“）
                <span class="token punctuation">.</span>append（y）
                <span class="token punctuation">.</span>append（“equals“）
                <span class="token punctuation">.</span>append（x <span class="token operator">+</span> y）
                <span class="token punctuation">.</span>println（）<span class="token punctuation">;</span>
</code></pre></div></li>
<li>使用 <code>String::format</code> 和 <code>String::formatted</code>，容易出现参数数量和类型不匹配的问题<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%2$d plus %1$d equals %3$d"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> t <span class="token operator">=</span> <span class="token string">"%2$d plus %1$d equals %3$d"</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>使用 <code>java.text.MessageFormat</code> 格式化消息，语法复杂对一些人来说可能不太熟悉<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MessageFormat</span> mf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">(</span><span class="token string">"{0} plus {1} equals {2}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> mf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
</ol>
<p>下面，我们将学习Java 21中的字符串模版，以及它的使用方法。</p>
<h2>模版表达式（插值）</h2>
<p>在Java 21中处理字符串的新方法称为：<code>Template Expressions</code>，即：<strong>模版表达式</strong>。</p>
<ul>
<li>优点：模版表达式可以执行<strong>字符串插值</strong>，插值不仅比串联更方便，而且在阅读代码时也更清晰</li>
<li>缺点：但插值是危险的，尤其是对于SQL语句，因为它可能导致注入攻击</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Joan"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"My name is \{name}"</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span> info<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"My name is Joan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
</code></pre></div><p>上述代码中的第2行就是一个模版表达式，其中主要包含三个部分：</p>
<ol>
<li>模板处理器<code>STR</code>;</li>
<li>一个<code>.</code>字符，类似于方法调用</li>
<li>包含嵌入表达式（<code>\{name}</code>）的模版</li>
</ol>
<p>运行时，计算模板表达式，模板处理器将模板中的文本与嵌入表达式的值组合在一起，以产生结果。</p>
<h2>STR模版处理器</h2>
<blockquote>
<p>STR模板处理器用于将模板中的每个<mark>嵌入表达式</mark>替换成<mark>表达式的（字符串）值</mark>来执行字符串插值</p>
</blockquote>
<ul>
<li>STR是一个<code>public static final</code>字段，它会自动导入到每个Java源文件中</li>
</ul>
<p>使用STR模板处理器的模板表达式示例。符号 <code>|</code> 后显示前一条语句的值，类似于<code>jshell</code>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 嵌入式表达式可以是字符串</span>
<span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token string">"Bill"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> lastName  <span class="token operator">=</span> <span class="token string">"Duck"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> fullName  <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"\{firstName} \{lastName}"</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">"Bill Duck"</span>
<span class="token class-name">String</span> sortName  <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"\{lastName}, \{firstName}"</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">"Duck, Bill"</span>

<span class="token comment">// 嵌入式表达式可以执行算术运算</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"\{x} + \{y} = \{x + y}"</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">"10 + 20 = 30"</span>

<span class="token comment">// 嵌入式表达式可以调用方法和访问字段</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"You have a \{getOfferType()} waiting for you!"</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">"You have a gift waiting for you!"</span>
<span class="token class-name">String</span> t <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"Access at \{req.date} \{req.time} from \{req.ipAddress}"</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">"Access at 2022-03-25 15:34 from 8.8.8.8"</span>
</code></pre></div><ul>
<li>
<p>为了帮助重构，嵌入式表达式中可以使用双引号字符，而无需将它们转义为<code>"</code></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"tmp.dat"</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> old <span class="token operator">=</span> <span class="token string">"The file "</span> <span class="token operator">+</span> filePath <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"does"</span> <span class="token operator">:</span> <span class="token string">"does not"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" exist"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"The file \{filePath} \{file.exists() ? "</span>does<span class="token string">" : "</span>does not<span class="token string">"} exist"</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token string">"The file tmp.dat does exist"</span> 或 <span class="token string">"The file tmp.dat does not exist"</span>
</code></pre></div></li>
<li>
<p>为了提高可读性，在源文件中，嵌入式表达式可以跨越多行而不会引入新的换行符</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>"<span class="token class-name">The</span> time is \<span class="token punctuation">{</span>
    <span class="token comment">// java.time.format包非常有用</span>
    <span class="token class-name">DateTimeFormatter</span>
      <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> right now"<span class="token punctuation">;</span>
<span class="token comment">// "The time is 12:34:56 right now"</span>
</code></pre></div></li>
<li>
<p>字符串模板表达式中嵌入表达式的数量没有限制</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 嵌入式表达式可以是后缀递增表达式</span>
<span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"\{index++}, \{index++}, \{index++}, \{index++}"</span><span class="token punctuation">;</span>
<span class="token comment">// "0, 1, 2, 3"</span>
</code></pre></div></li>
<li>
<p>任何Java表达式都可以用作嵌入式表达式，甚至是模板表达式。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 嵌入式表达式是（嵌套的）模板表达式</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"apples"</span><span class="token punctuation">,</span> <span class="token string">"oranges"</span><span class="token punctuation">,</span> <span class="token string">"peaches"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"\{fruit[0]}, \{STR."</span>\<span class="token punctuation">{</span>fruit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> \<span class="token punctuation">{</span>fruit<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token string">"}"</span><span class="token punctuation">;</span>
<span class="token comment">// "apples, oranges, peaches"</span>
</code></pre></div></li>
<li>
<p>在这里，模板表达式 <code>STR."\{fruit[1]}, \{fruit[2]}"</code> 嵌入到另一个模板表达式的模板中。
由于存在大量的 <code>"</code> <code>,</code> <code>\</code> 和 <code>{ }</code> 字符，这段代码很难阅读，因此最好将其格式化为：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>"\<span class="token punctuation">{</span>fruit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> \<span class="token punctuation">{</span>
    <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">"\{fruit[1]}, \{fruit[2]}"</span>
<span class="token punctuation">}</span>"<span class="token punctuation">;</span>
</code></pre></div></li>
</ul>
<h2>多行模板表达式</h2>
<p>模板表达式的模板可以跨越多行源代码，类似于Java 15中的<a href="/java-features/Java15/jep378-text-blocks">文本块</a>的语法。
开发者可以用它来方便的组织<code>html</code>、<code>json</code>、<code>xml</code>等字符串内容，比如下面这样：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 多行模板表达式示例：HTML文档</span>
<span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">"My Web Page"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> text  <span class="token operator">=</span> <span class="token string">"Hello, world"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">"""
        &lt;html&gt;
          &lt;head&gt;
            &lt;title&gt;\{title}&lt;/title&gt;
          &lt;/head&gt;
          &lt;body&gt;
            &lt;p&gt;\{text}&lt;/p&gt;
          &lt;/body&gt;
        &lt;/html&gt;
        """</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">"""
| &lt;html&gt;
|   &lt;head&gt;
|     &lt;title&gt;My Web Page&lt;/title&gt;
|   &lt;/head&gt;
|   &lt;body&gt;
|     &lt;p&gt;Hello, world&lt;/p&gt;
|   &lt;/body&gt;
| &lt;/html&gt;
| """</span>

<span class="token comment">// 多行模板表达式示例：JSON文档</span>
<span class="token class-name">String</span> name    <span class="token operator">=</span> <span class="token string">"Joan Smith"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> phone   <span class="token operator">=</span> <span class="token string">"555-123-4567"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">"1 Maple Drive, Anytown"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">"""
    {
        "name":    "\{name}",
        "phone":   "\{phone}",
        "address": "\{address}"
    }
    """</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">"""
| {
|     "name":    "Joan Smith",
|     "phone":   "555-123-4567",
|     "address": "1 Maple Drive, Anytown"
| }
| """</span>

<span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> width<span class="token punctuation">,</span> <span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> zone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">"Alfa"</span><span class="token punctuation">,</span> <span class="token number">17.8</span><span class="token punctuation">,</span> <span class="token number">31.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">"Bravo"</span><span class="token punctuation">,</span> <span class="token number">9.6</span><span class="token punctuation">,</span> <span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">7.1</span><span class="token punctuation">,</span> <span class="token number">11.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 多行模板表达式示例：表格</span>
<span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">"""
    Description  Width  Height  Area
    \{zone[0].name}  \{zone[0].width}  \{zone[0].height}     \{zone[0].area()}
    \{zone[1].name}  \{zone[1].width}  \{zone[1].height}     \{zone[1].area()}
    \{zone[2].name}  \{zone[2].width}  \{zone[2].height}     \{zone[2].area()}
    Total \{zone[0].area() + zone[1].area() + zone[2].area()}
    """</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">"""
| Description  Width  Height  Area
| Alfa  17.8  31.4     558.92
| Bravo  9.6  12.4     119.03999999999999
| Charlie  7.1  11.23     79.733
| Total 757.693
| """</span>
</code></pre></div><h2>FMT模板处理器</h2>
<p>除了STR模版处理器之外，Java中还提供了另外一个模版处理器：FMT。
FMT与STR相似之处在于它执行插值，但还提供了<mark>格式化处理</mark>能力。</p>
<ul>
<li>格式说明符与<code>java.util.Formatter</code>中定义的格式说明符相同</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> width<span class="token punctuation">,</span> <span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> zone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">"Alfa"</span><span class="token punctuation">,</span> <span class="token number">17.8</span><span class="token punctuation">,</span> <span class="token number">31.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">"Bravo"</span><span class="token punctuation">,</span> <span class="token number">9.6</span><span class="token punctuation">,</span> <span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">7.1</span><span class="token punctuation">,</span> <span class="token number">11.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 多行模板表达式示例：表格</span>
<span class="token class-name">String</span> table <span class="token operator">=</span> <span class="token constant">FMT</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">"""
    Description     Width    Height     Area
    %-12s\{zone[0].name}  %7.2f\{zone[0].width}  %7.2f\{zone[0].height}     %7.2f\{zone[0].area()}
    %-12s\{zone[1].name}  %7.2f\{zone[1].width}  %7.2f\{zone[1].height}     %7.2f\{zone[1].area()}
    %-12s\{zone[2].name}  %7.2f\{zone[2].width}  %7.2f\{zone[2].height}     %7.2f\{zone[2].area()}
    \{" ".repeat(28)} Total %7.2f\{zone[0].area() + zone[1].area() + zone[2].area()}
    """</span><span class="token punctuation">;</span>
<span class="token operator">|</span> 输出结果：
<span class="token operator">|</span> <span class="token triple-quoted-string string">"""
| Description     Width    Height     Area
| Alfa            17.80    31.40      558.92
| Bravo            9.60    12.40      119.04
| Charlie          7.10    11.23       79.73
|                              Total  757.69
| """</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java19 新特性总结</title>
      <link>https://www.geekyspace.cn/java-features/Java19/java19-new-features-summary.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java19/java19-new-features-summary.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java19 新特性总结</source>
      <description>Java 19 新特性总结 该版本推出的均为孵化与预览功能，所以这里不做单独的详细解读，大部分内容均放在Java 21中介绍。 422: Linux/RISC-V Port：RISC-V是一个基于精简指令集（RISC）原则的开源指令集架构（ISA）,这个JEP的主旨则是移植JDK到RISC-V上。 以下预览特性在Java 21中正式定稿： 405: R...</description>
      <category>Java</category>
      <pubDate>Thu, 04 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>该版本推出的均为孵化与预览功能，所以这里不做单独的详细解读，大部分内容均放在Java 21中介绍。</p>
<ul>
<li>422: Linux/RISC-V Port：RISC-V是一个基于精简指令集（RISC）原则的开源指令集架构（ISA）,这个JEP的主旨则是移植JDK到RISC-V上。</li>
</ul>
<p>以下预览特性在Java 21中正式定稿：</p>
<ul>
<li><a href="/java-features/Java21/jep440-record-partterns">405: Record Patterns (Preview)：终稿见 440: Record Patterns</a></li>
<li><a href="/java-features/Java21/jep444-virtual-threads">425: Virtual Threads (Preview)：终稿见 444: Virtual Threads</a></li>
<li><a href="/java-features/Java21/jep441-pattern-matching-for-switch">427: Pattern Matching for switch (Third Preview)：终稿见 441: Pattern Matching for switch</a></li>
</ul>
<p>以下内容在Java 21中继续迭代：</p>
<ul>
<li>424: Foreign Function &amp; Memory API (Preview)</li>
<li>426: Vector API (Fourth Incubator)</li>
<li>428: Structured Concurrency (Incubator)</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java20 新特性总结</title>
      <link>https://www.geekyspace.cn/java-features/Java20/java20-new-features-summary.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java20/java20-new-features-summary.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java20 新特性总结</source>
      <description>Java 20 新特性总结 该版本推出的均为孵化与预览功能，所以这里不做单独的详细解读，大部分内容均放在Java 21中介绍。 以下内容在Java 21中正式定稿，可根据链接查看终稿内容： 432: Record Patterns (Second Preview)：终稿见440: Record Patterns 433: Pattern Matchin...</description>
      <category>Java</category>
      <pubDate>Fri, 05 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>该版本推出的均为孵化与预览功能，所以这里不做单独的详细解读，大部分内容均放在Java 21中介绍。</p>
<p>以下内容在Java 21中正式定稿，可根据链接查看终稿内容：</p>
<ul>
<li><a href="/java-features/Java21/jep440-record-partterns">432: Record Patterns (Second Preview)：终稿见440: Record Patterns</a></li>
<li><a href="/java-features/Java21/jep441-pattern-matching-for-switch">433: Pattern Matching for switch (Fourth Preview)：终稿见441: Pattern Matching for switch</a></li>
<li><a href="/java-features/Java21/jep444-virtual-threads">436: Virtual Threads (Second Preview)：终稿见444: Virtual Threads</a></li>
</ul>
<p>以下内容在Java 21中继续迭代：</p>
<ul>
<li>429: Scoped Values (Incubator)</li>
<li>434: Foreign Function &amp; Memory API (Second Preview)</li>
<li>437: Structured Concurrency (Second Incubator)</li>
<li>438: Vector API (Fifth Incubator)</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 18 新特性：指定UTF-8为默认字符集</title>
      <link>https://www.geekyspace.cn/java-features/Java18/jep400-utf8-by-default.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java18/jep400-utf8-by-default.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 18 新特性：指定UTF-8为默认字符集</source>
      <description>Java 18 新特性：指定UTF-8为默认字符集 在Java 18中，将UTF-8指定为标准Java API 的默认字符集， 以提高Java程序在不同实现、操作系统、区域设置和配置下的一致性。 目标 使Java程序在依赖默认字符集的代码上更加可预测和可移植 明确标准Java API在何处使用默认字符集 在标准Java API中统一使用UTF-8，除了...</description>
      <category>Java</category>
      <pubDate>Mon, 01 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在Java 18中，将<code>UTF-8</code>指定为标准Java API 的默认字符集，
以提高Java程序在不同实现、操作系统、区域设置和配置下的一致性。</p>
<h2>目标</h2>
<ul>
<li>使Java程序在依赖默认字符集的代码上更加可预测和<strong>可移植</strong></li>
<li>明确标准Java API在何处使用默认字符集</li>
<li>在标准Java API中统一使用UTF-8，除了控制台I/O</li>
</ul>
<p>尽管这项工作可能会发现新的便利方法可能会使现有的API更易于使用，但这一更改并不是要弃用或删除依赖默认字符集的标准Java API。</p>
<h2>动机</h2>
<p>默认情况下，Java API 会根据<strong>运行时环境</strong>（操作系统、用户的区域设置等）选择默认字符集。
为了提高 Java API 的一致性并降低潜在的兼容性问题，我们建议将所有 Java API 统一使用 <code>UTF-8</code> 作为默认字符集。
尽管这一变更可能对迁移到 JDK 18 的程序产生兼容性影响，但我们提供了一个 <code>COMPAT</code> 选项，允许恢复到之前的行为，即默认字符集取决于环境。</p>
<h2>描述</h2>
<h3>兼容性危害示例</h3>
<p>在MacOS上以<code>UTF-8</code>编码的日语文本文件在Windows上以美英或日语区域设置读取时被损坏</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileReader</span><span class="token punctuation">(</span>“hello<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> “こんにちは” <span class="token punctuation">(</span>macOS<span class="token punctuation">)</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileReader</span><span class="token punctuation">(</span>“hello<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> “ã<span class="token operator">?</span>“ã‚“ã<span class="token operator">?</span>«ã<span class="token operator">?</span>¡ã<span class="token operator">?</span> ” <span class="token punctuation">(</span><span class="token class-name">Windows</span> <span class="token punctuation">(</span>en<span class="token operator">-</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileReader</span><span class="token punctuation">(</span>“hello<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> “縺ォ縺。縺ッ” <span class="token punctuation">(</span><span class="token class-name">Windows</span> <span class="token punctuation">(</span>ja<span class="token operator">-</span><span class="token constant">JP</span><span class="token punctuation">)</span>
</code></pre></div><h3>查询默认字符集</h3>
<p>通过方法 <code>java.nio.charset.Charset.defaultCharset()</code> 可以获取默认字符集。</p>
<p>另外，使用以下命令可以快速查看当前 JDK 的默认字符集：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>java <span class="token operator">-</span><span class="token class-name">XshowSettings</span><span class="token operator">:</span>properties <span class="token operator">-</span>version <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">|</span> grep file<span class="token punctuation">.</span>encoding
</code></pre></div><p>如果想在所有 Java 版本上获取从环境中确定的字符集，可以使用以下代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取native.encoding系统属性（在Java 18及更高版本上赋值）</span>
<span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"native.encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用三元运算符选择字符集，如果encoding不为null，则使用指定字符集，否则使用默认字符集</span>
<span class="token class-name">Charset</span> cs <span class="token operator">=</span> <span class="token punctuation">(</span>encoding <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用指定字符集创建 FileReader 对象，打开名为 "file.txt" 的文件</span>
<span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>兼容使用默认字符集API（迁移）</h3>
<p>多个标准 Java API 使用默认字符集，包括：</p>
<ul>
<li>在 java.io 包中，InputStreamReader、FileReader、OutputStreamWriter、FileWriter 和 PrintStream
提供了构造函数，用于创建使用默认字符集进行编码或解码的读取器、写入器和打印流</li>
<li>在 java.util 包中，Formatter 和 Scanner 提供了构造函数，使用默认字符集进行操作</li>
<li>在 java.net 包中，URLEncoder 和 URLDecoder 提供了使用默认字符集的已弃用方法</li>
</ul>
<p>我们将更新所有使用 Charset.defaultCharset() 进行交叉引用的标准 Java API 的规范。
这些 API 包括上述提到的 API，但不包括 System.out 和 System.err，它们的字符集将由 Console.charset() 指定。</p>
<h3>file.encoding 和 native.encoding 系统属性</h3>
<p><code>file.encoding</code> 是 Java 虚拟机的系统属性，用于指定默认的字符编码</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>COMPAT   <span class="token comment"># COMPAT 模式, 默认字符集取决于环境</span>
<span class="token function">java</span> <span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>UTF-8    <span class="token comment"># UTF-8 模式, 默认字符集为UTF-8</span>
</code></pre></div><p><code>native.encoding</code> 在Java 17 中引入，该属性提供了底层主机环境的字符编码名称</p>
<p>Java内部使用了三个字符集相关的系统属性，它们目前未指定且不受支持。这里简要记录一下：</p>
<ol>
<li><code>sun.stdout.encoding</code></li>
<li><code>sun.stderr.encoding</code></li>
<li><code>sun.jnu.encoding</code>：</li>
</ol>
<blockquote>
<p>Tips：对于JDK(8-17)：强烈建议开发人员使用<code>java -Dfile.encoding=UTF-8</code>指定默认字符集为UTF-8启动程序</p>
</blockquote>
<h3>源文件编码</h3>
<p>Java语言允许源代码使用<code>UTF-16</code>编码方式表达<code>Unicode</code>字符，并且这不受默认字符集UTF-8的影响。
但是，<code>javac</code>编译器会受到影响，因为它需要将源代码转换为平台默认的字符集，除非通过<code>-encoding</code>选项进行配置</p>
<p>如果源文件以非UTF-8编码保存并在较早的JDK上进行编译，然后在JDK 18或更高版本上重新编译，可能会导致问题。
例如，如果非UTF-8源文件中的字符串文字包含非ASCII字符，则在JDK 18或更高版本中，除非使用<code>-encoding</code>选项，否则这些文字可能会被<code>javac</code>错误解释。</p>
<p>在使用UTF-8作为默认字符集的JDK上编译之前，强烈建议开发人员通过在当前JDK（8-17）上使用javac -encoding UTF-8 ... 进行编译来检查字符集问题。
另外，喜欢以非UTF-8编码保存源文件的开发人员可以通过将JDK 17及更高版本上的<code>-encoding</code>选项设置为<code>native.encoding</code>系统属性的值，防止javac假定UTF-8。</p>
<h3>旧版默认字符集（US-ASCII）</h3>
<p>在JDK 17及更早版本中，名称<code>default</code>会被识别为<code>US-ASCII</code>字符集的别名。</p>
<p>在JDK 18中，默认字符集<code>UTF-8</code>，保留<code>default</code>作为<code>US-ASCII</code>的别名将会非常混乱，于是重新定义<code>default</code>不再是<code>US-ASCII</code>的别名。</p>
<p>Java程序使用枚举常量StandardCharsets.US_ASCII来明确其开发人员意图，而不是向Charset.forName(...)传递字符串。</p>
<p>因此，在JDK 18中，<code>Charset.forName("default")</code>将抛出 UnsupportedCharsetException。
这将为开发人员提供检测到这种惯用法并迁移到US-ASCII或Charset.defaultCharset()结果的机会。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 18 新特性：简单Web服务器</title>
      <link>https://www.geekyspace.cn/java-features/Java18/jep408-simple-web-server.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java18/jep408-simple-web-server.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 18 新特性：简单Web服务器</source>
      <description>Java 18 新特性：简单Web服务器 Java 18 引入了简单Web服务器（Simple Web Server），一个专为教育或非正式任务设计的最小HTTP服务器，为单个目录层次结构提供服务。 基于JDK中的com.sun.net.httpserver包实现，旨在简化服务器的创建和请求处理过程。 主要特点： 不能替代成熟的商业服务器，如Jetty...</description>
      <category>Java</category>
      <pubDate>Tue, 02 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 18 引入了<strong>简单Web服务</strong>器（Simple Web Server），一个专为教育或非正式任务设计的最小HTTP服务器，为单个目录层次结构提供服务。
基于JDK中的<code>com.sun.net.httpserver</code>包实现，旨在简化服务器的创建和请求处理过程。</p>
<p>主要特点：</p>
<ul>
<li>不能替代成熟的商业服务器，如<code>Jetty</code>、<code>Nginx</code> 和 <code>Apache Tomcat</code>等</li>
<li>不提供身份验证、访问控制或加密等安全功能</li>
<li>仅支持HTTP/1.1，不支持HTTPS</li>
<li>仅支持GET、HEAD请求，否则返回 501 Not Implemented 或 405 Not Allowed</li>
</ul>
<h2>命令行工具</h2>
<p>为了开始使用简单Web服务器，您需要准备一个<code>index.html</code>文件，并执行以下步骤：</p>
<ol>
<li>打开终端。</li>
<li>输入命令：<code>jwebserver</code>。</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ jwebserver
</code></pre></div><p>默认情况下，服务器将绑定到本地回环地址，并在端口8000上提供服务。看到类似以下的输出：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Binding to loopback by default. For all interfaces use <span class="token string">"-b 0.0.0.0"</span> or <span class="token string">"-b ::"</span><span class="token builtin class-name">.</span>
Serving /cwd and its subdirectories on <span class="token number">127.0</span>.0.1 port <span class="token number">8000</span>
URL: http://127.0.0.1:8000/
</code></pre></div><p>尝试访问一下 <code>http://127.0.0.1:8000/</code> ，就可以获得之前准备的HTML内容了。</p>
<h3>支持的命令行选项</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>选项：
       <span class="token parameter variable">-h</span> 或 -? 或 <span class="token parameter variable">--help</span>
              打印帮助信息并退出.

       <span class="token parameter variable">-b</span> addr 或 --bind-address addr
              指定绑定的地址。默认：127.0.0.1或::1（回环地址）。要使用所有接口，请使用 <span class="token parameter variable">-b</span> <span class="token number">0.0</span>.0.0 或 <span class="token parameter variable">-b</span> ::.

       <span class="token parameter variable">-d</span> <span class="token function">dir</span> 或 <span class="token parameter variable">--directory</span> <span class="token function">dir</span>
              指定要提供服务的目录。默认：当前目录.

       <span class="token parameter variable">-o</span> level 或 <span class="token parameter variable">--output</span> level
              指定输出格式。none <span class="token operator">|</span> info <span class="token operator">|</span> verbose。默认：info.

       <span class="token parameter variable">-p</span> port 或 <span class="token parameter variable">--port</span> port
              指定要监听的端口。默认：8000.

       <span class="token parameter variable">-version</span> 或 <span class="token parameter variable">--version</span>
              打印版本信息并退出。

       要停止服务器，请按 Ctrl + C.
</code></pre></div><h2>API编程方式</h2>
<p>尽管命令行工具提供了便利，但为了更灵活地定制处理程序的行为，与现有代码集成，提高代码的可读性和可维护性，我们引入了新的API。</p>
<blockquote>
<p>新的API中引入了三个新的类是<code>SimpleFileServer</code>、<code>HttpHandlers</code>和<code>Request</code>，
每个类都构建在<code>com.sun.net.httpserver</code>包中的现有类和接口上：<code>HttpServer</code>、<code>HttpHandler</code>、<code>Filter</code>和<code>HttpExchange</code>。</p>
</blockquote>
<h3>简单文件服务器（SimpleFileServer）</h3>
<p><code>SimpleFileServer</code>支持创建文件服务器、文件服务器处理程序和输出过滤器。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFileServer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建文件服务器实例</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token number">1</span> <span class="token function">createFileServer</span><span class="token punctuation">(</span>
        <span class="token class-name">InetSocketAddress</span> addr<span class="token punctuation">,</span> <span class="token class-name">Path</span> rootDirectory<span class="token punctuation">,</span> <span class="token class-name">OutputLevel</span> outputLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>          
    
    <span class="token comment">// 创建文件服务器处理程序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpHandler</span> <span class="token function">createFileHandler</span><span class="token punctuation">(</span>
        <span class="token class-name">Path</span> rootDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    
    <span class="token comment">// 创建输出过滤器</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Filter</span> <span class="token function">createOutputFilter</span><span class="token punctuation">(</span>
        <span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token class-name">OutputLevel</span> outputLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div><p>有了这个类，在<code>jshell</code>中只需几行代码，就可以启动一个最小但定制的<strong>文件服务器</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> server <span class="token operator">=</span> <span class="token class-name">SimpleFileServer</span><span class="token punctuation">.</span><span class="token function">createFileServer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"/some/path"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SimpleFileServer<span class="token punctuation">.</span>OutputLevel</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>相当于命令行模式的：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jwebserver <span class="token parameter variable">-p</span> <span class="token number">8080</span> <span class="token parameter variable">-d</span> /some/path <span class="token parameter variable">-o</span> info
</code></pre></div><h3>自定义处理程序和过滤器</h3>
<p>将自定义的<strong>文件服务器处理程序</strong>添加到现有服务器：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token class-name">SimpleFileServer</span><span class="token punctuation">.</span><span class="token function">createFileHandler</span><span class="token punctuation">(</span><span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"/some/path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> server <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"/store/"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomePutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">"/browse/"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>将自定义的<strong>输出过滤器</strong>在创建过程中添加到服务器：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> filter <span class="token operator">=</span> <span class="token class-name">SimpleFileServer</span><span class="token punctuation">.</span><span class="token function">createOutputFilter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token class-name">OutputLevel</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> <span class="token keyword">var</span> server <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"/store/"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomePutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
jshell<span class="token operator">&gt;</span> server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>两个例子是由<code>HttpServer</code>和<code>HttpsServer</code>类中的新重载<code>create</code>方法启用的：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServer</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span> addr<span class="token punctuation">,</span>
                                <span class="token keyword">int</span> backlog<span class="token punctuation">,</span>
                                <span class="token class-name">String</span> root<span class="token punctuation">,</span>
                                <span class="token class-name">HttpHandler</span> handler<span class="token punctuation">,</span>
                                <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> filters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre></div><h3>增强的请求处理（HttpHandlers）</h3>
<p>简单Web服务器的核心功能是<strong>处理程序</strong>。为了与现有代码兼容，我们引入了<code>HttpHandlers</code>类，
提供两个静态方法用于<mark>创建</mark>和<mark>自定义处理程序</mark>，还有<code>Filter</code>类中的新方法用于适配请求：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HttpHandlers</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// handleOrElse方法补充条件处理程序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpHandler</span> <span class="token function">handleOrElse</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&gt;</span></span> handlerTest<span class="token punctuation">,</span>
                                           <span class="token class-name">HttpHandler</span> handler<span class="token punctuation">,</span>
                                           <span class="token class-name">HttpHandler</span> fallbackHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    
    <span class="token comment">// of方法创建具有预设响应状态的处理程序</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpHandler</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">int</span> statusCode<span class="token punctuation">,</span> <span class="token class-name">Headers</span> headers<span class="token punctuation">,</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token comment">// adaptRequest方法获取预处理过滤器，用于在处理请求之前检查和调整请求的某些属性</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Filter</span> <span class="token function">adaptRequest</span><span class="token punctuation">(</span>
        <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&gt;</span></span> requestOperator<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这些方法的用例包括基于请求方法委托交换，创建总是返回特定响应的“canned response”处理程序，或向所有传入请求添加标头。</p>
<h3>请求（Request）</h3>
<p>现有API中，使用HttpExchange类来表达HTTP<mark>请求-响应对</mark>，描述了请求-响应交换的完整可变状态。
然而，并非所有这状态对于处理程序的定制和适配都是必要的。
因此，我们引入了更简单的Request接口，提供<mark>请求</mark>的不可变状态的有限视图。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
    <span class="token class-name">URI</span> <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取请求的URI</span>
    <span class="token class-name">String</span> <span class="token function">getRequestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取请求的方法</span>
    <span class="token class-name">Headers</span> <span class="token function">getRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取请求的标头</span>
    <span class="token comment">// 用于修改请求头部信息</span>
    <span class="token keyword">default</span> <span class="token class-name">Request</span> <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">String</span> headerName<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headerValues<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这使得可以直接定制现有的处理程序，例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建一个处理程序，根据请求方法选择对应的处理器，如果请求方法为 PUT，则使用 SomePutHandler，否则使用 SomeHandler</span>
<span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token class-name">HttpHandlers</span><span class="token punctuation">.</span><span class="token function">handleOrElse</span><span class="token punctuation">(</span>r <span class="token operator">-&gt;</span> 
    r<span class="token punctuation">.</span><span class="token function">getRequestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PUT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomePutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个过滤器，用于修改请求头部信息，在请求中添加名为 "Foo" 的头部，值为 "Bar"</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token function">adaptRequest</span><span class="token punctuation">(</span><span class="token string">"Add Foo header"</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个 HTTP 服务器，并指定端口为 8080，最大连接数为 10，根路径为 "/"，处理程序为 h，过滤器为 f</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 启动服务器</span>
s<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>替代品</h2>
<p><strong>命令行工具</strong>的替代方案：</p>
<ul>
<li>最初，使用 <code>java -m jdk.httpserver</code> 命令运行 Simple Web Server，没有专门的命令行工具</li>
<li>为了提高便利性和可访问性，我们引入了一个专门的工具 <code>jwebserver</code>
<ul>
<li>实际上 <code>jwebserver</code> 在后台使用了 <code>java -m ...</code> 命令</li>
</ul>
</li>
</ul>
<p><strong>API编程方式</strong>替代方案：</p>
<ul>
<li>新的 <code>DelegatingHandler</code> 类：捆绑定制方法在一个单独的类中，但由于引入了新类型并未添加更多功能，我们放弃了这个选项。</li>
<li>将 <code>HttpHandler</code> 作为服务：将 <code>HttpHandler</code> 转换为服务，并提供内部文件服务器处理程序实现。然而，这种方法对于我们要提供的功能来说过于复杂。</li>
<li>使用<strong>过滤器</strong>而不是 <code>HttpHandler</code>：仅使用过滤器来处理请求，但这样做不符合直觉，并且过滤器的方法会更难找到。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 18 新特性：新增@snipppet标签</title>
      <link>https://www.geekyspace.cn/java-features/Java18/jep413-code-snippets-in-api-documentation.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java18/jep413-code-snippets-in-api-documentation.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 18 新特性：新增@snipppet标签</source>
      <description>Java 18 新特性：新增@snipppet标签 Java 18 引入了@snippet标签，用于在API文档中嵌入代码片段，以便更好地展示API的使用方法。 主要特点： 有效性检查，代码包含语法错误时，会出现错误提示 启用现代样式，例如语法高亮显示，以及名称与声明的自动链接 为创建和编辑代码段提供更好的IDE支持 存在的@code标签 用于单独的小...</description>
      <category>Java</category>
      <pubDate>Wed, 03 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 18 引入了<code>@snippet</code>标签，用于在API文档中嵌入代码片段，以便更好地展示API的使用方法。</p>
<p>主要特点：</p>
<ul>
<li>有效性检查，代码包含语法错误时，会出现错误提示</li>
<li>启用现代样式，例如语法高亮显示，以及名称与声明的自动链接</li>
<li>为创建和编辑代码段提供更好的IDE支持</li>
</ul>
<h2>存在的@code标签</h2>
<p>用于单独的小段代码, 当代码片段复杂时, 使用复合模式的文档注释，如下所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token operator">*</span> <span class="token generics"><span class="token punctuation">&lt;</span>pre<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token annotation punctuation">@code</span>
 <span class="token operator">*</span>     源代码行<span class="token number">1</span>
 <span class="token operator">*</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
 <span class="token operator">*</span>     源代码行n
 <span class="token operator">*</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span>
</code></pre></div><h2>引入@snippet标签</h2>
<p>解决了<code>@code</code>标签的不足，允许在API文档中直接嵌入代码片段，以便更好地展示API的使用方法。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 以下代码显示了如何使用 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Optional</span><span class="token punctuation">.</span>isPresent</span></span><span class="token punctuation">}</span>:
 * <span class="token punctuation">{</span><span class="token keyword">@snippet</span> :
 * if (v.isPresent()) <span class="token punctuation">{</span>
 *     System.out.println("v: " + v.get());
 * <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
</code></pre></div><p>作为外部片段导入</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 以下代码显示了如何使用 <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Optional</span><span class="token punctuation">.</span>isPresent</span></span><span class="token punctuation">}</span>:
 * <span class="token punctuation">{</span><span class="token keyword">@snippet</span> file="ShowOptional.java" region="example"<span class="token punctuation">}</span>
 */</span>
</code></pre></div><p>其中<code>ShowOptional.java</code>是一个包含以下内容的文件：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShowOptional</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// @start region="example"</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v: "</span> <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// @end</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 17 新特性：switch模式匹配（Preview）</title>
      <link>https://www.geekyspace.cn/java-features/Java17/jep406-pattern-matching-for-switch-preview.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java17/jep406-pattern-matching-for-switch-preview.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 17 新特性：switch模式匹配（Preview）</source>
      <description>Java 17 新特性：switch模式匹配（Preview） 当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看： 增强类型检查 switch表达式和语句的完整性 模式变量声明的作用域 处理null 模式匹配设计 增强类型检查 通过扩展switch模式匹配的case标签，现在支持除了原始数据类型（char、byte、short 或 i...</description>
      <category>Java</category>
      <pubDate>Sat, 30 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>当case标签可以有模式时，有如下四个主要的设计问题，我们一一来看：</p>
<ol>
<li>增强类型检查</li>
<li>switch表达式和语句的完整性</li>
<li>模式变量声明的作用域</li>
<li>处理null</li>
</ol>
<h2>模式匹配设计</h2>
<h3>增强类型检查</h3>
<p>通过扩展<code>switch</code>模式匹配的<code>case</code>标签，现在支持除了<strong>原始数据类型</strong>（<code>char</code>、<code>byte</code>、<code>short</code> 或 <code>int</code>）之外，
相应的<strong>包装类</strong>（<code>Character</code>、<code>Byte</code>、<code>Short</code> 或 <code>Integer</code>）、<code>String</code> 以及<code>Enum</code>类型等<strong>任何引用类型</strong>。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLUE</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">typeTester</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span>     <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Color</span> c  <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enum，颜色具有 "</span> <span class="token operator">+</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">" 个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Point</span> p  <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Record Class: "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ia <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Array，长度为"</span> <span class="token operator">+</span> ia<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>       <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其他情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p><strong>注意⚠️：要避免模式标签支配</strong>（编译异常）</p>
<p>如果一个模式标签在switch块中被先前的模式标签支配, 或者存在多个全匹配的标签（default 和 total类型模式）, 则会产生编译时错误。</p>
</blockquote>
<ul>
<li>例1: 模式 <code>case CharSequence cs</code> 支配 <code>case String s</code> ,因为 String 是 CharSequence 的子类</li>
<li>例2: 总模式的情况，如 <code>case p</code> 支配 <code>case null</code> 模式,因为总模式匹配所有值，包括null</li>
<li>例3: 模式 <code>case p</code> 支配 <code>case p &amp;&amp; e</code> ,因为满足第一个模式的值也满足第二个模式</li>
<li>例4: 模式 <code>case String s</code> 支配了带条件的模式 <code>case String s &amp;&amp; s.length() &gt; 0</code></li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">CharSequence</span> cs <span class="token operator">-&gt;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个长度为"</span> <span class="token operator">+</span> cs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的序列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span>    <span class="token comment">// 编译错误 - 模式被前一个模式支配</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个字符串："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>switch表达式和语句的完整性</h3>
<p>通常情况下，通过添加<code>default</code>标签，可以确保<code>switch</code>块的完整性。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printType</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果switch表达式的类型是<strong>密封类</strong>(<a href="https://openjdk.org/jeps/409" target="_blank" rel="noopener noreferrer">JEP 409</a>)，
则类型覆盖检查会考虑密封类的permits子句，以确保switch块的完整性。</p>
<p>以下是一个密封接口Animal的示例，包括Dog和Cat两个允许的子类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">sealed</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token keyword">permits</span> <span class="token class-name">Dog</span><span class="token punctuation">,</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSound</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Dog</span> d <span class="token operator">-&gt;</span> <span class="token string">"Woof!"</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Cat</span> c <span class="token operator">-&gt;</span> <span class="token string">"Meow!"</span><span class="token punctuation">;</span>
        <span class="token comment">// no default needed!</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在这种情况下，由于编译器知道只有Dog和Cat是可能的类型，所以可以不需要<code>default</code>标签。
同样，对于枚举类，每个常量都有一个子句，也不需要default标签。</p>
<h3>模式变量声明的作用域</h3>
<p><code>instanceof</code>(<a href="https://openjdk.org/jeps/394" target="_blank" rel="noopener noreferrer">JEP 394</a>)进行<strong>模式匹配</strong>，
<strong>模式变量</strong>的作用域限定在<code>匹配的条件表达式</code>和相应的<code>then</code>块中。 如果匹配失败，模式变量在<code>else</code>块中不可见。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Not a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>switch</code>语句的<code>case</code>标签进行<strong>模式匹配</strong>，有以下两条规则：</p>
<ol>
<li>
<p><code>-&gt;</code>形式：作用域包括箭头右侧的表达式、块或 throw 语句</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Character</span> c <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ding!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Character"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Invalid Integer argument of value "</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>
<p><code>:</code>形式，则其作用域包括语句组的块语句，直到遇到下一个<code>switch</code>标签或其他控制流语句</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Character</span> c<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Ding "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Tab "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"character"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
</ol>
<h3>处理null</h3>
<p>引入新的<code>null</code>标签，用于明确处理选择表达式为<code>null</code>的情况</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// test(null) 不再抛出NullPointerException，而是打印 "null!"</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span>     <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"null!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>       <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Something else"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>由空标签产生的新标签形式， JDK 16中，<code>switch</code>块支持两种风格，</p>
<ol>
<li><code>:</code> 形式，允许<code>fallthrough</code>，多个标签通常写为<code>case l1: case l2:</code></li>
<li><code>-&gt;</code>形式，不允许<code>fallthrough</code>，多个标签写为<code>case l1, l2-&gt;</code></li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 处理 null 和 String 标签，使用 : 形式</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token class-name">String</span> s<span class="token operator">:</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String, including null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
   <span class="token comment">// 更多的 cases...</span>

<span class="token punctuation">}</span>

<span class="token comment">// 结合 null case 和 default 标签，使用 -&gt; 形式</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 更多的 cases...</span>
   <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token operator">-&gt;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The rest (including null)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>保护模式和括号模式</h2>
<p>为了增强代码的可读性并避免歧义，引入了两种新的模式匹配技术：</p>
<ul>
<li>保护模式 (guarded patterns)，允许在模式匹配成功后添加一个布尔表达式</li>
<li>括号模式 (parenthesized patterns)，将模式放在括号中，避免歧义，控制顺序</li>
</ul>
<p>在成功匹配模式后，我们经常会进一步测试匹配结果。这会导致代码变得繁琐，例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> s<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用<strong>保护模式</strong>，写成<code>p &amp;&amp; e</code>改进上面的代码，使其更加简洁</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s                    <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p>JDK 17中还加入了<strong>括号模式</strong>，以避免解析歧义。支持括号内写入<code>(p)</code> 其中p是一个模式。在JDK 21中，括号模式被移除。</p>
</blockquote>
<h2>启用预览功能</h2>
<p>Preview阶段的功能并不是默认开启的，需要在编译和运行时启用。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> --enable-preview <span class="token parameter variable">--source</span> <span class="token number">17</span> PatternMatching.java
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 17 新特性：sealed类</title>
      <link>https://www.geekyspace.cn/java-features/Java17/jep409-sealed-classes.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java17/jep409-sealed-classes.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 17 新特性：sealed类</source>
      <description>Java 17 新特性：sealed类 Java 17 中引入了密封类（Sealed Classes），它是一种限制的类和接口， 可以控制哪些类继承或实现它，保证在编译时就能够确定类的继承关系，提高代码的可读性和可维护性。 密封类语法 密封类的声明使用关键字 sealed，并通过 permits 关键字声明允许继承或实现的类。 密封类对其允许的子类施加...</description>
      <category>Java</category>
      <pubDate>Sun, 31 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 17 中引入了<strong>密封类</strong>（Sealed Classes），它是一种限制的类和接口，
可以控制哪些类继承或实现它，保证在编译时就能够确定类的继承关系，提高代码的可读性和可维护性。</p>
<h2>密封类语法</h2>
<p>密封类的声明使用关键字 <code>sealed</code>，并通过 <code>permits</code> 关键字声明允许继承或实现的类。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 密封类</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> 类名 <span class="token keyword">extends</span> 父类名 <span class="token keyword">permits</span> 子类名<span class="token number">1</span><span class="token punctuation">,</span> 子类名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
  <span class="token comment">// 类的成员</span>
<span class="token punctuation">}</span>

<span class="token comment">// 密封接口</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">interface</span> 接口名 <span class="token keyword">extends</span> 父接口名 <span class="token keyword">permits</span> 子类名<span class="token number">1</span><span class="token punctuation">,</span> 子类名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
  <span class="token comment">// 接口的成员</span>
<span class="token punctuation">}</span>
</code></pre></div><p>密封类对其允许的子类施加了三个约束：</p>
<ol>
<li>密封类及其允许的子类必须属于同一个模块或同一包（对于未命名模块）</li>
<li>每个允许的子类必须直接扩展密封类</li>
<li>每个允许的子类必须使用修饰符描述其继承关系：
<ul>
<li><code>final</code>：表示该类不能被继承（记录类隐式声明为 <code>final</code>）</li>
<li><code>sealed</code>：表示该类可以被继承，但只能被允许的子类继承</li>
<li><code>non-sealed</code>：表示该类可以被继承，且可以被任意类继承</li>
</ul>
</li>
</ol>
<h2>历史限制继承手段</h2>
<p>对于继承能力的限制，Java 语言已经提供了以下几种手段：</p>
<ol>
<li><code>final</code>修饰类，这样类就无法被继承了</li>
<li>构造函数声明为<code>private</code>或<code>package-private</code>，则只能在同一类或同一包中创建该类的子类</li>
</ol>
<h2>发展脉络</h2>
<p>该功能经历了2个预览版本（JDK 15中的JEP 360、JDK 16中的JEP 397），最终定稿于JDK 17中的JEP 409。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 16 新特性：instanceof 模式匹配</title>
      <link>https://www.geekyspace.cn/java-features/Java16/jep394-pattern-matching-for-instanceof.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java16/jep394-pattern-matching-for-instanceof.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 16 新特性：instanceof 模式匹配</source>
      <description>Java 16 新特性：instanceof 模式匹配 Java 16 引入了instanceof模式匹配的增强语法，用于更简便地判断对象是否是某个类的实例并进行相应的局部类型转换。 instanceof 基础用法 这个强制转换通常是在 instanceof 检查之后 的第一件事，所以为什么不围绕它优化一下语法呢？ instanceof 增强用法 若 ...</description>
      <category>Java</category>
      <pubDate>Thu, 28 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 16 引入了<code>instanceof</code><strong>模式匹配</strong>的增强语法，用于更简便地判断对象是否是某个类的实例并进行相应的<strong>局部类型转换</strong>。</p>
<h2>instanceof 基础用法</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> someString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>  <span class="token comment">// 强制类型转换</span>
    <span class="token comment">// ... </span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个<strong>强制转换</strong>通常是在 <code>instanceof</code> 检查之后 的第一件事，所以为什么不围绕它优化一下语法呢？</p>
<h2>instanceof 增强用法</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> someString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这里 someString 超出了作用域</span>
</code></pre></div><ol>
<li>若 <code>instanceof</code> 检查成功，将自动将变量转换为指定类型</li>
<li>定义的变量实质上是一个<strong>局部变量</strong>，只在if语句的范围内可见</li>
</ol>
<h2>常见用法建议</h2>
<p>不仅如此！使用模式匹配，我们可以更灵活地应用条件测试。</p>
<ul>
<li>
<p>利用已定义的 obj，在不需要额外嵌套的情况下判断字符串是否以“Awesome”开头</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 以前</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>someObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> someObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Awesome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 现在</span>
<span class="token keyword">return</span> someObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span> someString <span class="token operator">&amp;&amp;</span> someString<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Awesome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>
<p>甚至在 equals 方法中，代码会更加简洁</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 以前</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 现在</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">==</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
</ul>
<p>多么不同！现在代码简洁而直观。</p>
<h2>发展脉络</h2>
<p>该功能经历了2个预览版本（JDK 14中的JEP 305、JDK 15中的JEP 375），最终定稿于JDK 16中的JEP 394。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 16 新特性：record类</title>
      <link>https://www.geekyspace.cn/java-features/Java16/jep395-records.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java16/jep395-records.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 16 新特性：record类</source>
      <description>Java 16 新特性：record类 Java 16 引入的记录类（Records Classes）是一种用于简化不可变数据管理的特殊类。 它通过紧凑的语法提供了对不可变数据的支持，并自动生成常见的方法， 如equals()、hashCode()和toString()等，从而减少了开发者的样板代码。 传统Java Bean问题 在处理不可变数据时，传...</description>
      <category>Java</category>
      <pubDate>Fri, 29 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 16 引入的<strong>记录类</strong>（Records Classes）是一种用于简化不可变数据管理的特殊类。
它通过紧凑的语法提供了对不可变数据的支持，并自动生成常见的方法，
如<code>equals()</code>、<code>hashCode()</code>和<code>toString()</code>等，从而减少了开发者的样板代码。</p>
<h2>传统Java Bean问题</h2>
<p>在处理不可变数据时，传统的Java Bean存在“<mark>繁琐</mark>”和“<mark>冗长</mark>”的问题。
为了管理少量值的不可变数据，开发者需要编写大量低价值、重复且容易出错的代码，
包括<code>构造函数</code>、<code>访问器(getter/setter)</code>、<code>equals</code>、<code>hashCode</code>、<code>toString</code>等。</p>
<p>例如，用于携带x和y坐标的类通常会演变成以下繁琐形式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>

    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Point</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> other<span class="token punctuation">.</span>x <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span>y <span class="token operator">==</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Point[x=%d, y=%d]"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>引入record类</h2>
<p><strong>语法如下</strong>：使用 <code>record</code><mark>关键字</mark>，指定<mark>类名称</mark>为 Point，定义<mark>参数列表</mark> x 和 y 作为组件</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>record申明的类，具备这些特点：</p>
<ol>
<li>它是一个<code>final</code>类</li>
<li>自动实现<code>equals</code>、<code>hashCode</code>、<code>toString</code>函数</li>
<li>成员变量均为<code>public</code>属性</li>
</ol>
<p>所以，对于之前写的Point类，它等价于一个这样的类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Record类声明，使用record关键字，名称为Point，带有两个参数x和y</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 自动生成成员变量（fields）</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>

    <span class="token comment">// 2. 自动生成构造函数(constructor)</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3. 自动生成的访问方法</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> x <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> y <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 4. 自动生成equals和hashCode方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> equals <span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 实现相等性比较的逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> hashCode <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成哈希码的逻辑</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 5. 自动生成toString方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Point{"</span> <span class="token operator">+</span>
                <span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span>
                <span class="token string">", y="</span> <span class="token operator">+</span> y <span class="token operator">+</span>
                <span class="token char">'}'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>通过使用record类，你可以更专注于业务逻辑而不是样板代码，提高了代码的可读性和可维护性。</p>
<h2>显示声明紧凑构造函数</h2>
<p>未显式声明构造函数时，系统会自动生成包含所有成员变量的隐式构造函数。
当显式声明紧凑构造函数可以<mark>省略形式参数列表</mark>、编译后在构造函数的末尾<mark>自动分配</mark>给相应的形式参数（this.x = x;）。</p>
<ul>
<li>
<p><strong>验证参数</strong>的紧凑构造函数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">,</span> <span class="token keyword">int</span> pageCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Book</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"页数必须大于零."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>
<p><strong>规范</strong>的紧凑构造函数</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 记录类 Rational 表示有理数，包含分子（num）和分母（denom）两个成员变量</span>
<span class="token keyword">record</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> denom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Rational</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> denom<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 计算最大公约数</span>
        num <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>                 <span class="token comment">// 将分子除以最大公约数</span>
        denom <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>               <span class="token comment">// 将分母除以最大公约数</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个声明等同于传统的构造函数形式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> denom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Rational</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> demon<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 逻辑代码</span>
        <span class="token keyword">int</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> denom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>
        denom <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>
        <span class="token comment">// 赋值代码</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>denom <span class="token operator">=</span> denom<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>
<p>记录类<strong>语义一致性</strong></p>
<p>例如，考虑以下方式声明的记录类R：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token class-name">T1</span> c1<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token class-name">Tn</span> cn<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>如果通过以下方式复制R的实例r1：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">R</span> r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r1<span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> r1<span class="token punctuation">.</span><span class="token function">cn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>则假设 r1 不是空引用，表达式 r1.equals(r2) 总是为 true。
这是因为记录类的隐式声明的 equals 方法保证了相同字段值的两个记录实例相等。</p>
<blockquote>
<p>Tips: 程序员需要谨慎确保显式声明的方法维持语义一致性</p>
</blockquote>
</li>
<li>
<p>避免不良风格的代码</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">SmallPoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这是一个不良风格的代码，违反了语义一致性的原则，访问器<code>x()</code>,<code>y()</code>方法调整类实例的状态；
<strong>改进建议</strong>， 如果需要限制坐标值的范围，应该在构造函数或其他明确的位置处理。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">SmallPoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 紧凑构造函数中限制坐标值的范围</span>
  <span class="token keyword">public</span> <span class="token class-name">SmallPoint</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
</ul>
<h2>发展脉络</h2>
<p><code>record</code> 类最初在JDK 14预览版(JEP 359)提出，随后在JDK 15预览版(JEP 384)再次推出。
最终，它在JDK 16中(JEP 395)正式发布，成为Java语言的一项重要特性。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 15 新特性：隐藏类（Hidden Classes）</title>
      <link>https://www.geekyspace.cn/java-features/Java15/jep371-hidden-classes.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java15/jep371-hidden-classes.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 15 新特性：隐藏类（Hidden Classes）</source>
      <description>Java 15 新特性：隐藏类（Hidden Classes） 隐藏类（Hidden Classes） 提供了一种在运行时生成类的机制，在编译时未知，并且不能直接在源代码中引用， 需要通过反射间接使用它们，隐藏类是为框架设计的，具有以下特性： 动态生成内部类：隐藏类天生为框架设计，在运行时生成内部类 反射访问限制：隐藏类只能通过反射访问，不能直接被其他...</description>
      <category>Java</category>
      <pubDate>Tue, 26 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p><strong>隐藏类</strong>（Hidden Classes） 提供了一种在运行时生成类的机制，在编译时未知，并且不能直接在源代码中引用，
需要通过反射间接使用它们，隐藏类是为框架设计的，具有以下特性：</p>
<ul>
<li><strong>动态生成内部类</strong>：隐藏类天生为框架设计，在运行时生成内部类</li>
<li><strong>反射访问限制</strong>：隐藏类只能通过反射访问，不能直接被其他类的字节码访问</li>
<li><strong>独立加载和卸载</strong>：隐藏类可以独立于其他类加载和卸载</li>
<li><strong>框架扩展性</strong>：适用于需要在运行时生成类的框架，提高语言的灵活性和效率</li>
</ul>
<h2>原理</h2>
<h2>框架中应用</h2>
<p><a href="https://bugs.openjdk.org/browse/JDK-8220607" target="_blank" rel="noopener noreferrer">https://bugs.openjdk.org/browse/JDK-8220607</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 15 新特性：文本块（Text Blocks）</title>
      <link>https://www.geekyspace.cn/java-features/Java15/jep378-text-blocks.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java15/jep378-text-blocks.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 15 新特性：文本块（Text Blocks）</source>
      <description>Java 15 新特性：文本块（Text Blocks） Java 15(JEP 378)引入了文本块（Text Blocks）这一新特性，旨在简化多行字符串的表示，提高代码可读性，并减少在字符串中使用转义符的需求。 文本块通过引入三个双引号的胖分隔符（&amp;quot;&amp;quot;&amp;quot;）来实现，同时支持转义序列，为开发人员提供更直观、易读的字符串处理方式。 快速上手 HTML示...</description>
      <category>Java</category>
      <pubDate>Wed, 27 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 15(JEP 378)引入了<strong>文本块</strong>（Text Blocks）这一新特性，旨在简化多行字符串的表示，提高代码可读性，并减少在字符串中使用转义符的需求。
文本块通过引入三个双引号的<strong>胖分隔符</strong>（<code>"""</code>）来实现，同时支持转义序列，为开发人员提供更直观、易读的字符串处理方式。</p>
<h2>快速上手</h2>
<p><strong>HTML示例</strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用“一维”字符串文字</span>
<span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token string">"&lt;html&gt;\n"</span> <span class="token operator">+</span>
              <span class="token string">"    &lt;body&gt;\n"</span> <span class="token operator">+</span>
              <span class="token string">"        &lt;p&gt;Hello, world&lt;/p&gt;\n"</span> <span class="token operator">+</span>
              <span class="token string">"    &lt;/body&gt;\n"</span> <span class="token operator">+</span>
              <span class="token string">"&lt;/html&gt;\n"</span><span class="token punctuation">;</span>

<span class="token comment">// 使用“二维”文本块</span>
<span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""
              &lt;html&gt;
                  &lt;body&gt;
                      &lt;p&gt;Hello, world&lt;/p&gt;
                  &lt;/body&gt;
              &lt;/html&gt;
              """</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>SQL示例</strong></p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">// 使用“一维”字符串文字</span>
String query <span class="token operator">=</span> <span class="token string">"SELECT \"EMP_ID\", \"LAST_NAME\" FROM \"EMPLOYEE_TB\"\n"</span> <span class="token operator">+</span>
               <span class="token string">"WHERE \"CITY\" = 'INDIANAPOLIS'\n"</span> <span class="token operator">+</span>
               <span class="token string">"ORDER BY \"EMP_ID\", \"LAST_NAME\";\n"</span><span class="token punctuation">;</span>

<span class="token comment">// 使用“二维”文本块</span>
String query <span class="token operator">=</span> <span class="token string">"""
               SELECT "</span>EMP_ID<span class="token string">", "</span>LAST_NAME<span class="token string">" FROM "</span>EMPLOYEE_TB<span class="token string">"
               WHERE "</span>CITY<span class="token string">" = 'INDIANAPOLIS'
               ORDER BY "</span>EMP_ID<span class="token string">", "</span>LAST_NAME<span class="token string">";
               """</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>Polyglot语言示例</strong></p>
<div class="language-polyglot" data-ext="polyglot" data-title="polyglot"><pre class="language-polyglot"><code>// 使用“一维”字符串文字
ScriptEngine engine = new ScriptEngineManager().getEngineByName("js");
Object obj = engine.eval("function hello() {\n" +
                         "    print('\"Hello, world\"');\n" +
                         "}\n" +
                         "\n" +
                         "hello();\n");

// 使用“二维”文本块
ScriptEngine engine = new ScriptEngineManager().getEngineByName("js");
Object obj = engine.eval("function hello() {\n" +
                         "    print('\"Hello, world\"');\n" +
                         "}\n" +
                         "\n" +
                         "hello();\n");
</code></pre></div><h2>编译时处理</h2>
<p>文本块是String类型的常量表达式，类似于字符串字面量。然而，与字符串字面值不同，文本块的内容在编译时经历三个步骤的处理：<mark>行终止符的规范化</mark>、<mark>附带白色空间的移除</mark>和<mark>解释转义序列</mark>：</p>
<ol>
<li>转换内容的行终止符
<ul>
<li>行终止符从CR（\u000D）和CRLF（\u000D\u000A）规范化为<code>LF（\u000A）</code></li>
</ul>
</li>
<li>删除内容周围附带的白色空间（用于匹配Java源代码的缩进）</li>
<li>解释内容中的转义序列，执行解释作为最后一步开发人员可以编写转义序列，如\n，而不会被前面的步骤修改或删除</li>
</ol>
<p>处理后的内容以<code>CONSTANT_String_info</code>形式记录在<strong>类文件的常量池</strong>中，运行时，文本块被计算为String的实例。</p>
<h2>新增转义序列</h2>
<p>为了更精细地控制<mark>换行符</mark>和<mark>空格</mark>的处理，引入了两个新的转义序列：\ &lt;line-terminator&gt; 和 \s。</p>
<h3>换行符 \ &lt;line-terminator&gt;</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 传统方式</span>
<span class="token class-name">String</span> literal <span class="token operator">=</span> <span class="token string">"Lorem ipsum dolor sit amet, consectetur adipiscing "</span> <span class="token operator">+</span>
                 <span class="token string">"elit, sed do eiusmod tempor incididunt ut labore "</span> <span class="token operator">+</span>
                 <span class="token string">"et dolore magna aliqua."</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 \ &lt;line-terminator\&gt;</span>
<span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span>"
              <span class="token class-name">Lorem</span> ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipiscing \
              elit<span class="token punctuation">,</span> sed <span class="token keyword">do</span> eiusmod tempor incididunt ut labore \
              et dolore magna aliqua<span class="token punctuation">.</span>\
              <span class="token string">""</span>"<span class="token punctuation">;</span>
</code></pre></div><blockquote>
<p>Tips： 因为字符和传统字符串不允许嵌入换行符，所以\ &lt;line-terminator&gt; 转义序列只适用于文本块</p>
</blockquote>
<h3>单个空格 \s</h3>
<p>新的 \s 转义序列简单地转换为单个空格（\u0020）</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用 \s 保持固定长度</span>
<span class="token class-name">String</span> colors <span class="token operator">=</span> <span class="token triple-quoted-string string">"""
    red  \s
    green\s
    blue \s
    """</span><span class="token punctuation">;</span>
</code></pre></div><p>转义序列直到去除无意义的空格后才被解释，\s 可以作为栅栏，防止尾随空格被去除。
在这个示例中，每行末尾使用 \s 可以确保每行长度恰好为六个字符。</p>
<h2>文本块连接</h2>
<p>文本块的连接是引入的一个方便的特性，使得字符串的拼接变得更加简洁。
在连接时，相邻的文本块将自动合并，无需显式使用加号连接操作符。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 字符串和文本块连接</span>
<span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">"public void print(Object o) {"</span> <span class="token operator">+</span>
              <span class="token triple-quoted-string string">"""
                  System.out.println(Objects.toString(o));
              }
              """</span><span class="token punctuation">;</span>
                      
<span class="token comment">// 相邻的文本块将自动合并，无需显式使用加号连接操作符</span>
<span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token triple-quoted-string string">"""
              public void print(Object o) {
              """</span>
              <span class="token triple-quoted-string string">"""
                  System.out.println(Objects.toString(o));
              }
              """</span><span class="token punctuation">;</span>
</code></pre></div><p>在上述示例中，两个相邻的文本块会自动连接，形成一个整体的字符串。
这种自动连接的特性让代码更加清晰，减少了冗余的拼接操作。</p>
<h2>文本块新方法</h2>
<p>文本块引入了一些新方法，以便更方便地处理多行字符串：</p>
<ul>
<li><code>String::stripIndent()</code>：去除多行字符串的前导空格</li>
<li><code>String::translateEscapes()</code>：转义多行字符串中的转义字符</li>
<li><code>String::formatted()</code>：在文本块中使用占位符进行值替换</li>
<li><code>String::lines()：</code>：将多行字符串拆分为行的流，方便逐行处理。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 14 新特性：switch表达式增强</title>
      <link>https://www.geekyspace.cn/java-features/Java14/jep361-switch-expressions.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java14/jep361-switch-expressions.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 14 新特性：switch表达式增强</source>
      <description>Java 14 新特性：switch表达式增强 Java 14(JEP 361)引入了 switch 表达式的新特性，其中包括了 &amp;quot;箭头标签（case ... -&amp;gt;）&amp;quot; 和 yield 语句的增强， 同时支持 Lambda 语法，使得代码更加灵活、简洁，并为未来的模式匹配(JEP 305)特性做好了准备。 传统的switch语句 首先，让我们回顾一下传...</description>
      <category>Java</category>
      <pubDate>Mon, 25 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 14(JEP 361)引入了 switch 表达式的新特性，其中包括了 "<strong>箭头标签</strong>（<code>case ... -&gt;</code>）" 和 <code>yield</code> 语句的增强，
同时支持 <code>Lambda</code> 语法，使得代码更加灵活、简洁，并为未来的<strong>模式匹配</strong>(JEP 305)特性做好了准备。</p>
<h2>传统的switch语句</h2>
<p>首先，让我们回顾一下传统的switch语句，它们在处理多个条件时可能显得有些冗长：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">FRIDAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SUNDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token constant">SATURDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>传统的 switch 语句存在以下问题：</p>
<ol>
<li>设计受到C和C++等低级语言的影响，且默认支持fall through语义</li>
<li>过多的<code>break</code>语句使得代码显得冗长</li>
</ol>
<h2>switch表达式增强</h2>
<h3>箭头标签（case L -&gt;）</h3>
<ol>
<li>引入了一种新的开关标签"<code>case L -&gt;</code>"，用于表示只有一个分支的情况</li>
<li>允许每种情况下有多个常量，用逗号分隔</li>
<li>标签右侧的代码仅限于表达式、块或抛出异常throw语句</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span>                <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span>     <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span>              <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>局部变量独立作用域</h3>
<p>在 Java 14 中，允许在每个分支中声明局部变量，避免块中变量命名冲突和误用。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>switch (day) {
    case MONDAY:
    case TUESDAY:
        int temp = ...     // 'temp'的作用域延续到 }
        break;
    case WEDNESDAY:
    case THURSDAY:
        int temp2 = ...    // 不能将此变量命名为'temp'
        break;
    default:
        int temp3 = ...    // 不能将此变量命名为'temp'
}
</code></pre></div><h3>switch表达式</h3>
<p>Switch 表达式被引入，允许将 <code>switch</code> 语句用作表达式，通过 <code>Lambda</code> 语法，根据输入值返回不同的结果。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 根据输入值`k`的不同，返回不同的字符串，并通过`System.out.println`打印结果</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">howMany</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span>  <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token string">"one"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span>  <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token string">"two"</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token string">"many"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Switch表达式的常见形式如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">L1</span> <span class="token operator">-&gt;</span> e1<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">L2</span> <span class="token operator">-&gt;</span> e2<span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> e3<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><blockquote>
<p>Switch表达式是多态表达式（poly expression）。</p>
<p>多态性是指在编译时不确定具体类型，而在运行时确定类型的特性。</p>
</blockquote>
<h3>yield语句返回值</h3>
<p>允许在switch表达式中使用<code>yield</code>语句，而不是使用<code>break</code>语句，用于返回一个值，结束switch表达式的执行。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> numLetters <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span>                <span class="token operator">-&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span>     <span class="token operator">-&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">performComplexCalculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在这里进行一些复杂的计算</span>
        <span class="token keyword">yield</span> temp<span class="token punctuation">;</span>                              <span class="token comment">// 使用yield返回计算结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2>发展脉络</h2>
<p>追溯JEP 361的发展历程：从JDK 12预览版(JEP 325)到JDK 13预览版(JEP 354)，
虽然部分功能在早期版本中已经出现，但建议在 JDK 14 及以后的版本中使用，以获得更好的稳定性和支持。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 11 新特性 ：移除JavaEE和CORBA模块以及JavaFX</title>
      <link>https://www.geekyspace.cn/java-features/Java11/jep320-remove-JavaEE-CORBA.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java11/jep320-remove-JavaEE-CORBA.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 11 新特性 ：移除JavaEE和CORBA模块以及JavaFX</source>
      <description>Java 11 新特性 ：移除JavaEE和CORBA模块以及JavaFX Java 11 中移除了 Java EE 和 CORBA 模块，同时 JavaFX 也被剥离，但仍可作为独立模块使用。 Java9 弃用过程 在 Java 9 中，Java EE 和 CORBA 模块被标记为 @Deprecated，为开发者提供了适应期。 Java11 彻底删...</description>
      <category>Java</category>
      <pubDate>Sun, 24 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 11 中移除了 <code>Java EE</code> 和 <code>CORBA</code> 模块，同时 <code>JavaFX</code> 也被剥离，但仍可作为独立模块使用。</p>
<h2>Java9 弃用过程</h2>
<p>在 Java 9 中，<code>Java EE</code> 和 <code>CORBA</code> 模块被标记为 @Deprecated，为开发者提供了适应期。</p>
<h2>Java11 彻底删除</h2>
<p>Java 11 完全删除了以下九个模块：</p>
<ul>
<li>java.xml.ws（包含 JAX-WS、SAAJ 和 Web 服务元数据）</li>
<li>java.xml.bind（JAXB）</li>
<li>java.activation(JAF)</li>
<li>java.xml.ws.annotation（常用注解）</li>
<li>java.corba（CORBA）</li>
<li>java.transaction(JTA)</li>
<li>java.se.ee (以上6个模块的聚合模块)</li>
<li>jdk.xml.ws (JAX-WS 工具)</li>
<li>jdk.xml.bind (JAXB 工具)</li>
</ul>
<p>删除后的影响：</p>
<ul>
<li>源代码从 OpenJDK 存储库中删除</li>
<li>在 JDK 运行时映像中将不包含这些类</li>
<li>相关工具将不再可用:
<ul>
<li>wsgen and wsimport (来自 jdk.xml.ws)</li>
<li>schemagen and xjc (来自 jdk.xml.bind)</li>
<li>idlj, orbd, servertool, and tnamesrv (来自 java.corba)</li>
</ul>
</li>
<li>JNDI CosNaming 提供者 (来自 java.corba) 将不再可用</li>
<li>不再有命令行标志能够启用它们，就像 JDK 9 上的 --add-modules 一样</li>
</ul>
<h2>JavaFX 移除</h2>
<p><code>JavaFX</code> 在 Java 11 中被移除，但仍可以作为独立模块使用。
开发者需要额外的配置和依赖，以在项目中继续使用 JavaFX 技术。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 10 新特性：局部变量类型推断</title>
      <link>https://www.geekyspace.cn/java-features/Java10/jep286-local-variable-type-inference.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java10/jep286-local-variable-type-inference.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 10 新特性：局部变量类型推断</source>
      <description>Java 10 新特性：局部变量类型推断 Java 10 引入了一项新的语言特性，即局部变量类型推断（Local-Variable Type Inference）， 它允许在局部变量声明时，根据变量的初始值，推断出变量的数据类型。 语法 局部变量类型推断的语法非常简单，只需要将 var 关键字作为局部变量的类型即可。 示例 相比传统的方式和 Java ...</description>
      <category>Java</category>
      <pubDate>Sat, 23 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 10 引入了一项新的语言特性，即<strong>局部变量类型推断</strong>（Local-Variable Type Inference），
它允许在局部变量声明时，根据变量的初始值，推断出变量的数据类型。</p>
<h2>语法</h2>
<p>局部变量类型推断的语法非常简单，只需要将 <code>var</code> 关键字作为局部变量的类型即可。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 自动推断 ArrayList&lt;String&gt;</span>
<span class="token keyword">var</span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 自动推断 Stream&lt;String&gt;</span>
</code></pre></div><h2>示例</h2>
<p>相比传统的方式和 Java 7 的钻石操作符（Diamond Operator），Java 10 的局部变量类型推断使得代码更加精炼：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 传统方式（等号两边都需要）</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Java7的钻石操作符（Diamond Operator）（只需要在左边申明类型即可）</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Java10的局部变量类型推断（类型在等号右边决定）</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在使用 var 进行局部变量类型推断时，需要注意以下几点：</p>
<ol>
<li>必须在声明的同时进行初始化</li>
<li>仅限于局部变量，不能用于定义成员变量、方法参数和返回类型</li>
<li>每次只能定义一个变量，不能复合声明多个变量</li>
</ol>
<p>通过使用局部变量类型推断，我们能够在不失代码可读性的前提下，减少了冗余的类型声明，使得代码更加简洁清晰。
这一特性尤其在Lambda表达式、集合初始化等场景下表现突出，提高了代码的书写效率。
在实际项目中，合理运用局部变量类型推断，将有助于代码的维护和阅读。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 8-21：前沿特性解读系列（持续连载）</title>
      <link>https://www.geekyspace.cn/java-features/</link>
      <guid>https://www.geekyspace.cn/java-features/</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 8-21：前沿特性解读系列（持续连载）</source>
      <description>Java 8-21：前沿特性解读系列（持续连载），截至2023年9月中旬，Java已达到第21版本。 尽管如此，众多开发者仍停滞在Java 8的认知水平。为填补这一差距，我们推出专栏，聚焦分享最新Java知识。</description>
      <category>Java</category>
      <pubDate>Wed, 20 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>为了帮助大家跟上最新的技术潮流，计划启动一个专栏，重点分享Java领域的前沿知识。
这个专栏将详细解读从<strong>Java 8 - 最新版本</strong>的各种有趣的新特性。
会持续不断地发布相关内容，希望大家能够关注并收藏起来，跟随我们一起深入了解Java的最新进展！</p>
<p>详细了解Java Enhancement Proposals（JEPs）及其最新动态</p>
<ul>
<li>🚀 访问官方网站：<a href="https://openjdk.java.net/jeps/" target="_blank" rel="noopener noreferrer">OpenJDK JEPs</a></li>
<li>❄️ 参考howtodoinjava博客：<a href="https://howtodoinjava.com/series/java-versions-features/" target="_blank" rel="noopener noreferrer">Java Versions and Features</a></li>
</ul>
<h2>Java 23(in development)</h2>
<h2>Java 22(GA 2024/03/19)</h2>
<ul>
<li>423:    Region Pinning for G1</li>
<li>447:    Statements before super(...) (Preview)</li>
<li>454:    Foreign Function &amp; Memory API</li>
<li>456:    Unnamed Variables &amp; Patterns</li>
<li>457:    Class-File API (Preview)</li>
<li>458:    Launch Multi-File Source-Code Programs</li>
<li>459:    String Templates (Second Preview)</li>
<li>460:    Vector API (Seventh Incubator)</li>
<li>461:    Stream Gatherers (Preview)</li>
<li>462:    Structured Concurrency (Second Preview)</li>
<li>463:    Implicitly Declared Classes and Instance Main Methods (Second Preview)</li>
<li>464:    Scoped Values (Second Preview)</li>
</ul>
<h2>Java 21(GA 2023/09/19)</h2>
<ul>
<li><a href="Java21/jep430-string-templates">430:    String Templates (Preview)</a></li>
<li><a href="Java21/jep431-sequenced-collections">431:    Sequenced Collections</a></li>
<li><a href="Java21/jep439-generational-zgc">439:    Generational ZGC</a></li>
<li><a href="Java21/jep440-record-partterns">440:    Record Patterns</a></li>
<li><a href="Java21/jep441-pattern-matching-for-switch">441:    Pattern Matching for switch</a></li>
<li>442:    Foreign Function &amp; Memory API (Third Preview)</li>
<li>443:    Unnamed Patterns and Variables (Preview)</li>
<li><a href="Java21/jep444-virtual-threads">444:    Virtual Threads</a></li>
<li>445:    Unnamed Classes and Instance Main Methods (Preview)</li>
<li>446:    Scoped Values (Preview)</li>
<li>448:    Vector API (Sixth Incubator)</li>
<li>449:    Deprecate the Windows 32-bit x86 Port for Removal</li>
<li>451:    Prepare to Disallow the Dynamic Loading of Agents</li>
<li>452:    Key Encapsulation Mechanism API</li>
<li>453:    Structured Concurrency (Preview)</li>
</ul>
<h2>Java 20(GA 2023/03/21)</h2>
<ul>
<li>429:    Scoped Values (Incubator)</li>
<li>432:    Record Patterns (Second Preview)</li>
<li>433:    Pattern Matching for switch (Fourth Preview)</li>
<li>434:    Foreign Function &amp; Memory API (Second Preview)</li>
<li>436:    Virtual Threads (Second Preview)</li>
<li>437:    Structured Concurrency (Second Incubator)</li>
<li>438:    Vector API (Fifth Incubator)</li>
</ul>
<h2>Java 19(GA 2022/09/20)</h2>
<ul>
<li>405:    Record Patterns (Preview)</li>
<li>422:    Linux/RISC-V Port</li>
<li>424:    Foreign Function &amp; Memory API (Preview)</li>
<li>425:    Virtual Threads (Preview)</li>
<li>426:    Vector API (Fourth Incubator)</li>
<li>427:    Pattern Matching for switch (Third Preview)</li>
<li>428:    Structured Concurrency (Incubator)</li>
</ul>
<h2>Java 18(GA 2022/03/22)</h2>
<ul>
<li><a href="Java18/jep400-utf8-by-default">400:    UTF-8 by Default</a></li>
<li><a href="Java18/jep408-simple-web-server">408:    Simple Web Server</a></li>
<li><a href="Java18/jep413-code-snippets-in-api-documentation">413:    Code Snippets in Java API Documentation</a></li>
<li>416:    Reimplement Core Reflection with Method Handles</li>
<li>417:    Vector API (Third Incubator)</li>
<li>418:    Internet-Address Resolution SPI</li>
<li>419:    Foreign Function &amp; Memory API (Second Incubator)</li>
<li>420:    Pattern Matching for switch (Second Preview)</li>
<li>421:    Deprecate Finalization for Removal</li>
</ul>
<h2>Java 17(GA 2021/09/14)</h2>
<ul>
<li>306:    Restore Always-Strict Floating-Point Semantics</li>
<li>356:    Enhanced Pseudo-Random Number Generators</li>
<li>382:    New macOS Rendering Pipeline</li>
<li>391:    macOS/AArch64 Port</li>
<li>398:    Deprecate the Applet API for Removal</li>
<li>403:    Strongly Encapsulate JDK Internals</li>
<li><a href="Java17/jep406-pattern-matching-for-switch-preview">406:    Pattern Matching for switch (Preview)</a></li>
<li>407:    Remove RMI Activation</li>
<li><a href="Java17/jep409-sealed-classes">409:    Sealed Classes</a></li>
<li>410:    Remove the Experimental AOT and JIT Compiler</li>
<li>411:    Deprecate the Security Manager for Removal</li>
<li>412:    Foreign Function &amp; Memory API (Incubator)</li>
<li>414:    Vector API (Second Incubator)</li>
<li>415:    Context-Specific Deserialization Filters</li>
</ul>
<h2>Java 16(GA 2021/03/16)</h2>
<ul>
<li>338:    Vector API (Incubator)</li>
<li>347:    Enable C++14 Language Features</li>
<li>357:    Migrate from Mercurial to Git</li>
<li>369:    Migrate to GitHub</li>
<li>376:    ZGC: Concurrent Thread-Stack Processing</li>
<li>380:    Unix-Domain Socket Channels</li>
<li>386:    Alpine Linux Port</li>
<li>387:    Elastic Metaspace</li>
<li>388:    Windows/AArch64 Port</li>
<li>389:    Foreign Linker API (Incubator)</li>
<li>390:    Warnings for Value-Based Classes</li>
<li>392:    Packaging Tool</li>
<li>393:    Foreign-Memory Access API (Third Incubator)</li>
<li><a href="Java16/jep394-pattern-matching-for-instanceof">394:    Pattern Matching for instanceof</a></li>
<li><a href="Java16/jep395-records">395:    Records</a></li>
<li>396:    Strongly Encapsulate JDK Internals by Default</li>
<li>397:    Sealed Classes (Second Preview)</li>
</ul>
<h2>Java 15(GA 2020/09/15)</h2>
<ul>
<li>339:    Edwards-Curve Digital Signature Algorithm (EdDSA)</li>
<li>360:    Sealed Classes (Preview)</li>
<li><a href="Java15/jep371-hidden-classes">371:    Hidden Classes</a></li>
<li>372:    Remove the Nashorn JavaScript Engine</li>
<li>373:    Reimplement the Legacy DatagramSocket API</li>
<li>374:    Disable and Deprecate Biased Locking</li>
<li>375:    Pattern Matching for instanceof (Second Preview)</li>
<li>377:    ZGC: A Scalable Low-Latency Garbage Collector</li>
<li><a href="Java15/jep378-text-blocks">378:    Text Blocks</a></li>
<li>379:    Shenandoah: A Low-Pause-Time Garbage Collector</li>
<li>381:    Remove the Solaris and SPARC Ports</li>
<li>383:    Foreign-Memory Access API (Second Incubator)</li>
<li>384:    Records (Second Preview)</li>
<li>385:    Deprecate RMI Activation for Removal</li>
</ul>
<h2>Java 14(GA 2020/03/17)</h2>
<ul>
<li>305:    Pattern Matching for instanceof (Preview)</li>
<li>343:    Packaging Tool (Incubator)</li>
<li>345:    NUMA-Aware Memory Allocation for G1</li>
<li>349:    JFR Event Streaming</li>
<li>352:    Non-Volatile Mapped Byte Buffers</li>
<li>358:    Helpful NullPointerExceptions</li>
<li>359:    Records (Preview)</li>
<li><a href="Java14/jep361-switch-expressions">361:    Switch Expressions (Standard)</a></li>
<li>362:    Deprecate the Solaris and SPARC Ports</li>
<li>363:    Remove the Concurrent Mark Sweep (CMS) Garbage Collector</li>
<li>364:    ZGC on macOS</li>
<li>365:    ZGC on Windows</li>
<li>366:    Deprecate the ParallelScavenge + SerialOld GC Combination</li>
<li>367:    Remove the Pack200 Tools and API</li>
<li>368:    Text Blocks (Second Preview)</li>
<li>370:    Foreign-Memory Access API (Incubator)</li>
</ul>
<h2>Java 13(GA 2019/09/17)</h2>
<ul>
<li>350: Dynamic CDS Archives</li>
<li>351: ZGC: Uncommit Unused Memory</li>
<li>353: Reimplement the Legacy Socket API</li>
<li>354: Switch Expressions (Preview)</li>
<li>355: Text Blocks (Preview)</li>
</ul>
<h2>Java 12(GA 2019/03/19)</h2>
<ul>
<li>189: Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</li>
<li>230: Microbenchmark Suite</li>
<li>325: Switch Expressions (Preview)</li>
<li>334: JVM Constants API</li>
<li>340: One AArch64 Port, Not Two</li>
<li>341: Default CDS Archives</li>
<li>344: Abortable Mixed Collections for G1</li>
<li>346: Promptly Return Unused Committed Memory from G1</li>
</ul>
<h2>Java 11(GA 2018/09/25)</h2>
<ul>
<li>181: Nest-Based Access Control</li>
<li>309: Dynamic Class-File Constants</li>
<li>315: Improve Aarch64 Intrinsics</li>
<li>318: Epsilon: A No-Op Garbage Collector</li>
<li><a href="Java11/jep320-remove-JavaEE-CORBA">320: Remove the Java EE and CORBA Modules</a></li>
<li>321: HTTP Client (Standard)</li>
<li>323: Local-Variable Syntax for Lambda Parameters</li>
<li>324: Key Agreement with Curve25519 and Curve448</li>
<li>327: Unicode 10</li>
<li>328: Flight Recorder</li>
<li>329: ChaCha20 and Poly1305 Cryptographic Algorithms</li>
<li>330: Launch Single-File Source-Code Programs</li>
<li>331: Low-Overhead Heap Profiling</li>
<li>332: Transport Layer Security (TLS) 1.3</li>
<li>333: ZGC: A Scalable Low-Latency Garbage Collector(Experimental)</li>
<li>335: Deprecate the Nashorn JavaScript Engine</li>
<li>336: Deprecate the Pack200 Tools and API</li>
</ul>
<h2>Java 10(GA 2018/03/20)</h2>
<ul>
<li><a href="Java10/jep286-local-variable-type-inference">286: Local-Variable Type Inference</a></li>
<li>296: Consolidate the JDK Forest into a Single Repository</li>
<li>304: Garbage-Collector Interface</li>
<li>307: Parallel Full GC for G1</li>
<li>310: Application Class-Data Sharing</li>
<li>312: Thread-Local Handshakes</li>
<li>313: Remove the Native-Header Generation Tool (Javah)</li>
<li>314: Additional Unicode Language-Tag Extensions</li>
<li>316: Heap Allocation on Alternative Memory Devices</li>
<li>317: Experimental Java-Based JIT Compiler</li>
<li>319: Root Certificates</li>
<li>322: Time-Based Release Versioning</li>
</ul>
<h2>Java 9(GA 2017/09/21)</h2>
<ul>
<li>102: Process API Updates</li>
<li>110: HTTP 2 Client</li>
<li>143: Improve Contended Locking</li>
<li>158: Unified JVM Logging</li>
<li>165: Compiler Control</li>
<li>193: Variable Handles</li>
<li>197: Segmented Code Cache</li>
<li>199: Smart Java Compilation, Phase Two</li>
<li>200: The Modular JDK</li>
<li>201: Modular Source Code</li>
<li>211: Elide Deprecation Warnings on Import Statements</li>
<li>212: Resolve Lint and Doclint Warnings</li>
<li>213: Milling Project Coin</li>
<li>214: Remove GC Combinations Deprecated in JDK 8</li>
<li>215: Tiered Attribution for javac</li>
<li>216: Process Import Statements Correctly</li>
<li>217: Annotations Pipeline 2.0</li>
<li>219: Datagram Transport Layer Security (DTLS)</li>
<li>220: Modular Run-Time Images</li>
<li>221: Simplified Doclet API</li>
<li><a href="Java9/jep222-jshell">222: jshell: The Java Shell (Read-Eval-Print Loop)</a></li>
<li>223: New Version-String Scheme</li>
<li>224: HTML5 Javadoc</li>
<li>225: Javadoc Search</li>
<li>226: UTF-8 Property Files</li>
<li>227: Unicode 7.0</li>
<li>228: Add More Diagnostic Commands</li>
<li>229: Create PKCS12 Keystores by Default</li>
<li>231: Remove Launch-Time JRE Version Selection</li>
<li>232: Improve Secure Application Performance</li>
<li>233: Generate Run-Time Compiler Tests Automatically</li>
<li>235: Test Class-File Attributes Generated by javac</li>
<li>236: Parser API for Nashorn</li>
<li>237: Linux/AArch64 Port</li>
<li>238: Multi-Release JAR Files</li>
<li>240: Remove the JVM TI hprof Agent</li>
<li>241: Remove the jhat Tool</li>
<li>243: Java-Level JVM Compiler Interface</li>
<li>244: TLS Application-Layer Protocol Negotiation Extension</li>
<li>245: Validate JVM Command-Line Flag Arguments</li>
<li>246: Leverage CPU Instructions for GHASH and RSA</li>
<li>247: Compile for Older Platform Versions</li>
<li>248: Make G1 the Default Garbage Collector</li>
<li>249: OCSP Stapling for TLS</li>
<li>250: Store Interned Strings in CDS Archives</li>
<li>251: Multi-Resolution Images</li>
<li>252: Use CLDR Locale Data by Default</li>
<li>253: Prepare JavaFX UI Controls &amp; CSS APIs for Modularization</li>
<li>254: Compact Strings</li>
<li>255: Merge Selected Xerces 2.11.0 Updates into JAXP</li>
<li>256: BeanInfo Annotations</li>
<li>257: Update JavaFX/Media to Newer Version of GStreamer</li>
<li>258: HarfBuzz Font-Layout Engine</li>
<li>259: Stack-Walking API</li>
<li>260: Encapsulate Most Internal APIs</li>
<li>261: Module System</li>
<li>262: TIFF Image I/O</li>
<li>263: HiDPI Graphics on Windows and Linux</li>
<li>264: Platform Logging API and Service</li>
<li>265: Marlin Graphics Renderer</li>
<li>266: More Concurrency Updates</li>
<li>267: Unicode 8.0</li>
<li>268: XML Catalogs</li>
<li><a href="Java9/jep269-convenience-factory-methods-for-collections">269: Convenience Factory Methods for Collections</a></li>
<li>270: Reserved Stack Areas for Critical Sections</li>
<li>271: Unified GC Logging</li>
<li>272: Platform-Specific Desktop Features</li>
<li>273: DRBG-Based SecureRandom Implementations</li>
<li>274: Enhanced Method Handles</li>
<li>275: Modular Java Application Packaging</li>
<li>276: Dynamic Linking of Language-Defined Object Models</li>
<li>277: Enhanced Deprecation</li>
<li>278: Additional Tests for Humongous Objects in G1</li>
<li>279: Improve Test-Failure Troubleshooting</li>
<li>280: Indify String Concatenation</li>
<li>281: HotSpot C++ Unit-Test Framework</li>
<li>282: jlink: The Java Linker</li>
<li>283: Enable GTK 3 on Linux</li>
<li>284: New HotSpot Build System</li>
<li>285: Spin-Wait Hints</li>
<li>287: SHA-3 Hash Algorithms</li>
<li>288: Disable SHA-1 Certificates</li>
<li>289: Deprecate the Applet API</li>
<li>290: Filter Incoming Serialization Data</li>
<li>291: Deprecate the Concurrent Mark Sweep (CMS) Garbage Collector</li>
<li>292: Implement Selected ECMAScript 6 Features in Nashorn</li>
<li>294: Linux/s390x Port</li>
<li>295: Ahead-of-Time Compilation</li>
<li>297: Unified arm32/arm64 Port</li>
<li>298: Remove Demos and Samples</li>
<li>299: Reorganize Documentation</li>
</ul>
<h2>Java 8(GA 2014/03/18)</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Java 9 新特性：交互式编程环境JShell</title>
      <link>https://www.geekyspace.cn/java-features/Java9/jep222-jshell.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java9/jep222-jshell.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 9 新特性：交互式编程环境JShell</source>
      <description>Java 9 新特性：交互式编程环境JShell JShell 是 Java 9 引入的一个交互式编程环境，它是 Java 编程语言的 REPL（Read-Eval-Print Loop）实现。 REPL 是一种编程环境，允许用户输入表达式并立即看到结果，而无需事先编写和编译完整的程序。 JShell 的目标是提供一个轻量级、灵活且易于使用的工具，使得...</description>
      <category>Java</category>
      <pubDate>Thu, 21 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>JShell 是 Java 9 引入的一个<strong>交互式编程环境</strong>，它是 Java 编程语言的 REPL（Read-Eval-Print Loop）实现。
REPL 是一种编程环境，允许用户输入表达式并立即看到结果，而无需事先编写和编译完整的程序。
JShell 的目标是提供一个轻量级、灵活且易于使用的工具，使得 Java 开发者能够更直观地编写和测试代码。</p>
<h2>JShell快速入门</h2>
<h3>启动JShell</h3>
<p>打开终端，然后执行命令：<code>jshell</code>，执行效果如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>➜  <span class="token operator">~</span> jshell
<span class="token operator">|</span>  欢迎使用 <span class="token class-name">JShell</span> <span class="token operator">--</span> 版本 <span class="token number">9</span>
<span class="token operator">|</span>  要大致了解该版本<span class="token punctuation">,</span> 请键入<span class="token operator">:</span> <span class="token operator">/</span>help intro

jshell<span class="token operator">&gt;</span>
</code></pre></div><h3>帮助介绍 /help intro</h3>
<p>执行 <code>/help intro</code> 命令以获取有关 JShell 工具的简要介绍，<strong>intro</strong> 是主题，提供了关于 jshell 工具的核心概念和使用方法的信息。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>jshell&gt; /help intro
|
|                                   intro
|                                   =====
|
|  使用 jshell 工具可以执行 Java 代码，从而立即获取结果。
|  您可以输入 Java 定义（变量、方法、类等等），例如：int x = 8
|  或 Java 表达式，例如：x + x
|  或 Java 语句或导入。
|  这些小块的 Java 代码称为“片段”。
|
|  这些 jshell 工具命令还可以让您了解和
|  控制您正在执行的操作，例如：/list
|
|  有关命令的列表，请执行：/help

jshell&gt;
</code></pre></div><h3>定义变量、方法、类</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 定义变量</span>
jshell<span class="token operator">&gt;</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">8</span>
x <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">8</span>

<span class="token comment">// 定义方法</span>
jshell<span class="token operator">&gt;</span> <span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;     <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token punctuation">}</span>
<span class="token operator">|</span>  已创建 方法 <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>

<span class="token comment">// 定义类</span>
jshell<span class="token operator">&gt;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;     <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;     <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;         <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;     <span class="token punctuation">}</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;         <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt;     <span class="token punctuation">}</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&gt; <span class="token punctuation">}</span>
<span class="token operator">|</span>  已创建 类 <span class="token class-name">Message</span>

jshell<span class="token operator">&gt;</span>
</code></pre></div><h3>执行表达式、调用方法</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 执行 Java 表达式</span>
jshell<span class="token operator">&gt;</span> x <span class="token operator">+</span> x
$<span class="token number">4</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">16</span>

<span class="token comment">// 调用方法</span>
jshell<span class="token operator">&gt;</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
$<span class="token number">5</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token number">25</span>

    
<span class="token comment">// 创建类实例并调用方法</span>
jshell<span class="token operator">&gt;</span> <span class="token class-name">Message</span> messageObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"Hello, JShell!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
messageObj <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Message</span><span class="token annotation punctuation">@6d4b1c02</span>

jshell<span class="token operator">&gt;</span> messageObj<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

$<span class="token number">7</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token string">"Hello, JShell!"</span>
</code></pre></div><h2>查看定义的变量：/vars</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>vars
<span class="token operator">|</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">8</span>
<span class="token operator">|</span>    <span class="token keyword">int</span> $<span class="token number">4</span> <span class="token operator">=</span> <span class="token number">16</span>
<span class="token operator">|</span>    <span class="token keyword">int</span> $<span class="token number">5</span> <span class="token operator">=</span> <span class="token number">25</span>
<span class="token operator">|</span>    <span class="token class-name">Message</span> messageObj <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token annotation punctuation">@6d4b1c02</span>
<span class="token operator">|</span>    <span class="token class-name">String</span> $<span class="token number">7</span> <span class="token operator">=</span> <span class="token string">"Hello, JShell!"</span>
</code></pre></div><h2>查看定义的方法：/methods</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>methods
<span class="token operator">|</span>    <span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
</code></pre></div><h2>查看定义的类：/types</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>types
<span class="token operator">|</span>    <span class="token keyword">class</span> <span class="token class-name">Message</span>

</code></pre></div><h2>列出输入源条目：/list</h2>
<p>执行后，可以看到之前在<code>jshell</code>中输入的内容清单：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>list

   <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
   <span class="token number">2</span> <span class="token operator">:</span> <span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token number">3</span> <span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">{</span>
           <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
           <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
           <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
   <span class="token number">4</span> <span class="token operator">:</span> x <span class="token operator">+</span> x
   <span class="token number">5</span> <span class="token operator">:</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
   <span class="token number">6</span> <span class="token operator">:</span> <span class="token class-name">Message</span> messageObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"Hello, JShell!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">7</span> <span class="token operator">:</span> messageObj<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

jshell<span class="token operator">&gt;</span>
</code></pre></div><h2>编辑源条目：/edit</h2>
<p>上面通过<code>/list</code>列出了输入的条目信息，下面试试通过<code>/edit</code>编辑下，比如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>edit <span class="token number">2</span>
</code></pre></div><p>这将打开编辑器，修改先前定义的 <code>square</code> 方法。</p>
<p>修改完成后，点击 <strong>accept</strong> 即可</p>
<h2>删除源条目：/drop</h2>
<p>使用 <code>/drop</code> 命令可以删除之前输入的源代码块。可以通过指定<strong>名称</strong>或 <strong>ID</strong> 删除特定的源代码块。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>drop <span class="token class-name">Message</span>
<span class="token operator">|</span>  已删除 类 <span class="token class-name">Message</span>
</code></pre></div><p>这将删除之前定义的 <code>Message</code> 类。</p>
<h2>保存文件：/save</h2>
<p>通过 <code>/save</code> 命令，您可以将 JShell 中的源代码保存到文件中，以便将其保留或与他人共享。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>save myCode<span class="token punctuation">.</span>java
</code></pre></div><p>这将把当前所有的源代码保存到一个名为 <code>myCode.java</code> 的文件中。</p>
<h2>打开文件：/open</h2>
<p>使用 <code>/open</code> 命令可以将文件的内容导入到 JShell 中，以便重新使用或修改。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span><span class="token keyword">open</span> <span class="token namespace">myCode<span class="token punctuation">.</span>java</span>
</code></pre></div><p>这将导入之前保存的 <code>myCode.java</code> 文件中的源代码。</p>
<h2>重置jshell：/reset</h2>
<p>使用 <code>/reset</code> 命令可以清空 JShell 的状态，包括所有定义的变量、方法和类。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>reset
<span class="token operator">|</span>  正在重置状态
</code></pre></div><p>这将重置 JShell 并清除所有之前定义的内容。</p>
<h2>查看引入的包：/imports</h2>
<p>使用 <code>/imports</code> 命令可以查看当前已经导入的包。这对于确保您在 JShell 中能够访问所需的类和方法非常有用。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>imports
<span class="token operator">|</span>    <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span>
</code></pre></div><p>这表明已经导入了 <code>java.util</code> 包。</p>
<h2>退出jshell：/exit</h2>
<p>使用 <code>/exit</code> 命令可以退出 JShell。如果需要，在命令后可以添加一个整数表达式片段作为退出代码。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>exit <span class="token number">0</span>
</code></pre></div><p>这将以退出代码 0 退出 JShell。</p>
<h2>查看命令：/help</h2>
<p>最后，使用 <code>/help</code> 命令可以随时查看 JShell 的帮助信息，了解各种命令和主题的使用方法。例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>jshell<span class="token operator">&gt;</span> <span class="token operator">/</span>help
<span class="token operator">|</span>  键入 <span class="token class-name">Java</span> 语言表达式<span class="token punctuation">,</span> 语句或声明。
<span class="token operator">|</span>  或者键入以下命令之一<span class="token operator">:</span>
<span class="token operator">|</span>  <span class="token operator">/</span>list <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">&gt;</span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>
<span class="token operator">|</span>  	列出您键入的源
<span class="token operator">|</span>  <span class="token operator">/</span>edit <span class="token operator">&lt;</span>名称或 id<span class="token operator">&gt;</span>
<span class="token operator">|</span>  	编辑源条目
<span class="token operator">|</span>  <span class="token operator">/</span>drop <span class="token operator">&lt;</span>名称或 id<span class="token operator">&gt;</span>
<span class="token operator">|</span>  	删除源条目
<span class="token operator">|</span>  <span class="token operator">/</span>save <span class="token punctuation">[</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>history<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span>
<span class="token operator">|</span>  	将片段源保存到文件
<span class="token operator">|</span>  <span class="token operator">/</span><span class="token keyword">open</span> <span class="token generics"><span class="token punctuation">&lt;</span>file<span class="token punctuation">&gt;</span></span>
<span class="token operator">|</span>  	打开文件作为源输入
<span class="token operator">|</span>  <span class="token operator">/</span>vars <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">&gt;</span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>
<span class="token operator">|</span>  	列出已声明变量及其值
<span class="token operator">|</span>  <span class="token operator">/</span>methods <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">&gt;</span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>
<span class="token operator">|</span>  	列出已声明方法及其签名
<span class="token operator">|</span>  <span class="token operator">/</span>types <span class="token punctuation">[</span><span class="token operator">&lt;</span>名称或 id<span class="token operator">&gt;</span><span class="token operator">|</span><span class="token operator">-</span>all<span class="token operator">|</span><span class="token operator">-</span>start<span class="token punctuation">]</span>
<span class="token operator">|</span>  	列出类型声明
<span class="token operator">|</span>  <span class="token operator">/</span>imports 
<span class="token operator">|</span>  	列出导入的项
<span class="token operator">|</span>  <span class="token operator">/</span>exit <span class="token punctuation">[</span><span class="token operator">&lt;</span>integer<span class="token operator">-</span>expression<span class="token operator">-</span>snippet<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token operator">|</span>  	退出 jshell 工具
<span class="token operator">|</span>  <span class="token operator">/</span>env <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>add<span class="token operator">-</span>modules <span class="token operator">&lt;</span>模块<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">|</span>  	查看或更改评估上下文
<span class="token operator">|</span>  <span class="token operator">/</span>reset <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>add<span class="token operator">-</span>modules <span class="token operator">&lt;</span>模块<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">|</span>  	重置 jshell 工具
<span class="token operator">|</span>  <span class="token operator">/</span>reload <span class="token punctuation">[</span><span class="token operator">-</span>restore<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>quiet<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">|</span>  	重置和重放相关历史记录 <span class="token operator">--</span> 当前历史记录或上一个历史记录 <span class="token punctuation">(</span><span class="token operator">-</span>restore<span class="token punctuation">)</span>
<span class="token operator">|</span>  <span class="token operator">/</span>history <span class="token punctuation">[</span><span class="token operator">-</span>all<span class="token punctuation">]</span>
<span class="token operator">|</span>  	您键入的内容的历史记录
<span class="token operator">|</span>  <span class="token operator">/</span>help <span class="token punctuation">[</span><span class="token generics"><span class="token punctuation">&lt;</span>command<span class="token punctuation">&gt;</span></span><span class="token operator">|</span><span class="token generics"><span class="token punctuation">&lt;</span>subject<span class="token punctuation">&gt;</span></span><span class="token punctuation">]</span>
<span class="token operator">|</span>  	获取有关使用 jshell 工具的信息
<span class="token operator">|</span>  <span class="token operator">/</span>set editor<span class="token operator">|</span>start<span class="token operator">|</span>feedback<span class="token operator">|</span>mode<span class="token operator">|</span>prompt<span class="token operator">|</span>truncation<span class="token operator">|</span>format <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">|</span>  	设置配置信息
<span class="token operator">|</span>  <span class="token operator">/</span><span class="token operator">?</span> <span class="token punctuation">[</span><span class="token generics"><span class="token punctuation">&lt;</span>command<span class="token punctuation">&gt;</span></span><span class="token operator">|</span><span class="token generics"><span class="token punctuation">&lt;</span>subject<span class="token punctuation">&gt;</span></span><span class="token punctuation">]</span>
<span class="token operator">|</span>  	获取有关使用 jshell 工具的信息
<span class="token operator">|</span>  <span class="token operator">/</span><span class="token operator">!</span> 
<span class="token operator">|</span>  	重新运行上一个片段 <span class="token operator">--</span> 请参阅 <span class="token operator">/</span>help rerun
<span class="token operator">|</span>  <span class="token operator">/</span><span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">&gt;</span></span> 
<span class="token operator">|</span>  	按 <span class="token constant">ID</span> 或 <span class="token constant">ID</span> 范围重新运行片段 <span class="token operator">--</span> 参见 <span class="token operator">/</span>help rerun
<span class="token operator">|</span>  <span class="token operator">/</span><span class="token operator">-</span><span class="token generics"><span class="token punctuation">&lt;</span>n<span class="token punctuation">&gt;</span></span> 
<span class="token operator">|</span>  	重新运行以前的第 n 个片段 <span class="token operator">--</span> 请参阅 <span class="token operator">/</span>help rerun
<span class="token operator">|</span>  
<span class="token operator">|</span>  有关详细信息<span class="token punctuation">,</span> 请键入 <span class="token char">'/help'</span><span class="token punctuation">,</span> 后跟
<span class="token operator">|</span>  命令或主题的名称。
<span class="token operator">|</span>  例如 '<span class="token operator">/</span>help <span class="token operator">/</span>list<span class="token char">' 或 '</span><span class="token operator">/</span>help intro'。主题<span class="token operator">:</span>
<span class="token operator">|</span>  
<span class="token operator">|</span>  intro
<span class="token operator">|</span>  	jshell 工具的简介
<span class="token operator">|</span>  keys
<span class="token operator">|</span>  	类似 readline 的输入编辑的说明
<span class="token operator">|</span>  id
<span class="token operator">|</span>  	片段 <span class="token constant">ID</span> 以及如何使用它们的说明
<span class="token operator">|</span>  shortcuts
<span class="token operator">|</span>  	片段和命令输入提示<span class="token punctuation">,</span> 信息访问以及
<span class="token operator">|</span>  	自动代码生成的按键说明
<span class="token operator">|</span>  context
<span class="token operator">|</span>  	<span class="token operator">/</span>env <span class="token operator">/</span>reload 和 <span class="token operator">/</span>reset 的评估上下文选项的说明
<span class="token operator">|</span>  rerun
<span class="token operator">|</span>  	重新评估以前输入片段的方法的说明

jshell<span class="token operator">&gt;</span> 
</code></pre></div><p>这将显示 JShell 的主要帮助信息。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 9 新特性：不可变集合的快捷创建方法</title>
      <link>https://www.geekyspace.cn/java-features/Java9/jep269-convenience-factory-methods-for-collections.html</link>
      <guid>https://www.geekyspace.cn/java-features/Java9/jep269-convenience-factory-methods-for-collections.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">Java 9 新特性：不可变集合的快捷创建方法</source>
      <description>Java 9 新特性：不可变集合的快捷创建方法 Java 9 引入了一项令人期待的新特性，即集合的便利工厂方法（Convenience Factory Methods for Collections），旨在使不可变集合的创建更加简单和便捷。 在此之前，我们通常使用构造方法来初始化集合，而Java 9为我们提供了一些全新的静态工厂方法，使得创建不可变集合...</description>
      <category>Java</category>
      <pubDate>Fri, 22 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Java 9 引入了一项令人期待的新特性，即<strong>集合的便利工厂方法</strong>（Convenience Factory Methods for Collections），旨在使不可变集合的创建更加简单和便捷。
在此之前，我们通常使用构造方法来初始化集合，而Java 9为我们提供了一些全新的静态工厂方法，使得创建不可变集合的过程更为优雅。</p>
<h2>Java 9的集合创建方式</h2>
<p>Java 9引入了一些便利的工厂方法，使得创建和初始化集合对象变得更加简洁和方便。
这些改进包括List.of()、Set.of()和Map.of()等方法，用于创建不可变的集合对象。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建不可变列表</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> immutableList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item2"</span><span class="token punctuation">,</span> <span class="token string">"item3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建不可变集合</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> immutableSet <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item2"</span><span class="token punctuation">,</span> <span class="token string">"item3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建不可变映射</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> immutableMap <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样一行代码就完成了整个集合的创建和初始化过程，使得代码更加简洁、清晰，并且具有更高的可读性。</p>
<h2>Java 8的集合创建方式</h2>
<p>Java 8引入了Lambda表达式和流式操作，这使得集合的初始化过程变得更加流畅和具有函数式编程的特性。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建不可变列表</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> immutableList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item2"</span><span class="token punctuation">,</span> <span class="token string">"item3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建不可变集合</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> immutableSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item2"</span><span class="token punctuation">,</span> <span class="token string">"item3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建不可变映射</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> immutableMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>虽然相较于传统方式，Java 8的写法更为紧凑，但仍显得略显繁琐。</p>
<h2>传统的集合创建方式</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建不可变列表</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> traditionalList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"item1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"item2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"item3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>traditionalList<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建不可变集合</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> traditionalSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"item1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"item2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"item3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span>traditionalSet<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建不可变映射</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> traditionalMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
traditionalMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>traditionalMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这种方式繁琐且不够直观，给代码的可读性和编写效率带来了一定的挑战。</p>
<h2>List.of() vs. Arrays.asList()</h2>
<ul>
<li>
<p><strong>可变性：</strong><code>List.of</code> 创建的是不可变集合，<code>Arrays.asList</code> 是可变集合</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// List.of 创建建的列表是不可变的</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> immutableList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无法添加、删除或修改元素，以下操作会导致 UnsupportedOperationException</span>
immutableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
immutableList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Arrays.asList()  创建的列表是可变的</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> mutableList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以使用 add()、set() 方法修改元素，但不允许改变列表的大小</span>
mutableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>
<p><strong>null元素：</strong><code>List.of</code> 不允许包含 null 元素，<code>Arrays.asList</code> 允许包含 null 元素，但不推荐</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> listWithNull <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>
<p><strong>底层数据结构：</strong><code>List.of </code>使用不可变数据结构，<code>Arrays.asList</code>底层使用数组，对列表修改将反映在原始数组上</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> immutableList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> mutableList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>GeekySpace | 软件开发者与技术领袖的信息平台</title>
      <link>https://www.geekyspace.cn/intro.html</link>
      <guid>https://www.geekyspace.cn/intro.html</guid>
      <source url="https://www.geekyspace.cn/rss.xml">GeekySpace | 软件开发者与技术领袖的信息平台</source>
      <description>软件开发者与技术领袖的信息平台</description>
      <category>程序人生</category>
      <pubDate>Mon, 14 Dec 1998 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>🚀 当坚持成为一种热爱，极致成为一种精神，那么成功就是一种必然</p>
</blockquote>
<h2>会敲代码的程序猿</h2>
<p>Hi，我是一名<em>会敲代码的程序员</em>，在Java和相关技术领域拥有多年的专业经验。
目前，我在 <a href="https://www.liquido.com/" target="_blank" rel="noopener noreferrer">Liquido</a> 工作，这是一家专注于金融领域，
提供拉美地区<a href="https://mp.weixin.qq.com/s/UzPsaVvXqrvW8T8PDPnhZw" target="_blank" rel="noopener noreferrer">支付解决方案</a>的公司。</p>
<h2>编程之路</h2>
<ul>
<li>启蒙早期：初中时期接触编程，参与编程比赛，培养了对编程的浓厚兴趣</li>
<li>博客分享：运营个人博客 <a href="https://www.geekyspace.cn/" target="_blank" rel="noopener noreferrer">GeekySpace</a>，分享编程经验和技术干货，致力于帮助他人少走弯路</li>
<li>个人接单服务：为客户提供专业的软件开发服务，涵盖Java Web开发和微服务架构等领域</li>
<li>持续成长：通过不断学习和实践，持续提升技术能力，致力于成为更优秀的软件工程师</li>
</ul>
<h2>探索博客世界</h2>
<p>GeekySpace 是一个专注于软件开发者和技术领导者的在线信息平台。
我们提供了涵盖软件开发、敏捷方法、DevOps、大数据、人工智能、微服务、云计算等技术领域的丰富文章、博客内容。
我们的使命是为软件开发社区提供最新的技术趋势、最佳实践和行业动态，帮助开发者们不断学习和成长。</p>
<p>欢迎访问我们的网站 <a href="www.geekyspace.cn">www.geekyspace.cn</a>，与我们一起探索科技的未来！</p>
]]></content:encoded>
      <enclosure url="https://www.geekyspace.cn/assets/images/cover3.jpg" type="image/jpeg"/>
    </item>
  </channel>
</rss>